Switched global version to 0.8.6
Checking DrawCalculator
Checking PrizeDistributionBuffer
Checking PrizeDistributor
Checking IControlledToken
Checking IDrawBeacon
Checking IDrawBuffer
Checking IDrawCalculator
Checking IPrizeDistributionBuffer
Checking IPrizeDistributor
Checking ITicket
Checking DrawRingBufferLib
Checking ExtendedSafeCastLib
Checking ObservationLib
Checking OverflowSafeComparatorLib
Checking RingBufferLib
Checking TwabLib
Checking IERC20
Checking SafeERC20
Checking Address
Checking SafeCast
Checking Manageable
Checking Ownable
Checking RNGInterface
Add to address_to_label {'global:_owner': 1}
Add to address_to_label {'global:_owner': 1, 'global:_pendingOwner': 2}
Add to address_to_label {'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999}
Add to address_to_label {'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999, 'calculate:_user': -998}
Add to address_to_label {'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999, 'calculate:_user': -998, 'getNormalizedBalancesForDrawIds:_user': -997}
State_var: _owner
Finding type for _owner(address ... )
prev address? u
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
State_var: TIERS_LENGTH
Finding type for TIERS_LENGTH(uint8 ... )
State_var: drawBuffer
Finding type for drawBuffer(IDrawBuffer ... )
State_var: _pendingOwner
Finding type for _pendingOwner(address ... )
prev address? u
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
State_var: prizeDistributionBuffer
Finding type for prizeDistributionBuffer(IPrizeDistributionBuffer ... )
State_var: ticket
Finding type for ticket(ITicket ... )



constructor
Finding type for _owner(address ... )
prev address? u
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Finding type for _ticket(ITicket ... )
Finding type for _drawBuffer(IDrawBuffer ... )
Finding type for _prizeDistributionBuffer(IPrizeDistributionBuffer ... )
Param: 0
    num: []
    den: []
    norm: u
    link: _owner
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


INTERNAL_CALL, Ownable.constructor(address)(_owner_1)
TMP_13 = CONVERT _ticket_1 to address
TMP_14 = CONVERT 0 to address
TMP_15(bool) = TMP_13 != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool,string)(TMP_15,DrawCalc/ticket-not-zero)
TMP_17 = CONVERT _prizeDistributionBuffer_1 to address
TMP_18 = CONVERT 0 to address
TMP_19(bool) = TMP_17 != TMP_18
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,DrawCalc/pdb-not-zero)
TMP_21 = CONVERT _drawBuffer_1 to address
TMP_22 = CONVERT 0 to address
TMP_23(bool) = TMP_21 != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool,string)(TMP_23,DrawCalc/dh-not-zero)
ticket_1(ITicket) := _ticket_1(ITicket)
drawBuffer_1(IDrawBuffer) := _drawBuffer_1(IDrawBuffer)
prizeDistributionBuffer_1(IPrizeDistributionBuffer) := _prizeDistributionBuffer_1(IPrizeDistributionBuffer)
Emit Deployed(_ticket_1,_drawBuffer_1,_prizeDistributionBuffer_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, Ownable.constructor(address)(_owner_1)
init
end
[[], [], 'u', '_owner', [], -1, -999, 'u']

Name: _initialOwner Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _initialOwner_1 Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Phid
_initialOwner_1(address) := ϕ(['_owner_1', '_owner_1', '_owner_1'])
Phi
[i]Type for _initialOwner

Name: _initialOwner Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, Ownable._setOwner(address)(_initialOwner_1)
init
end
[[], [], 'u', '_owner', [], -1, -999, 'u']

Name: _newOwner Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _newOwner_1 Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Phid
Name: _owner, Num: 2
Globalname: _owner
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Phid
_newOwner_1(address) := ϕ(['TMP_580', '_pendingOwner_4', '_initialOwner_1'])
Phi
[i]Type for _newOwner

Name: _newOwner Function: _setOwner
Num: 
Den: 
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
_owner_2(address) := ϕ(['_owner_3', '_owner_0'])
Phi
[i]Type for _owner

Name: _owner Function: _setOwner
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _oldOwner, Num: 1
Globalname: _oldOwner
End popogation
_oldOwner_1(address) := _owner_2(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _oldOwner

Name: _oldOwner Function: _setOwner
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _owner, Num: 3
Globalname: _owner
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
End popogation
_owner_3(address) := _newOwner_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _owner

Name: _owner Function: _setOwner
Num: -1
Den: -1
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: _newOwner_1 Function: _setOwner
Num: 
Den: 
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Phid

Name: _owner Function: _setOwner
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Phid
_newOwner_1(address) := ϕ(['TMP_580', '_pendingOwner_4', '_initialOwner_1'])
Phi
[i]Type for _newOwner

Name: _newOwner Function: _setOwner
Num: 
Den: 
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
_owner_2(address) := ϕ(['_owner_3', '_owner_0'])
Phi
[i]Type for _owner

Name: _owner Function: _setOwner
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _oldOwner, Num: 1
Globalname: _oldOwner
End popogation
_oldOwner_1(address) := _owner_2(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _oldOwner

Name: _oldOwner Function: _setOwner
Num: -1
Den: -1
Address: 1
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
_owner_3(address) := _newOwner_1(address)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _owner

Name: _owner Function: _setOwner
Num: -1
Den: -1
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: _initialOwner_1 Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Phid
_initialOwner_1(address) := ϕ(['_owner_1', '_owner_1', '_owner_1'])
Phi
[i]Type for _initialOwner

Name: _initialOwner Function: constructor
Num: 
Den: 
Address: -999
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, Ownable._setOwner(address)(_initialOwner_1)
init
end
Propogating parameters and globals to SSA variables...
Name: _ticket, Num: 1
Globalname: _ticket
End popogation
TMP_13 = CONVERT _ticket_1 to address
Converting _ticket_1

Name: _ticket_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_13

Name: TMP_13 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_14 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_14

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_15(bool) = TMP_13 != TMP_14
[i]Type for TMP_15

Name: TMP_15 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_16(None) = SOLIDITY_CALL require(bool,string)(TMP_15,DrawCalc/ticket-not-zero)
[i]Type for TMP_16

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeDistributionBuffer, Num: 1
Globalname: _prizeDistributionBuffer
End popogation
TMP_17 = CONVERT _prizeDistributionBuffer_1 to address
Converting _prizeDistributionBuffer_1

Name: _prizeDistributionBuffer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_17

Name: TMP_17 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_18 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_19(bool) = TMP_17 != TMP_18
[i]Type for TMP_19

Name: TMP_19 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,DrawCalc/pdb-not-zero)
[i]Type for TMP_20

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawBuffer, Num: 1
Globalname: _drawBuffer
End popogation
TMP_21 = CONVERT _drawBuffer_1 to address
Converting _drawBuffer_1

Name: _drawBuffer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_21

Name: TMP_21 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_22

Name: TMP_22 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = TMP_21 != TMP_22
[i]Type for TMP_23

Name: TMP_23 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(None) = SOLIDITY_CALL require(bool,string)(TMP_23,DrawCalc/dh-not-zero)
[i]Type for TMP_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _ticket, Num: 1
Globalname: _ticket
Name: ticket, Num: 1
Globalname: ticket
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
ticket_1(ITicket) := _ticket_1(ITicket)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for ticket

Name: ticket Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawBuffer, Num: 1
Globalname: _drawBuffer
Name: drawBuffer, Num: 1
Globalname: drawBuffer
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
drawBuffer_1(IDrawBuffer) := _drawBuffer_1(IDrawBuffer)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for drawBuffer

Name: drawBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeDistributionBuffer, Num: 1
Globalname: _prizeDistributionBuffer
Name: prizeDistributionBuffer, Num: 1
Globalname: prizeDistributionBuffer
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
prizeDistributionBuffer_1(IPrizeDistributionBuffer) := _prizeDistributionBuffer_1(IPrizeDistributionBuffer)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeDistributionBuffer, Num: 1
Globalname: _prizeDistributionBuffer
Name: _drawBuffer, Num: 1
Globalname: _drawBuffer
Name: _ticket, Num: 1
Globalname: _ticket
End popogation


INTERNAL_CALL, Ownable.constructor(address)(_owner_1)
TMP_13 = CONVERT _ticket_1 to address
TMP_14 = CONVERT 0 to address
TMP_15(bool) = TMP_13 != TMP_14
TMP_16(None) = SOLIDITY_CALL require(bool,string)(TMP_15,DrawCalc/ticket-not-zero)
TMP_17 = CONVERT _prizeDistributionBuffer_1 to address
TMP_18 = CONVERT 0 to address
TMP_19(bool) = TMP_17 != TMP_18
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,DrawCalc/pdb-not-zero)
TMP_21 = CONVERT _drawBuffer_1 to address
TMP_22 = CONVERT 0 to address
TMP_23(bool) = TMP_21 != TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool,string)(TMP_23,DrawCalc/dh-not-zero)
ticket_1(ITicket) := _ticket_1(ITicket)
drawBuffer_1(IDrawBuffer) := _drawBuffer_1(IDrawBuffer)
prizeDistributionBuffer_1(IPrizeDistributionBuffer) := _prizeDistributionBuffer_1(IPrizeDistributionBuffer)
Emit Deployed(_ticket_1,_drawBuffer_1,_prizeDistributionBuffer_1)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, Ownable.constructor(address)(_owner_1)
init
end
Propogating parameters and globals to SSA variables...
Name: _ticket, Num: 1
Globalname: _ticket
End popogation
TMP_13 = CONVERT _ticket_1 to address
Converting _ticket_1

Name: _ticket_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_13

Name: TMP_13 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_14 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_14

Name: TMP_14 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_15(bool) = TMP_13 != TMP_14
[i]Type for TMP_15

Name: TMP_15 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_16(None) = SOLIDITY_CALL require(bool,string)(TMP_15,DrawCalc/ticket-not-zero)
[i]Type for TMP_16

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeDistributionBuffer, Num: 1
Globalname: _prizeDistributionBuffer
End popogation
TMP_17 = CONVERT _prizeDistributionBuffer_1 to address
Converting _prizeDistributionBuffer_1

Name: _prizeDistributionBuffer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_17

Name: TMP_17 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_18 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_19(bool) = TMP_17 != TMP_18
[i]Type for TMP_19

Name: TMP_19 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20(None) = SOLIDITY_CALL require(bool,string)(TMP_19,DrawCalc/pdb-not-zero)
[i]Type for TMP_20

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawBuffer, Num: 1
Globalname: _drawBuffer
End popogation
TMP_21 = CONVERT _drawBuffer_1 to address
Converting _drawBuffer_1

Name: _drawBuffer_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_21

Name: TMP_21 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_22

Name: TMP_22 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(bool) = TMP_21 != TMP_22
[i]Type for TMP_23

Name: TMP_23 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24(None) = SOLIDITY_CALL require(bool,string)(TMP_23,DrawCalc/dh-not-zero)
[i]Type for TMP_24

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _ticket, Num: 1
Globalname: _ticket
End popogation
ticket_1(ITicket) := _ticket_1(ITicket)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for ticket

Name: ticket Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawBuffer, Num: 1
Globalname: _drawBuffer
End popogation
drawBuffer_1(IDrawBuffer) := _drawBuffer_1(IDrawBuffer)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for drawBuffer

Name: drawBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeDistributionBuffer, Num: 1
Globalname: _prizeDistributionBuffer
End popogation
prizeDistributionBuffer_1(IPrizeDistributionBuffer) := _prizeDistributionBuffer_1(IPrizeDistributionBuffer)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeDistributionBuffer, Num: 1
Globalname: _prizeDistributionBuffer
Name: _drawBuffer, Num: 1
Globalname: _drawBuffer
Name: _ticket, Num: 1
Globalname: _ticket
End popogation



calculate
Finding type for _user(address ... )
prev address? u
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
Finding type for _drawIds(uint32[] ... )
Finding type for _pickIndicesForDraws(bytes ... )
Param: 0
    num: []
    den: []
    norm: u
    link: _user
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: None
    fields: []
    fintype: -1


drawBuffer_2(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
prizeDistributionBuffer_2(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
TMP_27(uint64[][]) = SOLIDITY_CALL abi.decode()(_pickIndicesForDraws_1,uint64[][])
pickIndices_1(uint64[][]) := TMP_27(uint64[][])
REF_1 -> LENGTH pickIndices_1
REF_2 -> LENGTH _drawIds_1 (-> [])
TMP_28(bool) = REF_1 == REF_2
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,DrawCalc/invalid-pick-indices-length)
TMP_30(IDrawBeacon.Draw[]) = HIGH_LEVEL_CALL, dest:drawBuffer_2(IDrawBuffer), function:getDraws, arguments:['_drawIds_1 (-> [])']  
drawBuffer_3(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_2', 'drawBuffer_3', 'drawBuffer_1'])
prizeDistributionBuffer_3(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_2', 'prizeDistributionBuffer_8'])
draws_1(IDrawBeacon.Draw[]) := TMP_30(IDrawBeacon.Draw[])
TMP_31(IPrizeDistributionBuffer.PrizeDistribution[]) = HIGH_LEVEL_CALL, dest:prizeDistributionBuffer_3(IPrizeDistributionBuffer), function:getPrizeDistributions, arguments:['_drawIds_1 (-> [])']  
prizeDistributionBuffer_4(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_3', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_8'])
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := TMP_31(IPrizeDistributionBuffer.PrizeDistribution[])
TMP_32(uint256[]) = INTERNAL_CALL, DrawCalculator._getNormalizedBalancesAt(address,IDrawBeacon.Draw[],IPrizeDistributionBuffer.PrizeDistribution[])(_user_1,draws_1,_prizeDistributions_1)
userBalances_1(uint256[]) := TMP_32(uint256[])
TMP_33(bytes) = SOLIDITY_CALL abi.encodePacked()(_user_1)
TMP_34(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_33)
_userRandomNumber_1(bytes32) := TMP_34(bytes32)
TUPLE_0(uint256[],bytes) = INTERNAL_CALL, DrawCalculator._calculatePrizesAwardable(uint256[],bytes32,IDrawBeacon.Draw[],uint64[][],IPrizeDistributionBuffer.PrizeDistribution[])(userBalances_1,_userRandomNumber_1,draws_1,pickIndices_1,_prizeDistributions_1)
RETURN TUPLE_0


Propogating parameters and globals to SSA variables...
End popogation
Name: drawBuffer, Num: 2
Globalname: drawBuffer
global...

Name: drawBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: prizeDistributionBuffer, Num: 2
Globalname: prizeDistributionBuffer
global...

Name: prizeDistributionBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
drawBuffer_2(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
Phi
[i]Type for drawBuffer

Name: drawBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_2(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _pickIndicesForDraws, Num: 1
Globalname: _pickIndicesForDraws
Name: pickIndices, Num: 1
Globalname: pickIndices
End popogation
TMP_27(uint64[][]) = SOLIDITY_CALL abi.decode()(_pickIndicesForDraws_1,uint64[][])
[i]Type for TMP_27

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pickIndices_1(uint64[][]) := TMP_27(uint64[][])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for pickIndices

Name: pickIndices Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pickIndices, Num: 1
Globalname: pickIndices
Name: _drawIds, Num: 1 (-> [])
Globalname: _drawIds
End popogation
REF_1 -> LENGTH pickIndices_1
[i]Type for REF_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_2 -> LENGTH _drawIds_1 (-> [])
[i]Type for REF_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_28(bool) = REF_1 == REF_2
[i]Type for TMP_28

Name: TMP_28 Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,DrawCalc/invalid-pick-indices-length)
[i]Type for TMP_29

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawIds, Num: 1 (-> [])
Globalname: _drawIds
Name: draws, Num: 1
Globalname: draws
End popogation
Name: drawBuffer, Num: 3
Globalname: drawBuffer
global...

Name: drawBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: prizeDistributionBuffer, Num: 3
Globalname: prizeDistributionBuffer
global...

Name: prizeDistributionBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_30(IDrawBeacon.Draw[]) = HIGH_LEVEL_CALL, dest:drawBuffer_2(IDrawBuffer), function:getDraws, arguments:['_drawIds_1 (-> [])']  
High Call: getDraws
Running querryfc
Written func info: DrawBuffer, getDraws
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
calculate
TMP_30
winningRandomNumber
OUT KEY: calculate_TMP_30_winningRandomNumber
calculate
TMP_30
drawId
OUT KEY: calculate_TMP_30_drawId
calculate
TMP_30
timestamp
OUT KEY: calculate_TMP_30_timestamp
calculate
TMP_30
beaconPeriodStartedAt
OUT KEY: calculate_TMP_30_beaconPeriodStartedAt
calculate
TMP_30
beaconPeriodSeconds
OUT KEY: calculate_TMP_30_beaconPeriodSeconds
[i]Type for TMP_30

Name: TMP_30 Function: calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
drawBuffer_3(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_2', 'drawBuffer_3', 'drawBuffer_1'])
Phi
[i]Type for drawBuffer

Name: drawBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_3(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_2', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
draws_1(IDrawBeacon.Draw[]) := TMP_30(IDrawBeacon.Draw[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for draws

Name: draws Function: calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawIds, Num: 1 (-> [])
Globalname: _drawIds
Name: _prizeDistributions, Num: 1
Globalname: _prizeDistributions
End popogation
Name: prizeDistributionBuffer, Num: 4
Globalname: prizeDistributionBuffer
global...

Name: prizeDistributionBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_31(IPrizeDistributionBuffer.PrizeDistribution[]) = HIGH_LEVEL_CALL, dest:prizeDistributionBuffer_3(IPrizeDistributionBuffer), function:getPrizeDistributions, arguments:['_drawIds_1 (-> [])']  
High Call: getPrizeDistributions
Running querryfc
Written func info: PrizeDistributionBuffer, getPrizeDistributions
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
calculate
TMP_31
bitRangeSize
OUT KEY: calculate_TMP_31_bitRangeSize
calculate
TMP_31
matchCardinality
OUT KEY: calculate_TMP_31_matchCardinality
calculate
TMP_31
startTimestampOffset
OUT KEY: calculate_TMP_31_startTimestampOffset
calculate
TMP_31
endTimestampOffset
OUT KEY: calculate_TMP_31_endTimestampOffset
calculate
TMP_31
maxPicksPerUser
OUT KEY: calculate_TMP_31_maxPicksPerUser
calculate
TMP_31
numberOfPicks
OUT KEY: calculate_TMP_31_numberOfPicks
calculate
TMP_31
tiers
OUT KEY: calculate_TMP_31_tiers
calculate
TMP_31
prize
OUT KEY: calculate_TMP_31_prize
[i]Type for TMP_31

Name: TMP_31 Function: calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_4(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_3', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := TMP_31(IPrizeDistributionBuffer.PrizeDistribution[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: userBalances, Num: 1
Globalname: userBalances
End popogation
TMP_32(uint256[]) = INTERNAL_CALL, DrawCalculator._getNormalizedBalancesAt(address,IDrawBeacon.Draw[],IPrizeDistributionBuffer.PrizeDistribution[])(_user_1,draws_1,_prizeDistributions_1)
init
end
init
end
init
end
[[], [], 'u', '_user', [], -1, -998, 'u']

Name: _user Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: _draws Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: _prizeDistributions Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _user_1 Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
Phid

Name: _draws_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistributions_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: ticket, Num: 2
Globalname: ticket
global...

Name: ticket Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_user_1(address) := ϕ(['_user_1', '_user_1'])
Phi
[i]Type for _user

Name: _user Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: -998
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
XXXX
_draws_1(IDrawBeacon.Draw[]) := ϕ(['draws_1', '_draws_1'])
Phi
[i]Type for _draws

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := ϕ(['_prizeDistributions_1', '_prizeDistributions_1'])
Phi
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
ticket_2(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_0'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
End popogation
REF_21 -> LENGTH _draws_1
[i]Type for REF_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_50 = new uint64[](REF_21)
[i]Type for TMP_50

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithStartCutoffTimes_1(uint64[]) := TMP_50(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
End popogation
REF_22 -> LENGTH _draws_1
[i]Type for REF_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_52 = new uint64[](REF_22)
[i]Type for TMP_52

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithEndCutoffTimes_1(uint64[]) := TMP_52(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
End popogation
i_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
Name: i, Num: 2
Globalname: i
End popogation
Name: i, Num: 2
Globalname: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_2(uint32) := ϕ(['i_1', 'i_3'])
Phi
init
end
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
REF_23 -> LENGTH _draws_1
[i]Type for REF_23

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_53(bool) = i_2 < REF_23
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_53

Name: TMP_53 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 2
Globalname: _timestampsWithStartCutoffTimes
End popogation
Name: _timestampsWithStartCutoffTimes, Num: 2
Globalname: _timestampsWithStartCutoffTimes

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_24(uint64) -> _timestampsWithStartCutoffTimes_1[i_2]
INDEX
[i]Type for REF_24

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_25(IDrawBeacon.Draw) -> _draws_1[i_2]
INDEX
[i]Type for REF_25

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_26(uint64) -> REF_25.timestamp
MEMBER
init
end
init
end
OUT KEY: _getNormalizedBalancesAt__draws_timestamp
OUT KEY: _getNormalizedBalancesAt__timestamp
No field found
[i]Type for REF_26

Name: _draws.timestamp Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_25, Field: timestamp
init
end
Finance type key: (-1, -1)
XXXX
REF_27(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[i_2]
INDEX
[i]Type for REF_27

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_28(uint32) -> REF_27.startTimestampOffset
MEMBER
init
end
init
end
OUT KEY: _getNormalizedBalancesAt__prizeDistributions_startTimestampOffset
OUT KEY: _getNormalizedBalancesAt__startTimestampOffset
No field found
[i]Type for REF_28

Name: _prizeDistributions.startTimestampOffset Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_27, Field: startTimestampOffset
init
end
Finance type key: (-1, -1)
XXXX
TMP_54(uint64) = REF_26 - REF_28
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_54

Name: TMP_54 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithStartCutoffTimes_2(uint64[]) := ϕ(['_timestampsWithStartCutoffTimes_1'])
Phi
init
end
[i]Type for _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24 (->_timestampsWithStartCutoffTimes_2) := TMP_54(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_24

Name: REF_24 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _timestampsWithEndCutoffTimes, Num: 2
Globalname: _timestampsWithEndCutoffTimes
End popogation
Name: _timestampsWithEndCutoffTimes, Num: 2
Globalname: _timestampsWithEndCutoffTimes

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_29(uint64) -> _timestampsWithEndCutoffTimes_1[i_2]
INDEX
[i]Type for REF_29

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_30(IDrawBeacon.Draw) -> _draws_1[i_2]
INDEX
[i]Type for REF_30

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
Root: None, Field: None
XXXX
REF_31(uint64) -> REF_30.timestamp
MEMBER
init
end
init
end
[i]Type for REF_31

Name: _draws.timestamp Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_30, Field: timestamp
init
end
Finance type key: (-1, -1)
XXXX
REF_32(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[i_2]
INDEX
[i]Type for REF_32

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset
Finance Type: undef
Root: None, Field: None
XXXX
REF_33(uint32) -> REF_32.endTimestampOffset
MEMBER
init
end
init
end
OUT KEY: _getNormalizedBalancesAt__prizeDistributions_endTimestampOffset
OUT KEY: _getNormalizedBalancesAt__endTimestampOffset
No field found
[i]Type for REF_33

Name: _prizeDistributions.endTimestampOffset Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_32, Field: endTimestampOffset
init
end
Finance type key: (-1, -1)
XXXX
TMP_55(uint64) = REF_31 - REF_33
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_55

Name: TMP_55 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithEndCutoffTimes_2(uint64[]) := ϕ(['_timestampsWithEndCutoffTimes_1'])
Phi
init
end
[i]Type for _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_29 (->_timestampsWithEndCutoffTimes_2) := TMP_55(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_29

Name: REF_29 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
Name: balances, Num: 1
Globalname: balances
End popogation
Name: ticket, Num: 3
Globalname: ticket
global...

Name: ticket Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_57(uint256[]) = HIGH_LEVEL_CALL, dest:ticket_2(ITicket), function:getAverageBalancesBetween, arguments:['_user_1', '_timestampsWithStartCutoffTimes_1', '_timestampsWithEndCutoffTimes_1']  
High Call: getAverageBalancesBetween
Running querryfc
Written func info: Ticket, getAverageBalancesBetween
Retvar: ('c', ['global:tokenA'], ['-1'], 6, "'u'", None)
{'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999, 'calculate:_user': -998, 'getNormalizedBalancesForDrawIds:_user': -997}
([-1], [-1], 6, "'u'", None, -1)
[i]Type for TMP_57

Name: TMP_57 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
ticket_3(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_2'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balances_1(uint256[]) := TMP_57(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balances

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
Name: totalSupplies, Num: 1
Globalname: totalSupplies
End popogation
Name: ticket, Num: 4
Globalname: ticket
global...

Name: ticket Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_58(uint256[]) = HIGH_LEVEL_CALL, dest:ticket_3(ITicket), function:getAverageTotalSuppliesBetween, arguments:['_timestampsWithStartCutoffTimes_1', '_timestampsWithEndCutoffTimes_1']  
High Call: getAverageTotalSuppliesBetween
Running querryfc
Written func info: Ticket, getAverageTotalSuppliesBetween
Retvar: ('c', ['global:tokenA'], ['-1'], 6, "'u'", None)
{'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999, 'calculate:_user': -998, 'getNormalizedBalancesForDrawIds:_user': -997}
([-1], [-1], 6, "'u'", None, -1)
[i]Type for TMP_58

Name: TMP_58 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
ticket_4(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_3'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupplies_1(uint256[]) := TMP_58(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for totalSupplies

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 3
Globalname: i
End popogation
TMP_56(uint32) := i_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_56

Name: TMP_56 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
i_3(uint32) = i_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 1
Globalname: normalizedBalances
End popogation
REF_36 -> LENGTH _draws_1
[i]Type for REF_36

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_60 = new uint256[](REF_36)
[i]Type for TMP_60

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
normalizedBalances_1(uint256[]) := TMP_60(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i_scope_0, Num: 1
Globalname: i_scope_0
End popogation
i_scope_0_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i_scope_0, Num: 2
Globalname: i_scope_0
Name: i_scope_0, Num: 2
Globalname: i_scope_0
End popogation
Name: i_scope_0, Num: 2
Globalname: i_scope_0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_scope_0_2(uint256) := ϕ(['i_scope_0_3', 'i_scope_0_1'])
Phi
init
end
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_37 -> LENGTH _draws_1
[i]Type for REF_37

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_61(bool) = i_scope_0_2 < REF_37
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_61

Name: TMP_61 Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i_scope_0, Num: 2
Globalname: i_scope_0
End popogation
REF_38(uint256) -> totalSupplies_1[i_scope_0_2]
INDEX
[i]Type for REF_38

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_62(bool) = REF_38 > 0
init
end
init
end
lnorm: 6 rnorm: 0
[i]Type for TMP_62

Name: TMP_62 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(None) = SOLIDITY_CALL require(bool,string)(TMP_62,DrawCalc/total-supply-zero)
[i]Type for TMP_63

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i_scope_0, Num: 2
Globalname: i_scope_0
Name: normalizedBalances, Num: 2
Globalname: normalizedBalances
End popogation
Name: normalizedBalances, Num: 2
Globalname: normalizedBalances

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_39(uint256) -> normalizedBalances_1[i_scope_0_2]
INDEX
[i]Type for REF_39

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_40(uint256) -> balances_1[i_scope_0_2]
INDEX
[i]Type for REF_40

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_64(uint256) = REF_40 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 6 rnorm: 18
init
end
[i]Type for TMP_64

Name: TMP_64 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41(uint256) -> totalSupplies_1[i_scope_0_2]
INDEX
[i]Type for REF_41

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_65(uint256) = TMP_64 (c)/ REF_41
init
end
init
end
lnorm: 24 rnorm: 6
init
end
init
end
init
end
lnorm: 24 rnorm: 6
init
end
[i]Type for TMP_65

Name: TMP_65 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
normalizedBalances_2(uint256[]) := ϕ(['normalizedBalances_1'])
Phi
init
end
[i]Type for normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_39 (->normalizedBalances_2) := TMP_65(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_39

Name: REF_39 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: i_scope_0, Num: 2
Globalname: i_scope_0
Name: i_scope_0, Num: 3
Globalname: i_scope_0
End popogation
TMP_66(uint256) := i_scope_0_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_66

Name: TMP_66 Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_scope_0_3(uint256) = i_scope_0_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 1
Globalname: normalizedBalances
End popogation
RETURN normalizedBalances_1
RETURN
init
end

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _user_1 Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: -998
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
Phid

Name: _draws_1 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
Phid

Name: _prizeDistributions_1 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
Phid

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_user_1(address) := ϕ(['_user_1', '_user_1'])
Phi
[i]Type for _user

Name: _user Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: -998
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
XXXX
_draws_1(IDrawBeacon.Draw[]) := ϕ(['draws_1', '_draws_1'])
Phi
[i]Type for _draws

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := ϕ(['_prizeDistributions_1', '_prizeDistributions_1'])
Phi
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
XXXX
ticket_2(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_0'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
End popogation
REF_21 -> LENGTH _draws_1
[i]Type for REF_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_50 = new uint64[](REF_21)
[i]Type for TMP_50

Name: TMP_50 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithStartCutoffTimes_1(uint64[]) := TMP_50(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
End popogation
REF_22 -> LENGTH _draws_1
[i]Type for REF_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_52 = new uint64[](REF_22)
[i]Type for TMP_52

Name: TMP_52 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithEndCutoffTimes_1(uint64[]) := TMP_52(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
End popogation
i_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
Name: i, Num: 2
Globalname: i
End popogation
Name: i, Num: 2
Globalname: i

Name: i Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
i_2(uint32) := ϕ(['i_1', 'i_3'])
Phi
init
end
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
REF_23 -> LENGTH _draws_1
[i]Type for REF_23

Name: REF_23 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_53(bool) = i_2 < REF_23
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_53

Name: TMP_53 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 2
Globalname: _timestampsWithStartCutoffTimes
End popogation
Name: _timestampsWithStartCutoffTimes, Num: 2
Globalname: _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_24(uint64) -> _timestampsWithStartCutoffTimes_1[i_2]
INDEX
[i]Type for REF_24

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_25(IDrawBeacon.Draw) -> _draws_1[i_2]
INDEX
[i]Type for REF_25

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
Root: None, Field: None
XXXX
REF_26(uint64) -> REF_25.timestamp
MEMBER
init
end
init
end
init
end
[i]Type for REF_26

Name: _draws.timestamp Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_25, Field: timestamp
init
end
Finance type key: (-1, -1)
XXXX
REF_27(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[i_2]
INDEX
[i]Type for REF_27

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
Root: None, Field: None
XXXX
REF_28(uint32) -> REF_27.startTimestampOffset
MEMBER
init
end
init
end
init
end
[i]Type for REF_28

Name: _prizeDistributions.startTimestampOffset Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_27, Field: startTimestampOffset
init
end
Finance type key: (-1, -1)
XXXX
TMP_54(uint64) = REF_26 - REF_28
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_54

Name: TMP_54 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithStartCutoffTimes_2(uint64[]) := ϕ(['_timestampsWithStartCutoffTimes_1'])
Phi
init
end
[i]Type for _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24 (->_timestampsWithStartCutoffTimes_2) := TMP_54(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_24

Name: REF_24 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _timestampsWithEndCutoffTimes, Num: 2
Globalname: _timestampsWithEndCutoffTimes
End popogation
Name: _timestampsWithEndCutoffTimes, Num: 2
Globalname: _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_29(uint64) -> _timestampsWithEndCutoffTimes_1[i_2]
INDEX
[i]Type for REF_29

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_30(IDrawBeacon.Draw) -> _draws_1[i_2]
INDEX
[i]Type for REF_30

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
Root: None, Field: None
XXXX
REF_31(uint64) -> REF_30.timestamp
MEMBER
init
end
init
end
init
end
[i]Type for REF_31

Name: _draws.timestamp Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_30, Field: timestamp
init
end
Finance type key: (-1, -1)
XXXX
REF_32(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[i_2]
INDEX
[i]Type for REF_32

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
Root: None, Field: None
XXXX
REF_33(uint32) -> REF_32.endTimestampOffset
MEMBER
init
end
init
end
init
end
[i]Type for REF_33

Name: _prizeDistributions.endTimestampOffset Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_32, Field: endTimestampOffset
init
end
Finance type key: (-1, -1)
XXXX
TMP_55(uint64) = REF_31 - REF_33
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_55

Name: TMP_55 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithEndCutoffTimes_2(uint64[]) := ϕ(['_timestampsWithEndCutoffTimes_1'])
Phi
init
end
[i]Type for _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_29 (->_timestampsWithEndCutoffTimes_2) := TMP_55(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_29

Name: REF_29 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
Name: balances, Num: 1
Globalname: balances
End popogation

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_57(uint256[]) = HIGH_LEVEL_CALL, dest:ticket_2(ITicket), function:getAverageBalancesBetween, arguments:['_user_1', '_timestampsWithStartCutoffTimes_1', '_timestampsWithEndCutoffTimes_1']  
High Call: getAverageBalancesBetween
Running querryfc
Written func info: Ticket, getAverageBalancesBetween
Retvar: ('c', ['global:tokenA'], ['-1'], 6, "'u'", None)
{'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999, 'calculate:_user': -998, 'getNormalizedBalancesForDrawIds:_user': -997}
([-1], [-1], 6, "'u'", None, -1)
[i]Type for TMP_57

Name: TMP_57 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
ticket_3(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_2'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balances_1(uint256[]) := TMP_57(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balances

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
Name: totalSupplies, Num: 1
Globalname: totalSupplies
End popogation

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_58(uint256[]) = HIGH_LEVEL_CALL, dest:ticket_3(ITicket), function:getAverageTotalSuppliesBetween, arguments:['_timestampsWithStartCutoffTimes_1', '_timestampsWithEndCutoffTimes_1']  
High Call: getAverageTotalSuppliesBetween
Running querryfc
Written func info: Ticket, getAverageTotalSuppliesBetween
Retvar: ('c', ['global:tokenA'], ['-1'], 6, "'u'", None)
{'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999, 'calculate:_user': -998, 'getNormalizedBalancesForDrawIds:_user': -997}
([-1], [-1], 6, "'u'", None, -1)
[i]Type for TMP_58

Name: TMP_58 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
ticket_4(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_3'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupplies_1(uint256[]) := TMP_58(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for totalSupplies

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 3
Globalname: i
End popogation
TMP_56(uint32) := i_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_56

Name: TMP_56 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
i_3(uint32) = i_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 1
Globalname: normalizedBalances
End popogation
REF_36 -> LENGTH _draws_1
[i]Type for REF_36

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_60 = new uint256[](REF_36)
[i]Type for TMP_60

Name: TMP_60 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
normalizedBalances_1(uint256[]) := TMP_60(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i_scope_0, Num: 1
Globalname: i_scope_0
End popogation
i_scope_0_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i_scope_0, Num: 2
Globalname: i_scope_0
Name: i_scope_0, Num: 2
Globalname: i_scope_0
End popogation
Name: i_scope_0, Num: 2
Globalname: i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_scope_0_2(uint256) := ϕ(['i_scope_0_3', 'i_scope_0_1'])
Phi
init
end
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_37 -> LENGTH _draws_1
[i]Type for REF_37

Name: REF_37 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_61(bool) = i_scope_0_2 < REF_37
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_61

Name: TMP_61 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_38(uint256) -> totalSupplies_1[i_scope_0_2]
INDEX
[i]Type for REF_38

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_62(bool) = REF_38 > 0
init
end
init
end
lnorm: 6 rnorm: 0
[i]Type for TMP_62

Name: TMP_62 Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(None) = SOLIDITY_CALL require(bool,string)(TMP_62,DrawCalc/total-supply-zero)
[i]Type for TMP_63

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 2
Globalname: normalizedBalances
End popogation
Name: normalizedBalances, Num: 2
Globalname: normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_39(uint256) -> normalizedBalances_1[i_scope_0_2]
INDEX
[i]Type for REF_39

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_40(uint256) -> balances_1[i_scope_0_2]
INDEX
[i]Type for REF_40

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_64(uint256) = REF_40 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 6 rnorm: 18
init
end
[i]Type for TMP_64

Name: TMP_64 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41(uint256) -> totalSupplies_1[i_scope_0_2]
INDEX
[i]Type for REF_41

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_65(uint256) = TMP_64 (c)/ REF_41
init
end
init
end
lnorm: 24 rnorm: 6
init
end
init
end
init
end
lnorm: 24 rnorm: 6
init
end
[i]Type for TMP_65

Name: TMP_65 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
normalizedBalances_2(uint256[]) := ϕ(['normalizedBalances_1'])
Phi
init
end
[i]Type for normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_39 (->normalizedBalances_2) := TMP_65(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_39

Name: REF_39 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: i_scope_0, Num: 3
Globalname: i_scope_0
End popogation
TMP_66(uint256) := i_scope_0_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_66

Name: TMP_66 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_scope_0_3(uint256) = i_scope_0_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 1
Globalname: normalizedBalances
End popogation
RETURN normalizedBalances_1
RETURN
init
end

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _user Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: -998
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
Phid

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
Phid

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
Phid

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_user_1(address) := ϕ(['_user_1', '_user_1'])
Phi
[i]Type for _user

Name: _user Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: -998
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
XXXX
_draws_1(IDrawBeacon.Draw[]) := ϕ(['draws_1', '_draws_1'])
Phi
[i]Type for _draws

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := ϕ(['_prizeDistributions_1', '_prizeDistributions_1'])
Phi
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
XXXX
ticket_2(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_0'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
End popogation
REF_21 -> LENGTH _draws_1
[i]Type for REF_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_50 = new uint64[](REF_21)
[i]Type for TMP_50

Name: TMP_50 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithStartCutoffTimes_1(uint64[]) := TMP_50(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
End popogation
REF_22 -> LENGTH _draws_1
[i]Type for REF_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_52 = new uint64[](REF_22)
[i]Type for TMP_52

Name: TMP_52 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithEndCutoffTimes_1(uint64[]) := TMP_52(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
i_2(uint32) := ϕ(['i_1', 'i_3'])
Phi
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
REF_23 -> LENGTH _draws_1
[i]Type for REF_23

Name: REF_23 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_53(bool) = i_2 < REF_23
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_53

Name: TMP_53 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 2
Globalname: _timestampsWithStartCutoffTimes
End popogation
Name: _timestampsWithStartCutoffTimes, Num: 2
Globalname: _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_24(uint64) -> _timestampsWithStartCutoffTimes_1[i_2]
INDEX
[i]Type for REF_24

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_25(IDrawBeacon.Draw) -> _draws_1[i_2]
INDEX
[i]Type for REF_25

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
Root: None, Field: None
XXXX
REF_26(uint64) -> REF_25.timestamp
MEMBER
init
end
init
end
init
end
[i]Type for REF_26

Name: _draws.timestamp Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_25, Field: timestamp
init
end
Finance type key: (-1, -1)
XXXX
REF_27(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[i_2]
INDEX
[i]Type for REF_27

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
Root: None, Field: None
XXXX
REF_28(uint32) -> REF_27.startTimestampOffset
MEMBER
init
end
init
end
init
end
[i]Type for REF_28

Name: _prizeDistributions.startTimestampOffset Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_27, Field: startTimestampOffset
init
end
Finance type key: (-1, -1)
XXXX
TMP_54(uint64) = REF_26 - REF_28
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_54

Name: TMP_54 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithStartCutoffTimes_2(uint64[]) := ϕ(['_timestampsWithStartCutoffTimes_1'])
Phi
init
end
[i]Type for _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24 (->_timestampsWithStartCutoffTimes_2) := TMP_54(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_24

Name: REF_24 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _timestampsWithEndCutoffTimes, Num: 2
Globalname: _timestampsWithEndCutoffTimes
End popogation
Name: _timestampsWithEndCutoffTimes, Num: 2
Globalname: _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_29(uint64) -> _timestampsWithEndCutoffTimes_1[i_2]
INDEX
[i]Type for REF_29

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_30(IDrawBeacon.Draw) -> _draws_1[i_2]
INDEX
[i]Type for REF_30

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
Root: None, Field: None
XXXX
REF_31(uint64) -> REF_30.timestamp
MEMBER
init
end
init
end
init
end
[i]Type for REF_31

Name: _draws.timestamp Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_30, Field: timestamp
init
end
Finance type key: (-1, -1)
XXXX
REF_32(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[i_2]
INDEX
[i]Type for REF_32

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
Root: None, Field: None
XXXX
REF_33(uint32) -> REF_32.endTimestampOffset
MEMBER
init
end
init
end
init
end
[i]Type for REF_33

Name: _prizeDistributions.endTimestampOffset Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_32, Field: endTimestampOffset
init
end
Finance type key: (-1, -1)
XXXX
TMP_55(uint64) = REF_31 - REF_33
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_55

Name: TMP_55 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithEndCutoffTimes_2(uint64[]) := ϕ(['_timestampsWithEndCutoffTimes_1'])
Phi
init
end
[i]Type for _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_29 (->_timestampsWithEndCutoffTimes_2) := TMP_55(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_29

Name: REF_29 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
End popogation

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_57(uint256[]) = HIGH_LEVEL_CALL, dest:ticket_2(ITicket), function:getAverageBalancesBetween, arguments:['_user_1', '_timestampsWithStartCutoffTimes_1', '_timestampsWithEndCutoffTimes_1']  
High Call: getAverageBalancesBetween
Running querryfc
Written func info: Ticket, getAverageBalancesBetween
Retvar: ('c', ['global:tokenA'], ['-1'], 6, "'u'", None)
{'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999, 'calculate:_user': -998, 'getNormalizedBalancesForDrawIds:_user': -997}
([-1], [-1], 6, "'u'", None, -1)
[i]Type for TMP_57

Name: TMP_57 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
ticket_3(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_2'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balances_1(uint256[]) := TMP_57(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balances

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
End popogation

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_58(uint256[]) = HIGH_LEVEL_CALL, dest:ticket_3(ITicket), function:getAverageTotalSuppliesBetween, arguments:['_timestampsWithStartCutoffTimes_1', '_timestampsWithEndCutoffTimes_1']  
High Call: getAverageTotalSuppliesBetween
Running querryfc
Written func info: Ticket, getAverageTotalSuppliesBetween
Retvar: ('c', ['global:tokenA'], ['-1'], 6, "'u'", None)
{'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999, 'calculate:_user': -998, 'getNormalizedBalancesForDrawIds:_user': -997}
([-1], [-1], 6, "'u'", None, -1)
[i]Type for TMP_58

Name: TMP_58 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
ticket_4(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_3'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupplies_1(uint256[]) := TMP_58(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for totalSupplies

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_56(uint32) := i_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_56

Name: TMP_56 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
i_3(uint32) = i_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 1
Globalname: normalizedBalances
End popogation
REF_36 -> LENGTH _draws_1
[i]Type for REF_36

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_60 = new uint256[](REF_36)
[i]Type for TMP_60

Name: TMP_60 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
normalizedBalances_1(uint256[]) := TMP_60(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_scope_0_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_scope_0_2(uint256) := ϕ(['i_scope_0_3', 'i_scope_0_1'])
Phi
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_37 -> LENGTH _draws_1
[i]Type for REF_37

Name: REF_37 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_61(bool) = i_scope_0_2 < REF_37
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_61

Name: TMP_61 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_38(uint256) -> totalSupplies_1[i_scope_0_2]
INDEX
[i]Type for REF_38

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_62(bool) = REF_38 > 0
init
end
init
end
lnorm: 6 rnorm: 0
[i]Type for TMP_62

Name: TMP_62 Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(None) = SOLIDITY_CALL require(bool,string)(TMP_62,DrawCalc/total-supply-zero)
[i]Type for TMP_63

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 2
Globalname: normalizedBalances
End popogation
Name: normalizedBalances, Num: 2
Globalname: normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_39(uint256) -> normalizedBalances_1[i_scope_0_2]
INDEX
[i]Type for REF_39

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_40(uint256) -> balances_1[i_scope_0_2]
INDEX
[i]Type for REF_40

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_64(uint256) = REF_40 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 6 rnorm: 18
init
end
[i]Type for TMP_64

Name: TMP_64 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41(uint256) -> totalSupplies_1[i_scope_0_2]
INDEX
[i]Type for REF_41

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_65(uint256) = TMP_64 (c)/ REF_41
init
end
init
end
lnorm: 24 rnorm: 6
init
end
init
end
init
end
lnorm: 24 rnorm: 6
init
end
[i]Type for TMP_65

Name: TMP_65 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
normalizedBalances_2(uint256[]) := ϕ(['normalizedBalances_1'])
Phi
init
end
[i]Type for normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_39 (->normalizedBalances_2) := TMP_65(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_39

Name: REF_39 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_66(uint256) := i_scope_0_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_66

Name: TMP_66 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_scope_0_3(uint256) = i_scope_0_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 1
Globalname: normalizedBalances
End popogation
RETURN normalizedBalances_1
RETURN
init
end

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _user Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: -998
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
Phid

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
Phid

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
Phid

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_user_1(address) := ϕ(['_user_1', '_user_1'])
Phi
[i]Type for _user

Name: _user Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: -998
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
XXXX
_draws_1(IDrawBeacon.Draw[]) := ϕ(['draws_1', '_draws_1'])
Phi
[i]Type for _draws

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := ϕ(['_prizeDistributions_1', '_prizeDistributions_1'])
Phi
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
XXXX
ticket_2(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_0'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
End popogation
REF_21 -> LENGTH _draws_1
[i]Type for REF_21

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_50 = new uint64[](REF_21)
[i]Type for TMP_50

Name: TMP_50 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithStartCutoffTimes_1(uint64[]) := TMP_50(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
End popogation
REF_22 -> LENGTH _draws_1
[i]Type for REF_22

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_52 = new uint64[](REF_22)
[i]Type for TMP_52

Name: TMP_52 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithEndCutoffTimes_1(uint64[]) := TMP_52(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
i_2(uint32) := ϕ(['i_1', 'i_3'])
Phi
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
REF_23 -> LENGTH _draws_1
[i]Type for REF_23

Name: REF_23 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_53(bool) = i_2 < REF_23
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_53

Name: TMP_53 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 2
Globalname: _timestampsWithStartCutoffTimes
End popogation
Name: _timestampsWithStartCutoffTimes, Num: 2
Globalname: _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_24(uint64) -> _timestampsWithStartCutoffTimes_1[i_2]
INDEX
[i]Type for REF_24

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_25(IDrawBeacon.Draw) -> _draws_1[i_2]
INDEX
[i]Type for REF_25

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
Root: None, Field: None
XXXX
REF_26(uint64) -> REF_25.timestamp
MEMBER
init
end
init
end
init
end
[i]Type for REF_26

Name: _draws.timestamp Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_25, Field: timestamp
init
end
Finance type key: (-1, -1)
XXXX
REF_27(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[i_2]
INDEX
[i]Type for REF_27

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
Root: None, Field: None
XXXX
REF_28(uint32) -> REF_27.startTimestampOffset
MEMBER
init
end
init
end
init
end
[i]Type for REF_28

Name: _prizeDistributions.startTimestampOffset Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_27, Field: startTimestampOffset
init
end
Finance type key: (-1, -1)
XXXX
TMP_54(uint64) = REF_26 - REF_28
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_54

Name: TMP_54 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithStartCutoffTimes_2(uint64[]) := ϕ(['_timestampsWithStartCutoffTimes_1'])
Phi
init
end
[i]Type for _timestampsWithStartCutoffTimes

Name: _timestampsWithStartCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24 (->_timestampsWithStartCutoffTimes_2) := TMP_54(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_24

Name: REF_24 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _timestampsWithEndCutoffTimes, Num: 2
Globalname: _timestampsWithEndCutoffTimes
End popogation
Name: _timestampsWithEndCutoffTimes, Num: 2
Globalname: _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_29(uint64) -> _timestampsWithEndCutoffTimes_1[i_2]
INDEX
[i]Type for REF_29

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_30(IDrawBeacon.Draw) -> _draws_1[i_2]
INDEX
[i]Type for REF_30

Name: _draws Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: timestamp
Finance Type: undef
Root: None, Field: None
XXXX
REF_31(uint64) -> REF_30.timestamp
MEMBER
init
end
init
end
init
end
[i]Type for REF_31

Name: _draws.timestamp Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_30, Field: timestamp
init
end
Finance type key: (-1, -1)
XXXX
REF_32(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[i_2]
INDEX
[i]Type for REF_32

Name: _prizeDistributions Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: startTimestampOffset, endTimestampOffset
Finance Type: undef
Root: None, Field: None
XXXX
REF_33(uint32) -> REF_32.endTimestampOffset
MEMBER
init
end
init
end
init
end
[i]Type for REF_33

Name: _prizeDistributions.endTimestampOffset Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_32, Field: endTimestampOffset
init
end
Finance type key: (-1, -1)
XXXX
TMP_55(uint64) = REF_31 - REF_33
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_55

Name: TMP_55 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_timestampsWithEndCutoffTimes_2(uint64[]) := ϕ(['_timestampsWithEndCutoffTimes_1'])
Phi
init
end
[i]Type for _timestampsWithEndCutoffTimes

Name: _timestampsWithEndCutoffTimes Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_29 (->_timestampsWithEndCutoffTimes_2) := TMP_55(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_29

Name: REF_29 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
End popogation

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_57(uint256[]) = HIGH_LEVEL_CALL, dest:ticket_2(ITicket), function:getAverageBalancesBetween, arguments:['_user_1', '_timestampsWithStartCutoffTimes_1', '_timestampsWithEndCutoffTimes_1']  
High Call: getAverageBalancesBetween
Running querryfc
Written func info: Ticket, getAverageBalancesBetween
Retvar: ('c', ['global:tokenA'], ['-1'], 6, "'u'", None)
{'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999, 'calculate:_user': -998, 'getNormalizedBalancesForDrawIds:_user': -997}
([-1], [-1], 6, "'u'", None, -1)
[i]Type for TMP_57

Name: TMP_57 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
ticket_3(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_2'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balances_1(uint256[]) := TMP_57(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for balances

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _timestampsWithStartCutoffTimes, Num: 1
Globalname: _timestampsWithStartCutoffTimes
Name: _timestampsWithEndCutoffTimes, Num: 1
Globalname: _timestampsWithEndCutoffTimes
End popogation

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_58(uint256[]) = HIGH_LEVEL_CALL, dest:ticket_3(ITicket), function:getAverageTotalSuppliesBetween, arguments:['_timestampsWithStartCutoffTimes_1', '_timestampsWithEndCutoffTimes_1']  
High Call: getAverageTotalSuppliesBetween
Running querryfc
Written func info: Ticket, getAverageTotalSuppliesBetween
Retvar: ('c', ['global:tokenA'], ['-1'], 6, "'u'", None)
{'global:_owner': 1, 'global:_pendingOwner': 2, 'constructor:_owner': -999, 'calculate:_user': -998, 'getNormalizedBalancesForDrawIds:_user': -997}
([-1], [-1], 6, "'u'", None, -1)
[i]Type for TMP_58

Name: TMP_58 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
ticket_4(ITicket) := ϕ(['ticket_4', 'ticket_1', 'ticket_3'])
Phi
[i]Type for ticket

Name: ticket Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalSupplies_1(uint256[]) := TMP_58(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for totalSupplies

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_56(uint32) := i_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_56

Name: TMP_56 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
i_3(uint32) = i_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i

Name: i Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 1
Globalname: normalizedBalances
End popogation
REF_36 -> LENGTH _draws_1
[i]Type for REF_36

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_60 = new uint256[](REF_36)
[i]Type for TMP_60

Name: TMP_60 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
normalizedBalances_1(uint256[]) := TMP_60(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_scope_0_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_scope_0_2(uint256) := ϕ(['i_scope_0_3', 'i_scope_0_1'])
Phi
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_37 -> LENGTH _draws_1
[i]Type for REF_37

Name: REF_37 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_61(bool) = i_scope_0_2 < REF_37
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_61

Name: TMP_61 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_38(uint256) -> totalSupplies_1[i_scope_0_2]
INDEX
[i]Type for REF_38

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_62(bool) = REF_38 > 0
init
end
init
end
lnorm: 6 rnorm: 0
[i]Type for TMP_62

Name: TMP_62 Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(None) = SOLIDITY_CALL require(bool,string)(TMP_62,DrawCalc/total-supply-zero)
[i]Type for TMP_63

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 2
Globalname: normalizedBalances
End popogation
Name: normalizedBalances, Num: 2
Globalname: normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_39(uint256) -> normalizedBalances_1[i_scope_0_2]
INDEX
[i]Type for REF_39

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_40(uint256) -> balances_1[i_scope_0_2]
INDEX
[i]Type for REF_40

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_64(uint256) = REF_40 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: balances Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 6 rnorm: 18
init
end
[i]Type for TMP_64

Name: TMP_64 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_41(uint256) -> totalSupplies_1[i_scope_0_2]
INDEX
[i]Type for REF_41

Name: totalSupplies Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: None
Norm: 6
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_65(uint256) = TMP_64 (c)/ REF_41
init
end
init
end
lnorm: 24 rnorm: 6
init
end
init
end
init
end
lnorm: 24 rnorm: 6
init
end
[i]Type for TMP_65

Name: TMP_65 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
normalizedBalances_2(uint256[]) := ϕ(['normalizedBalances_1'])
Phi
init
end
[i]Type for normalizedBalances

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_39 (->normalizedBalances_2) := TMP_65(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_39

Name: REF_39 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_66(uint256) := i_scope_0_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_66

Name: TMP_66 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
i_scope_0_3(uint256) = i_scope_0_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i_scope_0

Name: i_scope_0 Function: _getNormalizedBalancesAt
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: normalizedBalances, Num: 1
Globalname: normalizedBalances
End popogation
RETURN normalizedBalances_1
RETURN
init
end

Name: normalizedBalances Function: _getNormalizedBalancesAt
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_32

Name: TMP_32 Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userBalances_1(uint256[]) := TMP_32(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for userBalances

Name: userBalances Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
End popogation
TMP_33(bytes) = SOLIDITY_CALL abi.encodePacked()(_user_1)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_34(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_33)
[i]Type for TMP_34

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := TMP_34(bytes32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pickIndices, Num: 1
Globalname: pickIndices
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: userBalances, Num: 1
Globalname: userBalances
End popogation
TUPLE_0(uint256[],bytes) = INTERNAL_CALL, DrawCalculator._calculatePrizesAwardable(uint256[],bytes32,IDrawBeacon.Draw[],uint64[][],IPrizeDistributionBuffer.PrizeDistribution[])(userBalances_1,_userRandomNumber_1,draws_1,pickIndices_1,_prizeDistributions_1)
init
end
init
end
init
end
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _normalizedUserBalances Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _userRandomNumber Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: _draws Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _pickIndicesForDraws Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: _prizeDistributions Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances

Name: _normalizedUserBalances_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _draws_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _pickIndicesForDraws, Num: 1
Globalname: _pickIndicesForDraws

Name: _pickIndicesForDraws_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistributions_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_normalizedUserBalances_1(uint256[]) := ϕ(['userBalances_1'])
Phi
init
end
[i]Type for _normalizedUserBalances

Name: _normalizedUserBalances Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_draws_1(IDrawBeacon.Draw[]) := ϕ(['draws_1'])
Phi
[i]Type for _draws

Name: _draws Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_pickIndicesForDraws_1(uint64[][]) := ϕ(['pickIndices_1'])
Phi
init
end
[i]Type for _pickIndicesForDraws

Name: _pickIndicesForDraws Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := ϕ(['_prizeDistributions_1'])
Phi
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
End popogation
REF_8 -> LENGTH _normalizedUserBalances_1
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_39 = new uint256[](REF_8)
[i]Type for TMP_39

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizesAwardable_1(uint256[]) := TMP_39(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizesAwardable

Name: _prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_9 -> LENGTH _normalizedUserBalances_1
[i]Type for REF_9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_41 = new uint256[][](REF_9)
[i]Type for TMP_41

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[][]) := TMP_41(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: drawIndex, Num: 1
Globalname: drawIndex
End popogation
drawIndex_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: drawIndex, Num: 2
Globalname: drawIndex
Name: drawIndex, Num: 2
Globalname: drawIndex
End popogation
Name: drawIndex, Num: 2
Globalname: drawIndex

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
drawIndex_2(uint32) := ϕ(['drawIndex_3', 'drawIndex_1'])
Phi
init
end
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_10 -> LENGTH _draws_1
[i]Type for REF_10

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_42(bool) = drawIndex_2 < REF_10
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_42

Name: TMP_42 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
Name: drawIndex, Num: 2
Globalname: drawIndex
Name: totalUserPicks, Num: 1
Globalname: totalUserPicks
End popogation
REF_11(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[drawIndex_2]
INDEX
[i]Type for REF_11

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_12(uint256) -> _normalizedUserBalances_1[drawIndex_2]
INDEX
[i]Type for REF_12

Name: _normalizedUserBalances_1 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_43(uint64) = INTERNAL_CALL, DrawCalculator._calculateNumberOfUserPicks(IPrizeDistributionBuffer.PrizeDistribution,uint256)(REF_11,REF_12)
init
end
init
end
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: _prizeDistribution Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _normalizedUserBalance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _prizeDistribution_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _normalizedUserBalance_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['REF_11'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_normalizedUserBalance_1(uint256) := ϕ(['REF_12'])
Phi
[i]Type for _normalizedUserBalance

Name: _normalizedUserBalance Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_20(uint136) -> _prizeDistribution_1.numberOfPicks
MEMBER
init
end
init
end
OUT KEY: _calculateNumberOfUserPicks__prizeDistribution_numberOfPicks
OUT KEY: _calculateNumberOfUserPicks__numberOfPicks
No field found
[i]Type for REF_20

Name: _prizeDistribution.numberOfPicks Function: _calculateNumberOfUserPicks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: numberOfPicks
init
end
Finance type key: (-1, -1)
XXXX
TMP_46(uint256) = _normalizedUserBalance_1 (c)* REF_20
testing mul...
init
end
init
end

Name: _normalizedUserBalance Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _prizeDistribution.numberOfPicks Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_46

Name: TMP_46 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = TMP_46 (c)/ 1000000000000000000
init
end
init
end
lnorm: u rnorm: 18
init
end
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_47

Name: TMP_47 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_48 = CONVERT TMP_47 to uint64
Converting TMP_47

Name: TMP_47 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_48

Name: TMP_48 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_48
RETURN
init
end

Name: TMP_48 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _prizeDistribution_1 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: numberOfPicks
Finance Type: undef
Phid

Name: _normalizedUserBalance_1 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['REF_11'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: numberOfPicks
Finance Type: undef
XXXX
_normalizedUserBalance_1(uint256) := ϕ(['REF_12'])
Phi
[i]Type for _normalizedUserBalance

Name: _normalizedUserBalance Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_20(uint136) -> _prizeDistribution_1.numberOfPicks
MEMBER
init
end
init
end
init
end
[i]Type for REF_20

Name: _prizeDistribution.numberOfPicks Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: numberOfPicks
init
end
Finance type key: (-1, -1)
XXXX
TMP_46(uint256) = _normalizedUserBalance_1 (c)* REF_20
testing mul...
init
end
init
end

Name: _normalizedUserBalance Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _prizeDistribution.numberOfPicks Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_46

Name: TMP_46 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = TMP_46 (c)/ 1000000000000000000
init
end
init
end
lnorm: u rnorm: 18
init
end
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_47

Name: TMP_47 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_48 = CONVERT TMP_47 to uint64
Converting TMP_47

Name: TMP_47 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_48

Name: TMP_48 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_48
RETURN
init
end

Name: TMP_48 Function: _calculateNumberOfUserPicks
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_43

Name: TMP_43 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUserPicks_1(uint64) := TMP_43(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for totalUserPicks

Name: totalUserPicks Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _pickIndicesForDraws, Num: 1
Globalname: _pickIndicesForDraws
Name: drawIndex, Num: 2
Globalname: drawIndex
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
End popogation
REF_13(uint256) -> _prizesAwardable_1[drawIndex_2]
INDEX
[i]Type for REF_13

Name: _prizesAwardable Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_14(uint256[]) -> _prizeCounts_1[drawIndex_2]
INDEX
[i]Type for REF_14

Name: _prizeCounts Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_15(IDrawBeacon.Draw) -> _draws_1[drawIndex_2]
INDEX
[i]Type for REF_15

Name: _draws Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_16(uint256) -> REF_15.winningRandomNumber
MEMBER
init
end
init
end
OUT KEY: _calculatePrizesAwardable__draws_winningRandomNumber
OUT KEY: _calculatePrizesAwardable__winningRandomNumber
No field found
[i]Type for REF_16

Name: _draws.winningRandomNumber Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_15, Field: winningRandomNumber
init
end
Finance type key: (-1, -1)
XXXX
REF_17(uint64[]) -> _pickIndicesForDraws_1[drawIndex_2]
INDEX
[i]Type for REF_17

Name: _pickIndicesForDraws_1 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_18(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[drawIndex_2]
INDEX
[i]Type for REF_18

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TUPLE_1(uint256,uint256[]) = INTERNAL_CALL, DrawCalculator._calculate(uint256,uint256,bytes32,uint64[],IPrizeDistributionBuffer.PrizeDistribution)(REF_16,totalUserPicks_1,_userRandomNumber_1,REF_17,REF_18)
init
end
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _winningRandomNumber Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], -18, None, [], -1, 'u', 'u']

Name: _totalUserPicks Function: None
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _userRandomNumber Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _picks Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: _prizeDistribution Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _winningRandomNumber_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _totalUserPicks_1 Function: None
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _picks_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistribution_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: TIERS_LENGTH, Num: 1
Globalname: TIERS_LENGTH
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_winningRandomNumber_1(uint256) := ϕ(['REF_16'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalUserPicks_1(uint256) := ϕ(['totalUserPicks_1'])
Phi
[i]Type for _totalUserPicks

Name: _totalUserPicks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_picks_1(uint64[]) := ϕ(['REF_17'])
Phi
[i]Type for _picks

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['REF_18'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TIERS_LENGTH_1(uint8) := ϕ(['TIERS_LENGTH_0', 'TIERS_LENGTH_3', 'TIERS_LENGTH_2'])
Phi
[i]Type for TIERS_LENGTH

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
TMP_67(uint256[]) = INTERNAL_CALL, DrawCalculator._createBitMasks(IPrizeDistributionBuffer.PrizeDistribution)(_prizeDistribution_1)
init
end
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: _prizeDistribution Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _prizeDistribution_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['_prizeDistribution_1'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _createBitMasks
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
REF_58(uint8) -> _prizeDistribution_1.matchCardinality
MEMBER
init
end
init
end
OUT KEY: _createBitMasks__prizeDistribution_matchCardinality
OUT KEY: _createBitMasks__matchCardinality
No field found
[i]Type for REF_58

Name: _prizeDistribution.matchCardinality Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: matchCardinality
init
end
Finance type key: (-1, -1)
XXXX
TMP_105 = new uint256[](REF_58)
[i]Type for TMP_105

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_1(uint256[]) := TMP_105(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masks

Name: masks Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _bitRangeMaskValue, Num: 1
Globalname: _bitRangeMaskValue
End popogation
REF_59(uint8) -> _prizeDistribution_1.bitRangeSize
MEMBER
init
end
init
end
OUT KEY: _createBitMasks__prizeDistribution_bitRangeSize
OUT KEY: _createBitMasks__bitRangeSize
No field found
[i]Type for REF_59

Name: _prizeDistribution.bitRangeSize Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: bitRangeSize
init
end
Finance type key: (-1, -1)
XXXX
TMP_106(uint256) = 2 (c)** REF_59
init
end
init
end
[i]Type for TMP_106

Name: TMP_106 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_107(uint256) = TMP_106 (c)- 1
init
end
init
end
lnorm: * rnorm: 0
init
end
[i]Type for TMP_107

Name: TMP_107 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_bitRangeMaskValue_1(uint256) := TMP_107(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _bitRangeMaskValue

Name: _bitRangeMaskValue Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maskIndex, Num: 1
Globalname: maskIndex
End popogation
maskIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maskIndex

Name: maskIndex Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: maskIndex, Num: 2
Globalname: maskIndex
Name: maskIndex, Num: 2
Globalname: maskIndex
End popogation
Name: maskIndex, Num: 2
Globalname: maskIndex

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
maskIndex_2(uint8) := ϕ(['maskIndex_3', 'maskIndex_1'])
Phi
init
end
[i]Type for maskIndex

Name: maskIndex Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_60(uint8) -> _prizeDistribution_1.matchCardinality
MEMBER
init
end
init
end
[i]Type for REF_60

Name: _prizeDistribution.matchCardinality Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: matchCardinality
init
end
Finance type key: (-1, -1)
XXXX
TMP_108(bool) = maskIndex_2 < REF_60
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_108

Name: TMP_108 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _matchIndexOffset, Num: 1
Globalname: _matchIndexOffset
End popogation
TMP_109 = CONVERT maskIndex_2 to uint256
Converting maskIndex_2

Name: maskIndex Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_109

Name: TMP_109 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_61(uint8) -> _prizeDistribution_1.bitRangeSize
MEMBER
init
end
init
end
[i]Type for REF_61

Name: _prizeDistribution.bitRangeSize Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: bitRangeSize
init
end
Finance type key: (-1, -1)
XXXX
TMP_110 = CONVERT REF_61 to uint256
Converting REF_61

Name: _prizeDistribution.bitRangeSize Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_110

Name: TMP_110 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint256) = TMP_109 (c)* TMP_110
testing mul...
init
end
init
end

Name: TMP_109 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_110 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_111

Name: TMP_111 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_matchIndexOffset_1(uint256) := TMP_111(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _matchIndexOffset

Name: _matchIndexOffset Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: masks, Num: 2
Globalname: masks
End popogation
Name: masks, Num: 2
Globalname: masks

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_62(uint256) -> masks_1[maskIndex_2]
INDEX
[i]Type for REF_62

Name: masks Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_112(uint256) = _bitRangeMaskValue_1 << _matchIndexOffset_1
[i]Type for TMP_112

Name: TMP_112 Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_2(uint256[]) := ϕ(['masks_1'])
Phi
init
end
[i]Type for masks

Name: masks Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_62 (->masks_2) := TMP_112(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_62

Name: REF_62 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: maskIndex, Num: 3
Globalname: maskIndex
End popogation
TMP_113(uint8) := maskIndex_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_113

Name: TMP_113 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maskIndex_3(uint8) = maskIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for maskIndex

Name: maskIndex Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
RETURN masks_1
RETURN
init
end

Name: masks Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _prizeDistribution_1 Function: _createBitMasks
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: matchCardinality, bitRangeSize
Finance Type: undef
Phid
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['_prizeDistribution_1'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _createBitMasks
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: matchCardinality, bitRangeSize
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
REF_58(uint8) -> _prizeDistribution_1.matchCardinality
MEMBER
init
end
init
end
init
end
[i]Type for REF_58

Name: _prizeDistribution.matchCardinality Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: matchCardinality
init
end
Finance type key: (-1, -1)
XXXX
TMP_105 = new uint256[](REF_58)
[i]Type for TMP_105

Name: TMP_105 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_1(uint256[]) := TMP_105(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masks

Name: masks Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _bitRangeMaskValue, Num: 1
Globalname: _bitRangeMaskValue
End popogation
REF_59(uint8) -> _prizeDistribution_1.bitRangeSize
MEMBER
init
end
init
end
init
end
[i]Type for REF_59

Name: _prizeDistribution.bitRangeSize Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: bitRangeSize
init
end
Finance type key: (-1, -1)
XXXX
TMP_106(uint256) = 2 (c)** REF_59
init
end
init
end
[i]Type for TMP_106

Name: TMP_106 Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_107(uint256) = TMP_106 (c)- 1
init
end
init
end
lnorm: * rnorm: 0
init
end
[i]Type for TMP_107

Name: TMP_107 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_bitRangeMaskValue_1(uint256) := TMP_107(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _bitRangeMaskValue

Name: _bitRangeMaskValue Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maskIndex, Num: 1
Globalname: maskIndex
End popogation
maskIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maskIndex

Name: maskIndex Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: maskIndex, Num: 2
Globalname: maskIndex
Name: maskIndex, Num: 2
Globalname: maskIndex
End popogation
Name: maskIndex, Num: 2
Globalname: maskIndex

Name: maskIndex Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
maskIndex_2(uint8) := ϕ(['maskIndex_3', 'maskIndex_1'])
Phi
init
end
[i]Type for maskIndex

Name: maskIndex Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_60(uint8) -> _prizeDistribution_1.matchCardinality
MEMBER
init
end
init
end
init
end
[i]Type for REF_60

Name: _prizeDistribution.matchCardinality Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: matchCardinality
init
end
Finance type key: (-1, -1)
XXXX
TMP_108(bool) = maskIndex_2 < REF_60
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_108

Name: TMP_108 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _matchIndexOffset, Num: 1
Globalname: _matchIndexOffset
End popogation
TMP_109 = CONVERT maskIndex_2 to uint256
Converting maskIndex_2

Name: maskIndex Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_109

Name: TMP_109 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_61(uint8) -> _prizeDistribution_1.bitRangeSize
MEMBER
init
end
init
end
init
end
[i]Type for REF_61

Name: _prizeDistribution.bitRangeSize Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: bitRangeSize
init
end
Finance type key: (-1, -1)
XXXX
TMP_110 = CONVERT REF_61 to uint256
Converting REF_61

Name: _prizeDistribution.bitRangeSize Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_110

Name: TMP_110 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint256) = TMP_109 (c)* TMP_110
testing mul...
init
end
init
end

Name: TMP_109 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_110 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_111

Name: TMP_111 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_matchIndexOffset_1(uint256) := TMP_111(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _matchIndexOffset

Name: _matchIndexOffset Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: masks, Num: 2
Globalname: masks
End popogation
Name: masks, Num: 2
Globalname: masks

Name: masks Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_62(uint256) -> masks_1[maskIndex_2]
INDEX
[i]Type for REF_62

Name: masks Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_112(uint256) = _bitRangeMaskValue_1 << _matchIndexOffset_1
[i]Type for TMP_112

Name: TMP_112 Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_2(uint256[]) := ϕ(['masks_1'])
Phi
init
end
[i]Type for masks

Name: masks Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_62 (->masks_2) := TMP_112(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_62

Name: REF_62 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: maskIndex, Num: 3
Globalname: maskIndex
End popogation
TMP_113(uint8) := maskIndex_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_113

Name: TMP_113 Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maskIndex_3(uint8) = maskIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for maskIndex

Name: maskIndex Function: _createBitMasks
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
RETURN masks_1
RETURN
init
end

Name: masks Function: _createBitMasks
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_67

Name: TMP_67 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_1(uint256[]) := TMP_67(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masks

Name: masks Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_42 -> LENGTH _picks_1
[i]Type for REF_42

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_68 = CONVERT REF_42 to uint32
Converting REF_42

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_68

Name: TMP_68 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
picksLength_1(uint32) := TMP_68(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for picksLength

Name: picksLength Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_43(uint32[16]) -> _prizeDistribution_1.tiers
MEMBER
init
end
init
end
OUT KEY: _calculate__prizeDistribution_tiers
OUT KEY: _calculate__tiers
No field found
[i]Type for REF_43

Name: _prizeDistribution.tiers Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: tiers
init
end
Finance type key: (-1, -1)
XXXX
REF_44 -> LENGTH REF_43
[i]Type for REF_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_70 = new uint256[](REF_44)
[i]Type for TMP_70

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[]) := TMP_70(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 1
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_45(uint32) -> _prizeDistribution_1.maxPicksPerUser
MEMBER
init
end
init
end
OUT KEY: _calculate__prizeDistribution_maxPicksPerUser
OUT KEY: _calculate__maxPicksPerUser
No field found
[i]Type for REF_45

Name: _prizeDistribution.maxPicksPerUser Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: maxPicksPerUser
init
end
Finance type key: (-1, -1)
XXXX
TMP_71(bool) = picksLength_1 <= REF_45
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_71

Name: TMP_71 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,DrawCalc/exceeds-max-user-picks)
[i]Type for TMP_72

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 1
Globalname: index
End popogation
index_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: index, Num: 2
Globalname: index
Name: index, Num: 2
Globalname: index
End popogation
Name: index, Num: 2
Globalname: index

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
index_2(uint32) := ϕ(['index_3', 'index_1'])
Phi
init
end
[i]Type for index

Name: index Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = index_2 < picksLength_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_73

Name: TMP_73 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_46(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_46

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_74(bool) = REF_46 < _totalUserPicks_1
init
end
init
end
lnorm: u rnorm: -18
[i]Type for TMP_74

Name: TMP_74 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,DrawCalc/insufficient-user-picks)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = index_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeFraction, Num: 1
Globalname: prizeFraction
End popogation
prizeFraction_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_47(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_47

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_77(uint32) = index_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_77

Name: TMP_77 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint64) -> _picks_1[TMP_77]
INDEX
[i]Type for REF_48

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_78(bool) = REF_47 > REF_48
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,DrawCalc/picks-ascending)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
End popogation
REF_50(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_50

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_80(bytes) = SOLIDITY_CALL abi.encode()(_userRandomNumber_1,REF_50)
[i]Type for TMP_80

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_80)
[i]Type for TMP_81

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82 = CONVERT TMP_81 to uint256
Converting TMP_81

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_82

Name: TMP_82 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
randomNumberThisPick_1(uint256) := TMP_82(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for randomNumberThisPick

Name: randomNumberThisPick Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
End popogation
TMP_88(uint256[]) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFractions(IPrizeDistributionBuffer.PrizeDistribution,uint8)(_prizeDistribution_1,maxWinningTierIndex_1)
init
end
init
end
[[-1], [-1], 'u', None, [tiers, maxPicksPerUser], -1, None, 'u']

Name: _prizeDistribution Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 0]

Name: maxWinningTierIndex Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _prizeDistribution_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser
Finance Type: undef
Phid

Name: maxWinningTierIndex_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['_prizeDistribution_1'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser
Finance Type: undef
XXXX
maxWinningTierIndex_1(uint8) := ϕ(['maxWinningTierIndex_1'])
Phi
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeDistributionFractions, Num: 1
Globalname: prizeDistributionFractions
End popogation
TMP_117(uint8) = maxWinningTierIndex_1 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_117

Name: TMP_117 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_118 = new uint256[](TMP_117)
[i]Type for TMP_118

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionFractions_1(uint256[]) := TMP_118(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeDistributionFractions

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
End popogation
i_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
Name: i, Num: 2
Globalname: i
End popogation
Name: i, Num: 2
Globalname: i

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
i_2(uint8) := ϕ(['i_3', 'i_1'])
Phi
init
end
[i]Type for i

Name: i Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_119(bool) = i_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_119

Name: TMP_119 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeDistributionFractions, Num: 2
Globalname: prizeDistributionFractions
End popogation
Name: prizeDistributionFractions, Num: 2
Globalname: prizeDistributionFractions

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_66(uint256) -> prizeDistributionFractions_1[i_2]
INDEX
[i]Type for REF_66

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_120(uint256) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFraction(IPrizeDistributionBuffer.PrizeDistribution,uint256)(_prizeDistribution_1,i_2)
init
end
init
end
[[-1], [-1], 'u', None, [tiers, maxPicksPerUser], -1, None, 'u']

Name: _prizeDistribution Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 0]

Name: _prizeTierIndex Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _prizeDistribution_1 Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser
Finance Type: undef
Phid

Name: _prizeTierIndex_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['_prizeDistribution_1'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser
Finance Type: undef
XXXX
_prizeTierIndex_1(uint256) := ϕ(['i_2'])
Phi
[i]Type for _prizeTierIndex

Name: _prizeTierIndex Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeFraction, Num: 1
Globalname: prizeFraction
End popogation
REF_63(uint32[16]) -> _prizeDistribution_1.tiers
MEMBER
init
end
init
end
[i]Type for REF_63

Name: _prizeDistribution.tiers Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: tiers
init
end
Finance type key: (-1, -1)
XXXX
REF_64(uint32) -> REF_63[_prizeTierIndex_1]
INDEX
[i]Type for REF_64

Name: _prizeDistribution.tiers Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
prizeFraction_1(uint256) := REF_64(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeFraction

Name: prizeFraction Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: numberOfPrizesForIndex, Num: 1
Globalname: numberOfPrizesForIndex
End popogation
REF_65(uint8) -> _prizeDistribution_1.bitRangeSize
MEMBER
init
end
init
end
OUT KEY: _calculatePrizeTierFraction__prizeDistribution_bitRangeSize
OUT KEY: _calculatePrizeTierFraction__bitRangeSize
No field found
[i]Type for REF_65

Name: _prizeDistribution.bitRangeSize Function: _calculatePrizeTierFraction
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: bitRangeSize
init
end
Finance type key: (-1, -1)
XXXX
TMP_114(uint256) = INTERNAL_CALL, DrawCalculator._numberOfPrizesForIndex(uint8,uint256)(REF_65,_prizeTierIndex_1)
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _bitRangeSize Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 0]

Name: _prizeTierIndex Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _bitRangeSize_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeTierIndex_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_bitRangeSize_1(uint8) := ϕ(['REF_65'])
Phi
[i]Type for _bitRangeSize

Name: _bitRangeSize Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeTierIndex_1(uint256) := ϕ(['_prizeTierIndex_1'])
Phi
[i]Type for _prizeTierIndex

Name: _prizeTierIndex Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: bitRangeDecimal, Num: 1
Globalname: bitRangeDecimal
End popogation
TMP_122 = CONVERT _bitRangeSize_1 to uint256
Converting _bitRangeSize_1

Name: _bitRangeSize Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_122

Name: TMP_122 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_123(uint256) = 2 (c)** TMP_122
init
end
init
end
[i]Type for TMP_123

Name: TMP_123 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bitRangeDecimal_1(uint256) := TMP_123(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bitRangeDecimal

Name: bitRangeDecimal Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: numberOfPrizesForIndex, Num: 1
Globalname: numberOfPrizesForIndex
End popogation
TMP_124(uint256) = bitRangeDecimal_1 (c)** _prizeTierIndex_1
init
end
init
end
[i]Type for TMP_124

Name: TMP_124 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numberOfPrizesForIndex_1(uint256) := TMP_124(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for numberOfPrizesForIndex

Name: numberOfPrizesForIndex Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _prizeTierIndex, Num: 2
Globalname: _prizeTierIndex
Name: numberOfPrizesForIndex, Num: 2
Globalname: numberOfPrizesForIndex
Name: _prizeTierIndex, Num: 2
Globalname: _prizeTierIndex
End popogation
Name: _prizeTierIndex, Num: 2
Globalname: _prizeTierIndex

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: numberOfPrizesForIndex, Num: 2
Globalname: numberOfPrizesForIndex

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeTierIndex_2(uint256) := ϕ(['_prizeTierIndex_1', '_prizeTierIndex_3'])
Phi
init
end
[i]Type for _prizeTierIndex

Name: _prizeTierIndex Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
numberOfPrizesForIndex_2(uint256) := ϕ(['numberOfPrizesForIndex_1', 'numberOfPrizesForIndex_3'])
Phi
init
end
[i]Type for numberOfPrizesForIndex

Name: numberOfPrizesForIndex Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_125(bool) = _prizeTierIndex_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_125

Name: TMP_125 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: numberOfPrizesForIndex, Num: 3
Globalname: numberOfPrizesForIndex
End popogation
TMP_126(uint256) = _prizeTierIndex_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_126

Name: TMP_126 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_127(uint256) = bitRangeDecimal_1 (c)** TMP_126
init
end
init
end
[i]Type for TMP_127

Name: TMP_127 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numberOfPrizesForIndex_3(uint256) = numberOfPrizesForIndex_2 (c)- TMP_127
init
end
init
end
lnorm: u rnorm: *
init
end
[i]Type for numberOfPrizesForIndex

Name: numberOfPrizesForIndex Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeTierIndex, Num: 3
Globalname: _prizeTierIndex
End popogation
TMP_128(uint256) := _prizeTierIndex_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_128

Name: TMP_128 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
_prizeTierIndex_3(uint256) = _prizeTierIndex_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for _prizeTierIndex

Name: _prizeTierIndex Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN numberOfPrizesForIndex_2
RETURN
init
end

Name: numberOfPrizesForIndex Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _bitRangeSize_1 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeTierIndex_1 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_bitRangeSize_1(uint8) := ϕ(['REF_65'])
Phi
[i]Type for _bitRangeSize

Name: _bitRangeSize Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeTierIndex_1(uint256) := ϕ(['_prizeTierIndex_1'])
Phi
[i]Type for _prizeTierIndex

Name: _prizeTierIndex Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: bitRangeDecimal, Num: 1
Globalname: bitRangeDecimal
End popogation
TMP_122 = CONVERT _bitRangeSize_1 to uint256
Converting _bitRangeSize_1

Name: _bitRangeSize Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_122

Name: TMP_122 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_123(uint256) = 2 (c)** TMP_122
init
end
init
end
[i]Type for TMP_123

Name: TMP_123 Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
bitRangeDecimal_1(uint256) := TMP_123(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for bitRangeDecimal

Name: bitRangeDecimal Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: bitRangeDecimal, Num: 1
Globalname: bitRangeDecimal
Name: numberOfPrizesForIndex, Num: 1
Globalname: numberOfPrizesForIndex
End popogation
TMP_124(uint256) = bitRangeDecimal_1 (c)** _prizeTierIndex_1
init
end
init
end
[i]Type for TMP_124

Name: TMP_124 Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numberOfPrizesForIndex_1(uint256) := TMP_124(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for numberOfPrizesForIndex

Name: numberOfPrizesForIndex Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _prizeTierIndex, Num: 2
Globalname: _prizeTierIndex
Name: numberOfPrizesForIndex, Num: 2
Globalname: numberOfPrizesForIndex
Name: _prizeTierIndex, Num: 2
Globalname: _prizeTierIndex
End popogation
Name: _prizeTierIndex, Num: 2
Globalname: _prizeTierIndex

Name: _prizeTierIndex Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
Name: numberOfPrizesForIndex, Num: 2
Globalname: numberOfPrizesForIndex

Name: numberOfPrizesForIndex Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeTierIndex_2(uint256) := ϕ(['_prizeTierIndex_1', '_prizeTierIndex_3'])
Phi
init
end
[i]Type for _prizeTierIndex

Name: _prizeTierIndex Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
numberOfPrizesForIndex_2(uint256) := ϕ(['numberOfPrizesForIndex_1', 'numberOfPrizesForIndex_3'])
Phi
init
end
[i]Type for numberOfPrizesForIndex

Name: numberOfPrizesForIndex Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_125(bool) = _prizeTierIndex_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_125

Name: TMP_125 Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: bitRangeDecimal, Num: 1
Globalname: bitRangeDecimal
Name: numberOfPrizesForIndex, Num: 2
Globalname: numberOfPrizesForIndex
Name: numberOfPrizesForIndex, Num: 3
Globalname: numberOfPrizesForIndex
End popogation
TMP_126(uint256) = _prizeTierIndex_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_126

Name: TMP_126 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
TMP_127(uint256) = bitRangeDecimal_1 (c)** TMP_126
init
end
init
end
[i]Type for TMP_127

Name: TMP_127 Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numberOfPrizesForIndex_3(uint256) = numberOfPrizesForIndex_2 (c)- TMP_127
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for numberOfPrizesForIndex

Name: numberOfPrizesForIndex Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeTierIndex, Num: 3
Globalname: _prizeTierIndex
End popogation
TMP_128(uint256) := _prizeTierIndex_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_128

Name: TMP_128 Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
_prizeTierIndex_3(uint256) = _prizeTierIndex_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for _prizeTierIndex

Name: _prizeTierIndex Function: _numberOfPrizesForIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: -1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: numberOfPrizesForIndex, Num: 2
Globalname: numberOfPrizesForIndex
End popogation
RETURN numberOfPrizesForIndex_2
RETURN
init
end

Name: numberOfPrizesForIndex Function: _numberOfPrizesForIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_114

Name: TMP_114 Function: _calculatePrizeTierFraction
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numberOfPrizesForIndex_1(uint256) := TMP_114(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for numberOfPrizesForIndex

Name: numberOfPrizesForIndex Function: _calculatePrizeTierFraction
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: numberOfPrizesForIndex, Num: 1
Globalname: numberOfPrizesForIndex
End popogation
TMP_115(uint256) = prizeFraction_1 (c)/ numberOfPrizesForIndex_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_115

Name: TMP_115 Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_115
RETURN
init
end

Name: TMP_115 Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _prizeDistribution_1 Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: bitRangeSize, tiers, maxPicksPerUser
Finance Type: undef
Phid

Name: _prizeTierIndex_1 Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['_prizeDistribution_1'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: bitRangeSize, tiers, maxPicksPerUser
Finance Type: undef
XXXX
_prizeTierIndex_1(uint256) := ϕ(['i_2'])
Phi
[i]Type for _prizeTierIndex

Name: _prizeTierIndex Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeFraction, Num: 1
Globalname: prizeFraction
End popogation
REF_63(uint32[16]) -> _prizeDistribution_1.tiers
MEMBER
init
end
init
end
init
end
[i]Type for REF_63

Name: _prizeDistribution.tiers Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: tiers
init
end
Finance type key: (-1, -1)
XXXX
REF_64(uint32) -> REF_63[_prizeTierIndex_1]
INDEX
[i]Type for REF_64

Name: _prizeDistribution.tiers Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
prizeFraction_1(uint256) := REF_64(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeFraction

Name: prizeFraction Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: numberOfPrizesForIndex, Num: 1
Globalname: numberOfPrizesForIndex
End popogation
REF_65(uint8) -> _prizeDistribution_1.bitRangeSize
MEMBER
init
end
init
end
init
end
[i]Type for REF_65

Name: _prizeDistribution.bitRangeSize Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: bitRangeSize
init
end
Finance type key: (-1, -1)
XXXX
TMP_114(uint256) = INTERNAL_CALL, DrawCalculator._numberOfPrizesForIndex(uint8,uint256)(REF_65,_prizeTierIndex_1)
init
end
init
end
init
end
[i]Type for TMP_114

Name: TMP_114 Function: _calculatePrizeTierFraction
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numberOfPrizesForIndex_1(uint256) := TMP_114(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for numberOfPrizesForIndex

Name: numberOfPrizesForIndex Function: _calculatePrizeTierFraction
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: numberOfPrizesForIndex, Num: 1
Globalname: numberOfPrizesForIndex
End popogation
TMP_115(uint256) = prizeFraction_1 (c)/ numberOfPrizesForIndex_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_115

Name: TMP_115 Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_115
RETURN
init
end

Name: TMP_115 Function: _calculatePrizeTierFraction
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_120

Name: TMP_120 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionFractions_2(uint256[]) := ϕ(['prizeDistributionFractions_1'])
Phi
init
end
[i]Type for prizeDistributionFractions

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_66 (->prizeDistributionFractions_2) := TMP_120(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_66

Name: REF_66 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 3
Globalname: i
End popogation
TMP_121(uint8) := i_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_121

Name: TMP_121 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
i_3(uint8) = i_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i

Name: i Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeDistributionFractions, Num: 1
Globalname: prizeDistributionFractions
End popogation
RETURN prizeDistributionFractions_1
RETURN
init
end

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _prizeDistribution_1 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser
Finance Type: undef
Phid

Name: maxWinningTierIndex_1 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['_prizeDistribution_1'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser
Finance Type: undef
XXXX
maxWinningTierIndex_1(uint8) := ϕ(['maxWinningTierIndex_1'])
Phi
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeDistributionFractions, Num: 1
Globalname: prizeDistributionFractions
End popogation
TMP_117(uint8) = maxWinningTierIndex_1 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_117

Name: TMP_117 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_118 = new uint256[](TMP_117)
[i]Type for TMP_118

Name: TMP_118 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionFractions_1(uint256[]) := TMP_118(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeDistributionFractions

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 1
Globalname: i
End popogation
i_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: i, Num: 2
Globalname: i
Name: i, Num: 2
Globalname: i
End popogation
Name: i, Num: 2
Globalname: i

Name: i Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
i_2(uint8) := ϕ(['i_3', 'i_1'])
Phi
init
end
[i]Type for i

Name: i Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_119(bool) = i_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_119

Name: TMP_119 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeDistributionFractions, Num: 2
Globalname: prizeDistributionFractions
End popogation
Name: prizeDistributionFractions, Num: 2
Globalname: prizeDistributionFractions

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_66(uint256) -> prizeDistributionFractions_1[i_2]
INDEX
[i]Type for REF_66

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_120(uint256) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFraction(IPrizeDistributionBuffer.PrizeDistribution,uint256)(_prizeDistribution_1,i_2)
init
end
init
end
init
end
[i]Type for TMP_120

Name: TMP_120 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionFractions_2(uint256[]) := ϕ(['prizeDistributionFractions_1'])
Phi
init
end
[i]Type for prizeDistributionFractions

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_66 (->prizeDistributionFractions_2) := TMP_120(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_66

Name: REF_66 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: i, Num: 3
Globalname: i
End popogation
TMP_121(uint8) := i_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_121

Name: TMP_121 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
i_3(uint8) = i_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i

Name: i Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeDistributionFractions, Num: 1
Globalname: prizeDistributionFractions
End popogation
RETURN prizeDistributionFractions_1
RETURN
init
end

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _prizeDistribution Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser
Finance Type: undef
Phid

Name: maxWinningTierIndex Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['_prizeDistribution_1'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser
Finance Type: undef
XXXX
maxWinningTierIndex_1(uint8) := ϕ(['maxWinningTierIndex_1'])
Phi
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeDistributionFractions, Num: 1
Globalname: prizeDistributionFractions
End popogation
TMP_117(uint8) = maxWinningTierIndex_1 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_117

Name: TMP_117 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_118 = new uint256[](TMP_117)
[i]Type for TMP_118

Name: TMP_118 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionFractions_1(uint256[]) := TMP_118(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeDistributionFractions

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
i_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for i

Name: i Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: i Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Phid
i_2(uint8) := ϕ(['i_3', 'i_1'])
Phi
[i]Type for i

Name: i Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_119(bool) = i_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_119

Name: TMP_119 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeDistributionFractions, Num: 2
Globalname: prizeDistributionFractions
End popogation
Name: prizeDistributionFractions, Num: 2
Globalname: prizeDistributionFractions

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_66(uint256) -> prizeDistributionFractions_1[i_2]
INDEX
[i]Type for REF_66

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_120(uint256) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFraction(IPrizeDistributionBuffer.PrizeDistribution,uint256)(_prizeDistribution_1,i_2)
init
end
init
end
init
end
[i]Type for TMP_120

Name: TMP_120 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionFractions_2(uint256[]) := ϕ(['prizeDistributionFractions_1'])
Phi
init
end
[i]Type for prizeDistributionFractions

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_66 (->prizeDistributionFractions_2) := TMP_120(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_66

Name: REF_66 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_121(uint8) := i_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_121

Name: TMP_121 Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
i_3(uint8) = i_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for i

Name: i Function: _calculatePrizeTierFractions
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeDistributionFractions, Num: 1
Globalname: prizeDistributionFractions
End popogation
RETURN prizeDistributionFractions_1
RETURN
init
end

Name: prizeDistributionFractions Function: _calculatePrizeTierFractions
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_88

Name: TMP_88 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeTiersFractions_1(uint256[]) := TMP_88(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeTiersFractions

Name: prizeTiersFractions Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_83(uint8) = INTERNAL_CALL, DrawCalculator._calculateTierIndex(uint256,uint256,uint256[])(randomNumberThisPick_1,_winningRandomNumber_1,masks_1)
init
end
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _randomNumberThisPick Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _winningRandomNumber Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _masks Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: _randomNumberThisPick, Num: 1
Globalname: _randomNumberThisPick

Name: _randomNumberThisPick_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _winningRandomNumber_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _masks, Num: 1
Globalname: _masks

Name: _masks_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_randomNumberThisPick_1(uint256) := ϕ(['randomNumberThisPick_1'])
Phi
init
end
[i]Type for _randomNumberThisPick

Name: _randomNumberThisPick Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_winningRandomNumber_1(uint256) := ϕ(['_winningRandomNumber_1'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_masks_1(uint256[]) := ϕ(['masks_1'])
Phi
init
end
[i]Type for _masks

Name: _masks Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: numberOfMatches, Num: 1
Globalname: numberOfMatches
End popogation
numberOfMatches_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masks, Num: 1
Globalname: _masks
Name: masksLength, Num: 1
Globalname: masksLength
End popogation
REF_56 -> LENGTH _masks_1
[i]Type for REF_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_95 = CONVERT REF_56 to uint8
Converting REF_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_95

Name: TMP_95 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masksLength_1(uint8) := TMP_95(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masksLength

Name: masksLength Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: matchIndex, Num: 1
Globalname: matchIndex
End popogation
matchIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: matchIndex, Num: 2
Globalname: matchIndex
Name: masksLength, Num: 1
Globalname: masksLength
Name: numberOfMatches, Num: 2
Globalname: numberOfMatches
Name: matchIndex, Num: 2
Globalname: matchIndex
End popogation
Name: numberOfMatches, Num: 2
Globalname: numberOfMatches

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: matchIndex, Num: 2
Globalname: matchIndex

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
numberOfMatches_2(uint8) := ϕ(['numberOfMatches_3', 'numberOfMatches_1'])
Phi
init
end
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
matchIndex_2(uint8) := ϕ(['matchIndex_1', 'matchIndex_3'])
Phi
init
end
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_96(bool) = matchIndex_2 < masksLength_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_96

Name: TMP_96 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masks, Num: 1
Globalname: _masks
Name: mask, Num: 1
Globalname: mask
End popogation
REF_57(uint256) -> _masks_1[matchIndex_2]
INDEX
[i]Type for REF_57

Name: _masks_1 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
mask_1(uint256) := REF_57(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for mask

Name: mask Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _randomNumberThisPick, Num: 1
Globalname: _randomNumberThisPick
End popogation
TMP_97(uint256) = _randomNumberThisPick_1 & mask_1
[i]Type for TMP_97

Name: TMP_97 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(uint256) = _winningRandomNumber_1 & mask_1
[i]Type for TMP_98

Name: TMP_98 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = TMP_97 != TMP_98
[i]Type for TMP_99

Name: TMP_99 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: numberOfMatches, Num: 2
Globalname: numberOfMatches
Name: numberOfMatches, Num: 3
Globalname: numberOfMatches
End popogation
TMP_101(uint8) := numberOfMatches_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_101

Name: TMP_101 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numberOfMatches_3(uint8) = numberOfMatches_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: numberOfMatches, Num: 2
Globalname: numberOfMatches
End popogation
TMP_100(uint8) = masksLength_1 (c)- numberOfMatches_2
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_100

Name: TMP_100 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_100
RETURN
init
end

Name: TMP_100 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
Name: matchIndex, Num: 3
Globalname: matchIndex
End popogation
TMP_102(uint8) := matchIndex_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_102

Name: TMP_102 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
matchIndex_3(uint8) = matchIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: numberOfMatches, Num: 2
Globalname: numberOfMatches
End popogation
TMP_103(uint8) = masksLength_1 (c)- numberOfMatches_2
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_103

Name: TMP_103 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_103
RETURN
init
end

Name: TMP_103 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: _randomNumberThisPick, Num: 1
Globalname: _randomNumberThisPick

Name: _randomNumberThisPick_1 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _winningRandomNumber_1 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _masks, Num: 1
Globalname: _masks

Name: _masks_1 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_randomNumberThisPick_1(uint256) := ϕ(['randomNumberThisPick_1'])
Phi
init
end
[i]Type for _randomNumberThisPick

Name: _randomNumberThisPick Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_winningRandomNumber_1(uint256) := ϕ(['_winningRandomNumber_1'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_masks_1(uint256[]) := ϕ(['masks_1'])
Phi
init
end
[i]Type for _masks

Name: _masks Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: numberOfMatches, Num: 1
Globalname: numberOfMatches
End popogation
numberOfMatches_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masks, Num: 1
Globalname: _masks
Name: masksLength, Num: 1
Globalname: masksLength
End popogation
REF_56 -> LENGTH _masks_1
[i]Type for REF_56

Name: REF_56 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_95 = CONVERT REF_56 to uint8
Converting REF_56

Name: REF_56 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_95

Name: TMP_95 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masksLength_1(uint8) := TMP_95(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masksLength

Name: masksLength Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: matchIndex, Num: 1
Globalname: matchIndex
End popogation
matchIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: matchIndex, Num: 2
Globalname: matchIndex
Name: masksLength, Num: 1
Globalname: masksLength
Name: numberOfMatches, Num: 2
Globalname: numberOfMatches
Name: matchIndex, Num: 2
Globalname: matchIndex
End popogation
Name: numberOfMatches, Num: 2
Globalname: numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: matchIndex, Num: 2
Globalname: matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
numberOfMatches_2(uint8) := ϕ(['numberOfMatches_3', 'numberOfMatches_1'])
Phi
init
end
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
matchIndex_2(uint8) := ϕ(['matchIndex_1', 'matchIndex_3'])
Phi
init
end
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_96(bool) = matchIndex_2 < masksLength_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_96

Name: TMP_96 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masks, Num: 1
Globalname: _masks
Name: mask, Num: 1
Globalname: mask
End popogation
REF_57(uint256) -> _masks_1[matchIndex_2]
INDEX
[i]Type for REF_57

Name: _masks_1 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
mask_1(uint256) := REF_57(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for mask

Name: mask Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _randomNumberThisPick, Num: 1
Globalname: _randomNumberThisPick
End popogation
TMP_97(uint256) = _randomNumberThisPick_1 & mask_1
[i]Type for TMP_97

Name: TMP_97 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(uint256) = _winningRandomNumber_1 & mask_1
[i]Type for TMP_98

Name: TMP_98 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = TMP_97 != TMP_98
[i]Type for TMP_99

Name: TMP_99 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: numberOfMatches, Num: 3
Globalname: numberOfMatches
End popogation
TMP_101(uint8) := numberOfMatches_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_101

Name: TMP_101 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numberOfMatches_3(uint8) = numberOfMatches_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_100(uint8) = masksLength_1 (c)- numberOfMatches_2
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_100

Name: TMP_100 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_100
RETURN
init
end

Name: TMP_100 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
Name: matchIndex, Num: 3
Globalname: matchIndex
End popogation
TMP_102(uint8) := matchIndex_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_102

Name: TMP_102 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
matchIndex_3(uint8) = matchIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_103(uint8) = masksLength_1 (c)- numberOfMatches_2
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_103

Name: TMP_103 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_103
RETURN
init
end

Name: TMP_103 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: _randomNumberThisPick, Num: 1
Globalname: _randomNumberThisPick

Name: _randomNumberThisPick_1 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _winningRandomNumber Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _masks, Num: 1
Globalname: _masks

Name: _masks_1 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_randomNumberThisPick_1(uint256) := ϕ(['randomNumberThisPick_1'])
Phi
init
end
[i]Type for _randomNumberThisPick

Name: _randomNumberThisPick Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_winningRandomNumber_1(uint256) := ϕ(['_winningRandomNumber_1'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_masks_1(uint256[]) := ϕ(['masks_1'])
Phi
init
end
[i]Type for _masks

Name: _masks Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
numberOfMatches_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masks, Num: 1
Globalname: _masks
End popogation
REF_56 -> LENGTH _masks_1
[i]Type for REF_56

Name: REF_56 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_95 = CONVERT REF_56 to uint8
Converting REF_56

Name: REF_56 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_95

Name: TMP_95 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masksLength_1(uint8) := TMP_95(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masksLength

Name: masksLength Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
matchIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
numberOfMatches_2(uint8) := ϕ(['numberOfMatches_3', 'numberOfMatches_1'])
Phi
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
matchIndex_2(uint8) := ϕ(['matchIndex_1', 'matchIndex_3'])
Phi
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_96(bool) = matchIndex_2 < masksLength_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_96

Name: TMP_96 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masks, Num: 1
Globalname: _masks
End popogation
REF_57(uint256) -> _masks_1[matchIndex_2]
INDEX
[i]Type for REF_57

Name: _masks_1 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
mask_1(uint256) := REF_57(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for mask

Name: mask Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _randomNumberThisPick, Num: 1
Globalname: _randomNumberThisPick
End popogation
TMP_97(uint256) = _randomNumberThisPick_1 & mask_1
[i]Type for TMP_97

Name: TMP_97 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(uint256) = _winningRandomNumber_1 & mask_1
[i]Type for TMP_98

Name: TMP_98 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = TMP_97 != TMP_98
[i]Type for TMP_99

Name: TMP_99 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_101(uint8) := numberOfMatches_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_101

Name: TMP_101 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numberOfMatches_3(uint8) = numberOfMatches_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_100(uint8) = masksLength_1 (c)- numberOfMatches_2
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_100

Name: TMP_100 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_100
RETURN
init
end

Name: TMP_100 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
TMP_102(uint8) := matchIndex_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_102

Name: TMP_102 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
matchIndex_3(uint8) = matchIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_103(uint8) = masksLength_1 (c)- numberOfMatches_2
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_103

Name: TMP_103 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_103
RETURN
init
end

Name: TMP_103 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: _randomNumberThisPick, Num: 1
Globalname: _randomNumberThisPick

Name: _randomNumberThisPick_1 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _winningRandomNumber Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _masks, Num: 1
Globalname: _masks

Name: _masks_1 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_randomNumberThisPick_1(uint256) := ϕ(['randomNumberThisPick_1'])
Phi
init
end
[i]Type for _randomNumberThisPick

Name: _randomNumberThisPick Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_winningRandomNumber_1(uint256) := ϕ(['_winningRandomNumber_1'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_masks_1(uint256[]) := ϕ(['masks_1'])
Phi
init
end
[i]Type for _masks

Name: _masks Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
numberOfMatches_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masks, Num: 1
Globalname: _masks
End popogation
REF_56 -> LENGTH _masks_1
[i]Type for REF_56

Name: REF_56 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_95 = CONVERT REF_56 to uint8
Converting REF_56

Name: REF_56 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_95

Name: TMP_95 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masksLength_1(uint8) := TMP_95(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masksLength

Name: masksLength Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
matchIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
numberOfMatches_2(uint8) := ϕ(['numberOfMatches_3', 'numberOfMatches_1'])
Phi
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
matchIndex_2(uint8) := ϕ(['matchIndex_1', 'matchIndex_3'])
Phi
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_96(bool) = matchIndex_2 < masksLength_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_96

Name: TMP_96 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _masks, Num: 1
Globalname: _masks
End popogation
REF_57(uint256) -> _masks_1[matchIndex_2]
INDEX
[i]Type for REF_57

Name: _masks_1 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
mask_1(uint256) := REF_57(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for mask

Name: mask Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _randomNumberThisPick, Num: 1
Globalname: _randomNumberThisPick
End popogation
TMP_97(uint256) = _randomNumberThisPick_1 & mask_1
[i]Type for TMP_97

Name: TMP_97 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(uint256) = _winningRandomNumber_1 & mask_1
[i]Type for TMP_98

Name: TMP_98 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = TMP_97 != TMP_98
[i]Type for TMP_99

Name: TMP_99 Function: _calculateTierIndex
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_101(uint8) := numberOfMatches_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_101

Name: TMP_101 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
numberOfMatches_3(uint8) = numberOfMatches_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for numberOfMatches

Name: numberOfMatches Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_100(uint8) = masksLength_1 (c)- numberOfMatches_2
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_100

Name: TMP_100 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_100
RETURN
init
end

Name: TMP_100 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
TMP_102(uint8) := matchIndex_2(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_102

Name: TMP_102 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
matchIndex_3(uint8) = matchIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for matchIndex

Name: matchIndex Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_103(uint8) = masksLength_1 (c)- numberOfMatches_2
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_103

Name: TMP_103 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_103
RETURN
init
end

Name: TMP_103 Function: _calculateTierIndex
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for TMP_83

Name: TMP_83 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tiersIndex_1(uint8) := TMP_83(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tiersIndex

Name: tiersIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: TIERS_LENGTH, Num: 3
Globalname: TIERS_LENGTH
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_84(bool) = tiersIndex_1 < TIERS_LENGTH_3
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_84

Name: TMP_84 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 1
Globalname: prizeCountIndex
End popogation
prizeCountIndex_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_85(bool) = tiersIndex_1 > maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_85

Name: TMP_85 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: maxWinningTierIndex, Num: 3
Globalname: maxWinningTierIndex

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
maxWinningTierIndex_3(uint8) := ϕ(['maxWinningTierIndex_1', 'maxWinningTierIndex_2'])
Phi
init
end
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
End popogation
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_51(uint256) -> _prizeCounts_1[tiersIndex_1]
INDEX
[i]Type for REF_51

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_86(uint256) := REF_51(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_86

Name: TMP_86 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_2(uint256[]) := ϕ(['_prizeCounts_1'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_51(-> _prizeCounts_2) = REF_51 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for REF_51

Name: REF_51 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 2
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_2(uint8) := tiersIndex_1(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: _prizeCounts, Num: 3
Globalname: _prizeCounts

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeCounts_3(uint256[]) := ϕ(['_prizeCounts_1', '_prizeCounts_2'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
End popogation
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
prizeCountIndex_2(uint256) := ϕ(['prizeCountIndex_3', 'prizeCountIndex_1'])
Phi
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_89(bool) = prizeCountIndex_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_89

Name: TMP_89 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 3
Globalname: index
End popogation
TMP_87(uint32) := index_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_87

Name: TMP_87 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
index_3(uint32) = index_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_52(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_52

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_90(bool) = REF_52 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_90

Name: TMP_90 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: prizeFraction, Num: 3
Globalname: prizeFraction

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
prizeFraction_3(uint256) := ϕ(['prizeFraction_1', 'prizeFraction_2'])
Phi
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeFraction, Num: 2
Globalname: prizeFraction
End popogation
REF_53(uint256) -> prizeTiersFractions_1[prizeCountIndex_2]
INDEX
[i]Type for REF_53

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_54(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_54

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_91(uint256) = REF_53 (c)* REF_54
testing mul...
init
end
init
end

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_91

Name: TMP_91 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeFraction_2(uint256) = prizeFraction_1 (c)+ TMP_91
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prize, Num: 1
Globalname: prize
End popogation
REF_55(uint256) -> _prizeDistribution_1.prize
MEMBER
init
end
init
end
OUT KEY: _calculate__prizeDistribution_prize
OUT KEY: _calculate__prize
No field found
[i]Type for REF_55

Name: _prizeDistribution.prize Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: prize
init
end
Finance type key: (-1, -1)
XXXX
TMP_93(uint256) = prizeFraction_1 (c)* REF_55
testing mul...
init
end
init
end

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_93

Name: TMP_93 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(uint256) = TMP_93 (c)/ 1000000000
init
end
init
end
lnorm: u rnorm: 9
init
end
init
end
init
end
lnorm: u rnorm: 9
init
end
[i]Type for TMP_94

Name: TMP_94 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prize_1(uint256) := TMP_94(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prize

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 3
Globalname: prizeCountIndex
End popogation
TMP_92(uint256) := prizeCountIndex_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_92

Name: TMP_92 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
prizeCountIndex_3(uint256) = prizeCountIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
prizeCounts_1(uint256[]) := _prizeCounts_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prize_1,prizeCounts_1
RETURN
init
end

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _winningRandomNumber_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _totalUserPicks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _picks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistribution_1 Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
Phid

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_winningRandomNumber_1(uint256) := ϕ(['REF_16'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalUserPicks_1(uint256) := ϕ(['totalUserPicks_1'])
Phi
[i]Type for _totalUserPicks

Name: _totalUserPicks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_picks_1(uint64[]) := ϕ(['REF_17'])
Phi
[i]Type for _picks

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['REF_18'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
XXXX
TIERS_LENGTH_1(uint8) := ϕ(['TIERS_LENGTH_0', 'TIERS_LENGTH_3', 'TIERS_LENGTH_2'])
Phi
[i]Type for TIERS_LENGTH

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
TMP_67(uint256[]) = INTERNAL_CALL, DrawCalculator._createBitMasks(IPrizeDistributionBuffer.PrizeDistribution)(_prizeDistribution_1)
init
end
init
end
[i]Type for TMP_67

Name: TMP_67 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_1(uint256[]) := TMP_67(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masks

Name: masks Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_42 -> LENGTH _picks_1
[i]Type for REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_68 = CONVERT REF_42 to uint32
Converting REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_68

Name: TMP_68 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
picksLength_1(uint32) := TMP_68(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for picksLength

Name: picksLength Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_43(uint32[16]) -> _prizeDistribution_1.tiers
MEMBER
init
end
init
end
init
end
[i]Type for REF_43

Name: _prizeDistribution.tiers Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: tiers
init
end
Finance type key: (-1, -1)
XXXX
REF_44 -> LENGTH REF_43
[i]Type for REF_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_70 = new uint256[](REF_44)
[i]Type for TMP_70

Name: TMP_70 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[]) := TMP_70(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 1
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_45(uint32) -> _prizeDistribution_1.maxPicksPerUser
MEMBER
init
end
init
end
init
end
[i]Type for REF_45

Name: _prizeDistribution.maxPicksPerUser Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: maxPicksPerUser
init
end
Finance type key: (-1, -1)
XXXX
TMP_71(bool) = picksLength_1 <= REF_45
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_71

Name: TMP_71 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,DrawCalc/exceeds-max-user-picks)
[i]Type for TMP_72

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 1
Globalname: index
End popogation
index_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: index, Num: 2
Globalname: index
Name: index, Num: 2
Globalname: index
End popogation
Name: index, Num: 2
Globalname: index

Name: index Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
index_2(uint32) := ϕ(['index_3', 'index_1'])
Phi
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = index_2 < picksLength_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_73

Name: TMP_73 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_46(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_46

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_74(bool) = REF_46 < _totalUserPicks_1
init
end
init
end
lnorm: u rnorm: -18
[i]Type for TMP_74

Name: TMP_74 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,DrawCalc/insufficient-user-picks)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = index_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeFraction, Num: 1
Globalname: prizeFraction
End popogation
prizeFraction_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_47(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_47

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_77(uint32) = index_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_77

Name: TMP_77 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint64) -> _picks_1[TMP_77]
INDEX
[i]Type for REF_48

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_78(bool) = REF_47 > REF_48
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,DrawCalc/picks-ascending)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
End popogation
REF_50(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_50

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_80(bytes) = SOLIDITY_CALL abi.encode()(_userRandomNumber_1,REF_50)
[i]Type for TMP_80

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_80)
[i]Type for TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82 = CONVERT TMP_81 to uint256
Converting TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_82

Name: TMP_82 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
randomNumberThisPick_1(uint256) := TMP_82(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for randomNumberThisPick

Name: randomNumberThisPick Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
End popogation
TMP_88(uint256[]) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFractions(IPrizeDistributionBuffer.PrizeDistribution,uint8)(_prizeDistribution_1,maxWinningTierIndex_1)
init
end
init
end
init
end
[i]Type for TMP_88

Name: TMP_88 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeTiersFractions_1(uint256[]) := TMP_88(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeTiersFractions

Name: prizeTiersFractions Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_83(uint8) = INTERNAL_CALL, DrawCalculator._calculateTierIndex(uint256,uint256,uint256[])(randomNumberThisPick_1,_winningRandomNumber_1,masks_1)
init
end
init
end
init
end
[i]Type for TMP_83

Name: TMP_83 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tiersIndex_1(uint8) := TMP_83(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tiersIndex

Name: tiersIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_84(bool) = tiersIndex_1 < TIERS_LENGTH_3
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_84

Name: TMP_84 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 1
Globalname: prizeCountIndex
End popogation
prizeCountIndex_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_85(bool) = tiersIndex_1 > maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_85

Name: TMP_85 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: maxWinningTierIndex, Num: 3
Globalname: maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
maxWinningTierIndex_3(uint8) := ϕ(['maxWinningTierIndex_1', 'maxWinningTierIndex_2'])
Phi
init
end
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
End popogation
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_51(uint256) -> _prizeCounts_1[tiersIndex_1]
INDEX
[i]Type for REF_51

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_86(uint256) := REF_51(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_86

Name: TMP_86 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_2(uint256[]) := ϕ(['_prizeCounts_1'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_51(-> _prizeCounts_2) = REF_51 (c)+ 1
init
end
init
end
lnorm: 0 rnorm: 0
init
end
[i]Type for REF_51

Name: REF_51 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 2
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_2(uint8) := tiersIndex_1(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: _prizeCounts, Num: 3
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeCounts_3(uint256[]) := ϕ(['_prizeCounts_1', '_prizeCounts_2'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
End popogation
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
prizeCountIndex_2(uint256) := ϕ(['prizeCountIndex_3', 'prizeCountIndex_1'])
Phi
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_89(bool) = prizeCountIndex_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_89

Name: TMP_89 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 3
Globalname: index
End popogation
TMP_87(uint32) := index_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_87

Name: TMP_87 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
index_3(uint32) = index_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_52(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_52

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_90(bool) = REF_52 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_90

Name: TMP_90 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: prizeFraction, Num: 3
Globalname: prizeFraction

Name: prizeFraction Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
prizeFraction_3(uint256) := ϕ(['prizeFraction_1', 'prizeFraction_2'])
Phi
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeFraction, Num: 2
Globalname: prizeFraction
End popogation
REF_53(uint256) -> prizeTiersFractions_1[prizeCountIndex_2]
INDEX
[i]Type for REF_53

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_54(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_54

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_91(uint256) = REF_53 (c)* REF_54
testing mul...
init
end
init
end

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_91

Name: TMP_91 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeFraction_2(uint256) = prizeFraction_1 (c)+ TMP_91
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prize, Num: 1
Globalname: prize
End popogation
REF_55(uint256) -> _prizeDistribution_1.prize
MEMBER
init
end
init
end
init
end
[i]Type for REF_55

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: prize
init
end
Finance type key: (-1, -1)
XXXX
TMP_93(uint256) = prizeFraction_1 (c)* REF_55
testing mul...
init
end
init
end

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_93

Name: TMP_93 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(uint256) = TMP_93 (c)/ 1000000000
init
end
init
end
lnorm: u rnorm: 9
init
end
init
end
init
end
lnorm: u rnorm: 9
init
end
[i]Type for TMP_94

Name: TMP_94 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prize_1(uint256) := TMP_94(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prize

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 3
Globalname: prizeCountIndex
End popogation
TMP_92(uint256) := prizeCountIndex_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_92

Name: TMP_92 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
prizeCountIndex_3(uint256) = prizeCountIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
prizeCounts_1(uint256[]) := _prizeCounts_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prize_1,prizeCounts_1
RETURN
init
end

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TUPLE_1

Name: TUPLE_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(uint256)= UNPACK TUPLE_1 index: 0 
([-1], [-1], -9, 'u', 'u', -1)
[i]Type for REF_13

Name: REF_13 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_14(uint256[])= UNPACK TUPLE_1 index: 1 
([], [], 'u', 'u', 'u', -1)
[i]Type for REF_14

Name: REF_14 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: drawIndex, Num: 2
Globalname: drawIndex
Name: drawIndex, Num: 3
Globalname: drawIndex
End popogation
TMP_44(uint32) := drawIndex_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_44

Name: TMP_44 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
drawIndex_3(uint32) = drawIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
TMP_45(bytes) = SOLIDITY_CALL abi.encode()(_prizeCounts_1)
[i]Type for TMP_45

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeCounts_1(bytes) := TMP_45(bytes)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
Name: prizesAwardable, Num: 1
Globalname: prizesAwardable
End popogation
prizesAwardable_1(uint256[]) := _prizesAwardable_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizesAwardable

Name: prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizesAwardable, Num: 1
Globalname: prizesAwardable
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prizesAwardable_1,prizeCounts_1
RETURN
init
end

Name: prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances

Name: _normalizedUserBalances_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _draws_1 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: winningRandomNumber
Finance Type: undef
Phid
Name: _pickIndicesForDraws, Num: 1
Globalname: _pickIndicesForDraws

Name: _pickIndicesForDraws_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistributions_1 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_normalizedUserBalances_1(uint256[]) := ϕ(['userBalances_1'])
Phi
init
end
[i]Type for _normalizedUserBalances

Name: _normalizedUserBalances Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_draws_1(IDrawBeacon.Draw[]) := ϕ(['draws_1'])
Phi
[i]Type for _draws

Name: _draws Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: winningRandomNumber
Finance Type: undef
XXXX
_pickIndicesForDraws_1(uint64[][]) := ϕ(['pickIndices_1'])
Phi
init
end
[i]Type for _pickIndicesForDraws

Name: _pickIndicesForDraws Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := ϕ(['_prizeDistributions_1'])
Phi
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
End popogation
REF_8 -> LENGTH _normalizedUserBalances_1
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_39 = new uint256[](REF_8)
[i]Type for TMP_39

Name: TMP_39 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizesAwardable_1(uint256[]) := TMP_39(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizesAwardable

Name: _prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_9 -> LENGTH _normalizedUserBalances_1
[i]Type for REF_9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_41 = new uint256[][](REF_9)
[i]Type for TMP_41

Name: TMP_41 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[][]) := TMP_41(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: drawIndex, Num: 1
Globalname: drawIndex
End popogation
drawIndex_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: drawIndex, Num: 2
Globalname: drawIndex
Name: drawIndex, Num: 2
Globalname: drawIndex
End popogation
Name: drawIndex, Num: 2
Globalname: drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
drawIndex_2(uint32) := ϕ(['drawIndex_3', 'drawIndex_1'])
Phi
init
end
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_10 -> LENGTH _draws_1
[i]Type for REF_10

Name: REF_10 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_42(bool) = drawIndex_2 < REF_10
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_42

Name: TMP_42 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
Name: totalUserPicks, Num: 1
Globalname: totalUserPicks
End popogation
REF_11(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[drawIndex_2]
INDEX
[i]Type for REF_11

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_12(uint256) -> _normalizedUserBalances_1[drawIndex_2]
INDEX
[i]Type for REF_12

Name: _normalizedUserBalances_1 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_43(uint64) = INTERNAL_CALL, DrawCalculator._calculateNumberOfUserPicks(IPrizeDistributionBuffer.PrizeDistribution,uint256)(REF_11,REF_12)
init
end
init
end
init
end
[i]Type for TMP_43

Name: TMP_43 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUserPicks_1(uint64) := TMP_43(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for totalUserPicks

Name: totalUserPicks Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _pickIndicesForDraws, Num: 1
Globalname: _pickIndicesForDraws
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
End popogation
REF_13(uint256) -> _prizesAwardable_1[drawIndex_2]
INDEX
[i]Type for REF_13

Name: _prizesAwardable Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_14(uint256[]) -> _prizeCounts_1[drawIndex_2]
INDEX
[i]Type for REF_14

Name: _prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_15(IDrawBeacon.Draw) -> _draws_1[drawIndex_2]
INDEX
[i]Type for REF_15

Name: _draws Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: winningRandomNumber
Finance Type: undef
Root: None, Field: None
XXXX
REF_16(uint256) -> REF_15.winningRandomNumber
MEMBER
init
end
init
end
init
end
[i]Type for REF_16

Name: _draws.winningRandomNumber Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_15, Field: winningRandomNumber
init
end
Finance type key: (-1, -1)
XXXX
REF_17(uint64[]) -> _pickIndicesForDraws_1[drawIndex_2]
INDEX
[i]Type for REF_17

Name: _pickIndicesForDraws_1 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_18(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[drawIndex_2]
INDEX
[i]Type for REF_18

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TUPLE_1(uint256,uint256[]) = INTERNAL_CALL, DrawCalculator._calculate(uint256,uint256,bytes32,uint64[],IPrizeDistributionBuffer.PrizeDistribution)(REF_16,totalUserPicks_1,_userRandomNumber_1,REF_17,REF_18)
init
end
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _winningRandomNumber Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _totalUserPicks Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _userRandomNumber Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _picks Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: _prizeDistribution Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _winningRandomNumber_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _totalUserPicks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _picks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistribution_1 Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
Phid

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_winningRandomNumber_1(uint256) := ϕ(['REF_16'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalUserPicks_1(uint256) := ϕ(['totalUserPicks_1'])
Phi
[i]Type for _totalUserPicks

Name: _totalUserPicks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_picks_1(uint64[]) := ϕ(['REF_17'])
Phi
[i]Type for _picks

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['REF_18'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
XXXX
TIERS_LENGTH_1(uint8) := ϕ(['TIERS_LENGTH_0', 'TIERS_LENGTH_3', 'TIERS_LENGTH_2'])
Phi
[i]Type for TIERS_LENGTH

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
TMP_67(uint256[]) = INTERNAL_CALL, DrawCalculator._createBitMasks(IPrizeDistributionBuffer.PrizeDistribution)(_prizeDistribution_1)
init
end
init
end
[i]Type for TMP_67

Name: TMP_67 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_1(uint256[]) := TMP_67(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masks

Name: masks Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_42 -> LENGTH _picks_1
[i]Type for REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_68 = CONVERT REF_42 to uint32
Converting REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_68

Name: TMP_68 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
picksLength_1(uint32) := TMP_68(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for picksLength

Name: picksLength Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_43(uint32[16]) -> _prizeDistribution_1.tiers
MEMBER
init
end
init
end
init
end
[i]Type for REF_43

Name: _prizeDistribution.tiers Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: tiers
init
end
Finance type key: (-1, -1)
XXXX
REF_44 -> LENGTH REF_43
[i]Type for REF_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_70 = new uint256[](REF_44)
[i]Type for TMP_70

Name: TMP_70 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[]) := TMP_70(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 1
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_45(uint32) -> _prizeDistribution_1.maxPicksPerUser
MEMBER
init
end
init
end
init
end
[i]Type for REF_45

Name: _prizeDistribution.maxPicksPerUser Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: maxPicksPerUser
init
end
Finance type key: (-1, -1)
XXXX
TMP_71(bool) = picksLength_1 <= REF_45
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_71

Name: TMP_71 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,DrawCalc/exceeds-max-user-picks)
[i]Type for TMP_72

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 1
Globalname: index
End popogation
index_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: index, Num: 2
Globalname: index
Name: index, Num: 2
Globalname: index
End popogation
Name: index, Num: 2
Globalname: index

Name: index Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
index_2(uint32) := ϕ(['index_3', 'index_1'])
Phi
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = index_2 < picksLength_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_73

Name: TMP_73 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_46(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_46

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_74(bool) = REF_46 < _totalUserPicks_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_74

Name: TMP_74 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,DrawCalc/insufficient-user-picks)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = index_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeFraction, Num: 1
Globalname: prizeFraction
End popogation
prizeFraction_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_47(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_47

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_77(uint32) = index_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_77

Name: TMP_77 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint64) -> _picks_1[TMP_77]
INDEX
[i]Type for REF_48

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_78(bool) = REF_47 > REF_48
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,DrawCalc/picks-ascending)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
End popogation
REF_50(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_50

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_80(bytes) = SOLIDITY_CALL abi.encode()(_userRandomNumber_1,REF_50)
[i]Type for TMP_80

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_80)
[i]Type for TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82 = CONVERT TMP_81 to uint256
Converting TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_82

Name: TMP_82 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
randomNumberThisPick_1(uint256) := TMP_82(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for randomNumberThisPick

Name: randomNumberThisPick Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
End popogation
TMP_88(uint256[]) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFractions(IPrizeDistributionBuffer.PrizeDistribution,uint8)(_prizeDistribution_1,maxWinningTierIndex_1)
init
end
init
end
init
end
[i]Type for TMP_88

Name: TMP_88 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeTiersFractions_1(uint256[]) := TMP_88(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeTiersFractions

Name: prizeTiersFractions Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_83(uint8) = INTERNAL_CALL, DrawCalculator._calculateTierIndex(uint256,uint256,uint256[])(randomNumberThisPick_1,_winningRandomNumber_1,masks_1)
init
end
init
end
init
end
[i]Type for TMP_83

Name: TMP_83 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tiersIndex_1(uint8) := TMP_83(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tiersIndex

Name: tiersIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_84(bool) = tiersIndex_1 < TIERS_LENGTH_3
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_84

Name: TMP_84 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 1
Globalname: prizeCountIndex
End popogation
prizeCountIndex_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_85(bool) = tiersIndex_1 > maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_85

Name: TMP_85 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: maxWinningTierIndex, Num: 3
Globalname: maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
maxWinningTierIndex_3(uint8) := ϕ(['maxWinningTierIndex_1', 'maxWinningTierIndex_2'])
Phi
init
end
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
End popogation
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_51(uint256) -> _prizeCounts_1[tiersIndex_1]
INDEX
[i]Type for REF_51

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_86(uint256) := REF_51(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_86

Name: TMP_86 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_2(uint256[]) := ϕ(['_prizeCounts_1'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_51(-> _prizeCounts_2) = REF_51 (c)+ 1
init
end
init
end
lnorm: 0 rnorm: 0
init
end
[i]Type for REF_51

Name: REF_51 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 2
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_2(uint8) := tiersIndex_1(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: _prizeCounts, Num: 3
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeCounts_3(uint256[]) := ϕ(['_prizeCounts_1', '_prizeCounts_2'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
End popogation
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Phid
prizeCountIndex_2(uint256) := ϕ(['prizeCountIndex_3', 'prizeCountIndex_1'])
Phi
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
TMP_89(bool) = prizeCountIndex_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_89

Name: TMP_89 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 3
Globalname: index
End popogation
TMP_87(uint32) := index_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_87

Name: TMP_87 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
index_3(uint32) = index_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_52(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_52

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_90(bool) = REF_52 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_90

Name: TMP_90 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: prizeFraction, Num: 3
Globalname: prizeFraction

Name: prizeFraction Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
prizeFraction_3(uint256) := ϕ(['prizeFraction_1', 'prizeFraction_2'])
Phi
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeFraction, Num: 2
Globalname: prizeFraction
End popogation
REF_53(uint256) -> prizeTiersFractions_1[prizeCountIndex_2]
INDEX
[i]Type for REF_53

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_54(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_54

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_91(uint256) = REF_53 (c)* REF_54
testing mul...
init
end
init
end

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_91

Name: TMP_91 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeFraction_2(uint256) = prizeFraction_1 (c)+ TMP_91
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prize, Num: 1
Globalname: prize
End popogation
REF_55(uint256) -> _prizeDistribution_1.prize
MEMBER
init
end
init
end
init
end
[i]Type for REF_55

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: prize
init
end
Finance type key: (-1, -1)
XXXX
TMP_93(uint256) = prizeFraction_1 (c)* REF_55
testing mul...
init
end
init
end

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_93

Name: TMP_93 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(uint256) = TMP_93 (c)/ 1000000000
init
end
init
end
lnorm: u rnorm: 9
init
end
init
end
init
end
lnorm: u rnorm: 9
init
end
[i]Type for TMP_94

Name: TMP_94 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prize_1(uint256) := TMP_94(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prize

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 3
Globalname: prizeCountIndex
End popogation
TMP_92(uint256) := prizeCountIndex_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_92

Name: TMP_92 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
prizeCountIndex_3(uint256) = prizeCountIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
prizeCounts_1(uint256[]) := _prizeCounts_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prize_1,prizeCounts_1
RETURN
init
end

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _winningRandomNumber_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _totalUserPicks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _picks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistribution_1 Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
Phid

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_winningRandomNumber_1(uint256) := ϕ(['REF_16'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalUserPicks_1(uint256) := ϕ(['totalUserPicks_1'])
Phi
[i]Type for _totalUserPicks

Name: _totalUserPicks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_picks_1(uint64[]) := ϕ(['REF_17'])
Phi
[i]Type for _picks

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['REF_18'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
XXXX
TIERS_LENGTH_1(uint8) := ϕ(['TIERS_LENGTH_0', 'TIERS_LENGTH_3', 'TIERS_LENGTH_2'])
Phi
[i]Type for TIERS_LENGTH

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
TMP_67(uint256[]) = INTERNAL_CALL, DrawCalculator._createBitMasks(IPrizeDistributionBuffer.PrizeDistribution)(_prizeDistribution_1)
init
end
init
end
[i]Type for TMP_67

Name: TMP_67 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_1(uint256[]) := TMP_67(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masks

Name: masks Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_42 -> LENGTH _picks_1
[i]Type for REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_68 = CONVERT REF_42 to uint32
Converting REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_68

Name: TMP_68 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
picksLength_1(uint32) := TMP_68(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for picksLength

Name: picksLength Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_43(uint32[16]) -> _prizeDistribution_1.tiers
MEMBER
init
end
init
end
init
end
[i]Type for REF_43

Name: _prizeDistribution.tiers Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: tiers
init
end
Finance type key: (-1, -1)
XXXX
REF_44 -> LENGTH REF_43
[i]Type for REF_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_70 = new uint256[](REF_44)
[i]Type for TMP_70

Name: TMP_70 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[]) := TMP_70(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 1
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_45(uint32) -> _prizeDistribution_1.maxPicksPerUser
MEMBER
init
end
init
end
init
end
[i]Type for REF_45

Name: _prizeDistribution.maxPicksPerUser Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: maxPicksPerUser
init
end
Finance type key: (-1, -1)
XXXX
TMP_71(bool) = picksLength_1 <= REF_45
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_71

Name: TMP_71 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,DrawCalc/exceeds-max-user-picks)
[i]Type for TMP_72

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 1
Globalname: index
End popogation
index_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: index, Num: 2
Globalname: index
Name: index, Num: 2
Globalname: index
End popogation
Name: index, Num: 2
Globalname: index

Name: index Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
index_2(uint32) := ϕ(['index_3', 'index_1'])
Phi
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = index_2 < picksLength_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_73

Name: TMP_73 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_46(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_46

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_74(bool) = REF_46 < _totalUserPicks_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_74

Name: TMP_74 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,DrawCalc/insufficient-user-picks)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = index_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeFraction, Num: 1
Globalname: prizeFraction
End popogation
prizeFraction_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_47(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_47

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_77(uint32) = index_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_77

Name: TMP_77 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint64) -> _picks_1[TMP_77]
INDEX
[i]Type for REF_48

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_78(bool) = REF_47 > REF_48
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,DrawCalc/picks-ascending)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
End popogation
REF_50(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_50

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_80(bytes) = SOLIDITY_CALL abi.encode()(_userRandomNumber_1,REF_50)
[i]Type for TMP_80

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_80)
[i]Type for TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82 = CONVERT TMP_81 to uint256
Converting TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_82

Name: TMP_82 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
randomNumberThisPick_1(uint256) := TMP_82(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for randomNumberThisPick

Name: randomNumberThisPick Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
End popogation
TMP_88(uint256[]) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFractions(IPrizeDistributionBuffer.PrizeDistribution,uint8)(_prizeDistribution_1,maxWinningTierIndex_1)
init
end
init
end
init
end
[i]Type for TMP_88

Name: TMP_88 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeTiersFractions_1(uint256[]) := TMP_88(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeTiersFractions

Name: prizeTiersFractions Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_83(uint8) = INTERNAL_CALL, DrawCalculator._calculateTierIndex(uint256,uint256,uint256[])(randomNumberThisPick_1,_winningRandomNumber_1,masks_1)
init
end
init
end
init
end
[i]Type for TMP_83

Name: TMP_83 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tiersIndex_1(uint8) := TMP_83(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tiersIndex

Name: tiersIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_84(bool) = tiersIndex_1 < TIERS_LENGTH_3
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_84

Name: TMP_84 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 1
Globalname: prizeCountIndex
End popogation
prizeCountIndex_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_85(bool) = tiersIndex_1 > maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_85

Name: TMP_85 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: maxWinningTierIndex, Num: 3
Globalname: maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
maxWinningTierIndex_3(uint8) := ϕ(['maxWinningTierIndex_1', 'maxWinningTierIndex_2'])
Phi
init
end
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
End popogation
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_51(uint256) -> _prizeCounts_1[tiersIndex_1]
INDEX
[i]Type for REF_51

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_86(uint256) := REF_51(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_86

Name: TMP_86 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_2(uint256[]) := ϕ(['_prizeCounts_1'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_51(-> _prizeCounts_2) = REF_51 (c)+ 1
init
end
init
end
lnorm: 0 rnorm: 0
init
end
[i]Type for REF_51

Name: REF_51 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 2
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_2(uint8) := tiersIndex_1(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: _prizeCounts, Num: 3
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeCounts_3(uint256[]) := ϕ(['_prizeCounts_1', '_prizeCounts_2'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
End popogation
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Phid
prizeCountIndex_2(uint256) := ϕ(['prizeCountIndex_3', 'prizeCountIndex_1'])
Phi
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
TMP_89(bool) = prizeCountIndex_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_89

Name: TMP_89 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 3
Globalname: index
End popogation
TMP_87(uint32) := index_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_87

Name: TMP_87 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
index_3(uint32) = index_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_52(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_52

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_90(bool) = REF_52 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_90

Name: TMP_90 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: prizeFraction, Num: 3
Globalname: prizeFraction

Name: prizeFraction Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
prizeFraction_3(uint256) := ϕ(['prizeFraction_1', 'prizeFraction_2'])
Phi
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeFraction, Num: 2
Globalname: prizeFraction
End popogation
REF_53(uint256) -> prizeTiersFractions_1[prizeCountIndex_2]
INDEX
[i]Type for REF_53

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_54(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_54

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_91(uint256) = REF_53 (c)* REF_54
testing mul...
init
end
init
end

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_91

Name: TMP_91 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeFraction_2(uint256) = prizeFraction_1 (c)+ TMP_91
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prize, Num: 1
Globalname: prize
End popogation
REF_55(uint256) -> _prizeDistribution_1.prize
MEMBER
init
end
init
end
init
end
[i]Type for REF_55

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: prize
init
end
Finance type key: (-1, -1)
XXXX
TMP_93(uint256) = prizeFraction_1 (c)* REF_55
testing mul...
init
end
init
end

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_93

Name: TMP_93 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(uint256) = TMP_93 (c)/ 1000000000
init
end
init
end
lnorm: u rnorm: 9
init
end
init
end
init
end
lnorm: u rnorm: 9
init
end
[i]Type for TMP_94

Name: TMP_94 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prize_1(uint256) := TMP_94(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prize

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 3
Globalname: prizeCountIndex
End popogation
TMP_92(uint256) := prizeCountIndex_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_92

Name: TMP_92 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
XXXX
prizeCountIndex_3(uint256) = prizeCountIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
prizeCounts_1(uint256[]) := _prizeCounts_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prize_1,prizeCounts_1
RETURN
init
end

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TUPLE_1

Name: TUPLE_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(uint256)= UNPACK TUPLE_1 index: 0 
([-1], [-1], -9, 'u', 'u', -1)
[i]Type for REF_13

Name: REF_13 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_14(uint256[])= UNPACK TUPLE_1 index: 1 
([], [], 'u', 'u', 'u', -1)
[i]Type for REF_14

Name: REF_14 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: drawIndex, Num: 3
Globalname: drawIndex
End popogation
TMP_44(uint32) := drawIndex_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_44

Name: TMP_44 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
drawIndex_3(uint32) = drawIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
TMP_45(bytes) = SOLIDITY_CALL abi.encode()(_prizeCounts_1)
[i]Type for TMP_45

Name: TMP_45 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeCounts_1(bytes) := TMP_45(bytes)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
Name: prizesAwardable, Num: 1
Globalname: prizesAwardable
End popogation
prizesAwardable_1(uint256[]) := _prizesAwardable_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizesAwardable

Name: prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizesAwardable, Num: 1
Globalname: prizesAwardable
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prizesAwardable_1,prizeCounts_1
RETURN
init
end

Name: prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances

Name: _normalizedUserBalances_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _draws Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: winningRandomNumber
Finance Type: undef
Phid
Name: _pickIndicesForDraws, Num: 1
Globalname: _pickIndicesForDraws

Name: _pickIndicesForDraws_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_normalizedUserBalances_1(uint256[]) := ϕ(['userBalances_1'])
Phi
init
end
[i]Type for _normalizedUserBalances

Name: _normalizedUserBalances Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_draws_1(IDrawBeacon.Draw[]) := ϕ(['draws_1'])
Phi
[i]Type for _draws

Name: _draws Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: winningRandomNumber
Finance Type: undef
XXXX
_pickIndicesForDraws_1(uint64[][]) := ϕ(['pickIndices_1'])
Phi
init
end
[i]Type for _pickIndicesForDraws

Name: _pickIndicesForDraws Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := ϕ(['_prizeDistributions_1'])
Phi
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
End popogation
REF_8 -> LENGTH _normalizedUserBalances_1
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_39 = new uint256[](REF_8)
[i]Type for TMP_39

Name: TMP_39 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizesAwardable_1(uint256[]) := TMP_39(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizesAwardable

Name: _prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_9 -> LENGTH _normalizedUserBalances_1
[i]Type for REF_9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_41 = new uint256[][](REF_9)
[i]Type for TMP_41

Name: TMP_41 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[][]) := TMP_41(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
drawIndex_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
drawIndex_2(uint32) := ϕ(['drawIndex_3', 'drawIndex_1'])
Phi
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_10 -> LENGTH _draws_1
[i]Type for REF_10

Name: REF_10 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_42(bool) = drawIndex_2 < REF_10
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_42

Name: TMP_42 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
End popogation
REF_11(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[drawIndex_2]
INDEX
[i]Type for REF_11

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_12(uint256) -> _normalizedUserBalances_1[drawIndex_2]
INDEX
[i]Type for REF_12

Name: _normalizedUserBalances_1 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_43(uint64) = INTERNAL_CALL, DrawCalculator._calculateNumberOfUserPicks(IPrizeDistributionBuffer.PrizeDistribution,uint256)(REF_11,REF_12)
init
end
init
end
init
end
[i]Type for TMP_43

Name: TMP_43 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUserPicks_1(uint64) := TMP_43(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for totalUserPicks

Name: totalUserPicks Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _pickIndicesForDraws, Num: 1
Globalname: _pickIndicesForDraws
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
End popogation
REF_13(uint256) -> _prizesAwardable_1[drawIndex_2]
INDEX
[i]Type for REF_13

Name: _prizesAwardable Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_14(uint256[]) -> _prizeCounts_1[drawIndex_2]
INDEX
[i]Type for REF_14

Name: _prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_15(IDrawBeacon.Draw) -> _draws_1[drawIndex_2]
INDEX
[i]Type for REF_15

Name: _draws Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: winningRandomNumber
Finance Type: undef
Root: None, Field: None
XXXX
REF_16(uint256) -> REF_15.winningRandomNumber
MEMBER
init
end
init
end
init
end
[i]Type for REF_16

Name: _draws.winningRandomNumber Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_15, Field: winningRandomNumber
init
end
Finance type key: (-1, -1)
XXXX
REF_17(uint64[]) -> _pickIndicesForDraws_1[drawIndex_2]
INDEX
[i]Type for REF_17

Name: _pickIndicesForDraws_1 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_18(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[drawIndex_2]
INDEX
[i]Type for REF_18

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TUPLE_1(uint256,uint256[]) = INTERNAL_CALL, DrawCalculator._calculate(uint256,uint256,bytes32,uint64[],IPrizeDistributionBuffer.PrizeDistribution)(REF_16,totalUserPicks_1,_userRandomNumber_1,REF_17,REF_18)
init
end
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _winningRandomNumber Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _totalUserPicks Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _userRandomNumber Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _picks Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: _prizeDistribution Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _winningRandomNumber_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _totalUserPicks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _picks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistribution_1 Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
Phid

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_winningRandomNumber_1(uint256) := ϕ(['REF_16'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalUserPicks_1(uint256) := ϕ(['totalUserPicks_1'])
Phi
[i]Type for _totalUserPicks

Name: _totalUserPicks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_picks_1(uint64[]) := ϕ(['REF_17'])
Phi
[i]Type for _picks

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['REF_18'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
XXXX
TIERS_LENGTH_1(uint8) := ϕ(['TIERS_LENGTH_0', 'TIERS_LENGTH_3', 'TIERS_LENGTH_2'])
Phi
[i]Type for TIERS_LENGTH

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
TMP_67(uint256[]) = INTERNAL_CALL, DrawCalculator._createBitMasks(IPrizeDistributionBuffer.PrizeDistribution)(_prizeDistribution_1)
init
end
init
end
[i]Type for TMP_67

Name: TMP_67 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_1(uint256[]) := TMP_67(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masks

Name: masks Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_42 -> LENGTH _picks_1
[i]Type for REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_68 = CONVERT REF_42 to uint32
Converting REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_68

Name: TMP_68 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
picksLength_1(uint32) := TMP_68(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for picksLength

Name: picksLength Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_43(uint32[16]) -> _prizeDistribution_1.tiers
MEMBER
init
end
init
end
init
end
[i]Type for REF_43

Name: _prizeDistribution.tiers Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: tiers
init
end
Finance type key: (-1, -1)
XXXX
REF_44 -> LENGTH REF_43
[i]Type for REF_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_70 = new uint256[](REF_44)
[i]Type for TMP_70

Name: TMP_70 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[]) := TMP_70(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 1
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_45(uint32) -> _prizeDistribution_1.maxPicksPerUser
MEMBER
init
end
init
end
init
end
[i]Type for REF_45

Name: _prizeDistribution.maxPicksPerUser Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: maxPicksPerUser
init
end
Finance type key: (-1, -1)
XXXX
TMP_71(bool) = picksLength_1 <= REF_45
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_71

Name: TMP_71 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,DrawCalc/exceeds-max-user-picks)
[i]Type for TMP_72

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 1
Globalname: index
End popogation
index_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: index, Num: 2
Globalname: index
Name: index, Num: 2
Globalname: index
End popogation
Name: index, Num: 2
Globalname: index

Name: index Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
index_2(uint32) := ϕ(['index_3', 'index_1'])
Phi
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = index_2 < picksLength_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_73

Name: TMP_73 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_46(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_46

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_74(bool) = REF_46 < _totalUserPicks_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_74

Name: TMP_74 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,DrawCalc/insufficient-user-picks)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = index_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeFraction, Num: 1
Globalname: prizeFraction
End popogation
prizeFraction_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_47(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_47

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_77(uint32) = index_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_77

Name: TMP_77 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint64) -> _picks_1[TMP_77]
INDEX
[i]Type for REF_48

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_78(bool) = REF_47 > REF_48
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,DrawCalc/picks-ascending)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
End popogation
REF_50(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_50

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_80(bytes) = SOLIDITY_CALL abi.encode()(_userRandomNumber_1,REF_50)
[i]Type for TMP_80

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_80)
[i]Type for TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82 = CONVERT TMP_81 to uint256
Converting TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_82

Name: TMP_82 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
randomNumberThisPick_1(uint256) := TMP_82(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for randomNumberThisPick

Name: randomNumberThisPick Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
End popogation
TMP_88(uint256[]) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFractions(IPrizeDistributionBuffer.PrizeDistribution,uint8)(_prizeDistribution_1,maxWinningTierIndex_1)
init
end
init
end
init
end
[i]Type for TMP_88

Name: TMP_88 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeTiersFractions_1(uint256[]) := TMP_88(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeTiersFractions

Name: prizeTiersFractions Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_83(uint8) = INTERNAL_CALL, DrawCalculator._calculateTierIndex(uint256,uint256,uint256[])(randomNumberThisPick_1,_winningRandomNumber_1,masks_1)
init
end
init
end
init
end
[i]Type for TMP_83

Name: TMP_83 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tiersIndex_1(uint8) := TMP_83(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tiersIndex

Name: tiersIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_84(bool) = tiersIndex_1 < TIERS_LENGTH_3
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_84

Name: TMP_84 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 1
Globalname: prizeCountIndex
End popogation
prizeCountIndex_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_85(bool) = tiersIndex_1 > maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_85

Name: TMP_85 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: maxWinningTierIndex, Num: 3
Globalname: maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
maxWinningTierIndex_3(uint8) := ϕ(['maxWinningTierIndex_1', 'maxWinningTierIndex_2'])
Phi
init
end
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
End popogation
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_51(uint256) -> _prizeCounts_1[tiersIndex_1]
INDEX
[i]Type for REF_51

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_86(uint256) := REF_51(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_86

Name: TMP_86 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_2(uint256[]) := ϕ(['_prizeCounts_1'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_51(-> _prizeCounts_2) = REF_51 (c)+ 1
init
end
init
end
lnorm: 0 rnorm: 0
init
end
[i]Type for REF_51

Name: REF_51 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 2
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_2(uint8) := tiersIndex_1(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: _prizeCounts, Num: 3
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeCounts_3(uint256[]) := ϕ(['_prizeCounts_1', '_prizeCounts_2'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
End popogation
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 3
Fields: 
Finance Type: undef
Phid
prizeCountIndex_2(uint256) := ϕ(['prizeCountIndex_3', 'prizeCountIndex_1'])
Phi
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
TMP_89(bool) = prizeCountIndex_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_89

Name: TMP_89 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 3
Globalname: index
End popogation
TMP_87(uint32) := index_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_87

Name: TMP_87 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
index_3(uint32) = index_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_52(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_52

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_90(bool) = REF_52 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_90

Name: TMP_90 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: prizeFraction, Num: 3
Globalname: prizeFraction

Name: prizeFraction Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
prizeFraction_3(uint256) := ϕ(['prizeFraction_1', 'prizeFraction_2'])
Phi
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeFraction, Num: 2
Globalname: prizeFraction
End popogation
REF_53(uint256) -> prizeTiersFractions_1[prizeCountIndex_2]
INDEX
[i]Type for REF_53

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_54(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_54

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_91(uint256) = REF_53 (c)* REF_54
testing mul...
init
end
init
end

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_91

Name: TMP_91 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeFraction_2(uint256) = prizeFraction_1 (c)+ TMP_91
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prize, Num: 1
Globalname: prize
End popogation
REF_55(uint256) -> _prizeDistribution_1.prize
MEMBER
init
end
init
end
init
end
[i]Type for REF_55

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: prize
init
end
Finance type key: (-1, -1)
XXXX
TMP_93(uint256) = prizeFraction_1 (c)* REF_55
testing mul...
init
end
init
end

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_93

Name: TMP_93 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(uint256) = TMP_93 (c)/ 1000000000
init
end
init
end
lnorm: u rnorm: 9
init
end
init
end
init
end
lnorm: u rnorm: 9
init
end
[i]Type for TMP_94

Name: TMP_94 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prize_1(uint256) := TMP_94(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prize

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 3
Globalname: prizeCountIndex
End popogation
TMP_92(uint256) := prizeCountIndex_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_92

Name: TMP_92 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
XXXX
prizeCountIndex_3(uint256) = prizeCountIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 5
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
prizeCounts_1(uint256[]) := _prizeCounts_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prize_1,prizeCounts_1
RETURN
init
end

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _winningRandomNumber_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _totalUserPicks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _picks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistribution_1 Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
Phid

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_winningRandomNumber_1(uint256) := ϕ(['REF_16'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalUserPicks_1(uint256) := ϕ(['totalUserPicks_1'])
Phi
[i]Type for _totalUserPicks

Name: _totalUserPicks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_picks_1(uint64[]) := ϕ(['REF_17'])
Phi
[i]Type for _picks

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['REF_18'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
XXXX
TIERS_LENGTH_1(uint8) := ϕ(['TIERS_LENGTH_0', 'TIERS_LENGTH_3', 'TIERS_LENGTH_2'])
Phi
[i]Type for TIERS_LENGTH

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
TMP_67(uint256[]) = INTERNAL_CALL, DrawCalculator._createBitMasks(IPrizeDistributionBuffer.PrizeDistribution)(_prizeDistribution_1)
init
end
init
end
[i]Type for TMP_67

Name: TMP_67 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_1(uint256[]) := TMP_67(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masks

Name: masks Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_42 -> LENGTH _picks_1
[i]Type for REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_68 = CONVERT REF_42 to uint32
Converting REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_68

Name: TMP_68 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
picksLength_1(uint32) := TMP_68(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for picksLength

Name: picksLength Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_43(uint32[16]) -> _prizeDistribution_1.tiers
MEMBER
init
end
init
end
init
end
[i]Type for REF_43

Name: _prizeDistribution.tiers Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: tiers
init
end
Finance type key: (-1, -1)
XXXX
REF_44 -> LENGTH REF_43
[i]Type for REF_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_70 = new uint256[](REF_44)
[i]Type for TMP_70

Name: TMP_70 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[]) := TMP_70(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 1
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_45(uint32) -> _prizeDistribution_1.maxPicksPerUser
MEMBER
init
end
init
end
init
end
[i]Type for REF_45

Name: _prizeDistribution.maxPicksPerUser Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: maxPicksPerUser
init
end
Finance type key: (-1, -1)
XXXX
TMP_71(bool) = picksLength_1 <= REF_45
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_71

Name: TMP_71 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,DrawCalc/exceeds-max-user-picks)
[i]Type for TMP_72

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 1
Globalname: index
End popogation
index_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: index, Num: 2
Globalname: index
Name: index, Num: 2
Globalname: index
End popogation
Name: index, Num: 2
Globalname: index

Name: index Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
index_2(uint32) := ϕ(['index_3', 'index_1'])
Phi
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = index_2 < picksLength_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_73

Name: TMP_73 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_46(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_46

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_74(bool) = REF_46 < _totalUserPicks_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_74

Name: TMP_74 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,DrawCalc/insufficient-user-picks)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = index_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeFraction, Num: 1
Globalname: prizeFraction
End popogation
prizeFraction_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_47(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_47

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_77(uint32) = index_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_77

Name: TMP_77 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint64) -> _picks_1[TMP_77]
INDEX
[i]Type for REF_48

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_78(bool) = REF_47 > REF_48
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,DrawCalc/picks-ascending)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
End popogation
REF_50(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_50

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_80(bytes) = SOLIDITY_CALL abi.encode()(_userRandomNumber_1,REF_50)
[i]Type for TMP_80

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_80)
[i]Type for TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82 = CONVERT TMP_81 to uint256
Converting TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_82

Name: TMP_82 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
randomNumberThisPick_1(uint256) := TMP_82(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for randomNumberThisPick

Name: randomNumberThisPick Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
End popogation
TMP_88(uint256[]) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFractions(IPrizeDistributionBuffer.PrizeDistribution,uint8)(_prizeDistribution_1,maxWinningTierIndex_1)
init
end
init
end
init
end
[i]Type for TMP_88

Name: TMP_88 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeTiersFractions_1(uint256[]) := TMP_88(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeTiersFractions

Name: prizeTiersFractions Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_83(uint8) = INTERNAL_CALL, DrawCalculator._calculateTierIndex(uint256,uint256,uint256[])(randomNumberThisPick_1,_winningRandomNumber_1,masks_1)
init
end
init
end
init
end
[i]Type for TMP_83

Name: TMP_83 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tiersIndex_1(uint8) := TMP_83(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tiersIndex

Name: tiersIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_84(bool) = tiersIndex_1 < TIERS_LENGTH_3
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_84

Name: TMP_84 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 1
Globalname: prizeCountIndex
End popogation
prizeCountIndex_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_85(bool) = tiersIndex_1 > maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_85

Name: TMP_85 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: maxWinningTierIndex, Num: 3
Globalname: maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
maxWinningTierIndex_3(uint8) := ϕ(['maxWinningTierIndex_1', 'maxWinningTierIndex_2'])
Phi
init
end
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
End popogation
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_51(uint256) -> _prizeCounts_1[tiersIndex_1]
INDEX
[i]Type for REF_51

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_86(uint256) := REF_51(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_86

Name: TMP_86 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_2(uint256[]) := ϕ(['_prizeCounts_1'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_51(-> _prizeCounts_2) = REF_51 (c)+ 1
init
end
init
end
lnorm: 0 rnorm: 0
init
end
[i]Type for REF_51

Name: REF_51 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 2
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_2(uint8) := tiersIndex_1(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: _prizeCounts, Num: 3
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeCounts_3(uint256[]) := ϕ(['_prizeCounts_1', '_prizeCounts_2'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
End popogation
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 4
Fields: 
Finance Type: undef
Phid
prizeCountIndex_2(uint256) := ϕ(['prizeCountIndex_3', 'prizeCountIndex_1'])
Phi
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5
Fields: 
Finance Type: undef
XXXX
TMP_89(bool) = prizeCountIndex_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_89

Name: TMP_89 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 3
Globalname: index
End popogation
TMP_87(uint32) := index_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_87

Name: TMP_87 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
index_3(uint32) = index_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_52(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_52

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_90(bool) = REF_52 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_90

Name: TMP_90 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: prizeFraction, Num: 3
Globalname: prizeFraction

Name: prizeFraction Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
prizeFraction_3(uint256) := ϕ(['prizeFraction_1', 'prizeFraction_2'])
Phi
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeFraction, Num: 2
Globalname: prizeFraction
End popogation
REF_53(uint256) -> prizeTiersFractions_1[prizeCountIndex_2]
INDEX
[i]Type for REF_53

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_54(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_54

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_91(uint256) = REF_53 (c)* REF_54
testing mul...
init
end
init
end

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_91

Name: TMP_91 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeFraction_2(uint256) = prizeFraction_1 (c)+ TMP_91
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prize, Num: 1
Globalname: prize
End popogation
REF_55(uint256) -> _prizeDistribution_1.prize
MEMBER
init
end
init
end
init
end
[i]Type for REF_55

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: prize
init
end
Finance type key: (-1, -1)
XXXX
TMP_93(uint256) = prizeFraction_1 (c)* REF_55
testing mul...
init
end
init
end

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_93

Name: TMP_93 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(uint256) = TMP_93 (c)/ 1000000000
init
end
init
end
lnorm: u rnorm: 9
init
end
init
end
init
end
lnorm: u rnorm: 9
init
end
[i]Type for TMP_94

Name: TMP_94 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prize_1(uint256) := TMP_94(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prize

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 3
Globalname: prizeCountIndex
End popogation
TMP_92(uint256) := prizeCountIndex_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_92

Name: TMP_92 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 5
Fields: 
Finance Type: undef
XXXX
prizeCountIndex_3(uint256) = prizeCountIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 6
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
prizeCounts_1(uint256[]) := _prizeCounts_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prize_1,prizeCounts_1
RETURN
init
end

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TUPLE_1

Name: TUPLE_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(uint256)= UNPACK TUPLE_1 index: 0 
([-1], [-1], -9, 'u', 'u', -1)
[i]Type for REF_13

Name: REF_13 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_14(uint256[])= UNPACK TUPLE_1 index: 1 
([], [], 'u', 'u', 'u', -1)
[i]Type for REF_14

Name: REF_14 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_44(uint32) := drawIndex_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_44

Name: TMP_44 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
drawIndex_3(uint32) = drawIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
TMP_45(bytes) = SOLIDITY_CALL abi.encode()(_prizeCounts_1)
[i]Type for TMP_45

Name: TMP_45 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeCounts_1(bytes) := TMP_45(bytes)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
Name: prizesAwardable, Num: 1
Globalname: prizesAwardable
End popogation
prizesAwardable_1(uint256[]) := _prizesAwardable_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizesAwardable

Name: prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizesAwardable, Num: 1
Globalname: prizesAwardable
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prizesAwardable_1,prizeCounts_1
RETURN
init
end

Name: prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances

Name: _normalizedUserBalances_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _draws Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: winningRandomNumber
Finance Type: undef
Phid
Name: _pickIndicesForDraws, Num: 1
Globalname: _pickIndicesForDraws

Name: _pickIndicesForDraws_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_normalizedUserBalances_1(uint256[]) := ϕ(['userBalances_1'])
Phi
init
end
[i]Type for _normalizedUserBalances

Name: _normalizedUserBalances Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_draws_1(IDrawBeacon.Draw[]) := ϕ(['draws_1'])
Phi
[i]Type for _draws

Name: _draws Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: winningRandomNumber
Finance Type: undef
XXXX
_pickIndicesForDraws_1(uint64[][]) := ϕ(['pickIndices_1'])
Phi
init
end
[i]Type for _pickIndicesForDraws

Name: _pickIndicesForDraws Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := ϕ(['_prizeDistributions_1'])
Phi
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
End popogation
REF_8 -> LENGTH _normalizedUserBalances_1
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_39 = new uint256[](REF_8)
[i]Type for TMP_39

Name: TMP_39 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizesAwardable_1(uint256[]) := TMP_39(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizesAwardable

Name: _prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_9 -> LENGTH _normalizedUserBalances_1
[i]Type for REF_9

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_41 = new uint256[][](REF_9)
[i]Type for TMP_41

Name: TMP_41 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[][]) := TMP_41(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
drawIndex_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
drawIndex_2(uint32) := ϕ(['drawIndex_3', 'drawIndex_1'])
Phi
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_10 -> LENGTH _draws_1
[i]Type for REF_10

Name: REF_10 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_42(bool) = drawIndex_2 < REF_10
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_42

Name: TMP_42 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _normalizedUserBalances, Num: 1
Globalname: _normalizedUserBalances
End popogation
REF_11(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[drawIndex_2]
INDEX
[i]Type for REF_11

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_12(uint256) -> _normalizedUserBalances_1[drawIndex_2]
INDEX
[i]Type for REF_12

Name: _normalizedUserBalances_1 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_43(uint64) = INTERNAL_CALL, DrawCalculator._calculateNumberOfUserPicks(IPrizeDistributionBuffer.PrizeDistribution,uint256)(REF_11,REF_12)
init
end
init
end
init
end
[i]Type for TMP_43

Name: TMP_43 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalUserPicks_1(uint64) := TMP_43(uint64)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for totalUserPicks

Name: totalUserPicks Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _pickIndicesForDraws, Num: 1
Globalname: _pickIndicesForDraws
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
End popogation
REF_13(uint256) -> _prizesAwardable_1[drawIndex_2]
INDEX
[i]Type for REF_13

Name: _prizesAwardable Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_14(uint256[]) -> _prizeCounts_1[drawIndex_2]
INDEX
[i]Type for REF_14

Name: _prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_15(IDrawBeacon.Draw) -> _draws_1[drawIndex_2]
INDEX
[i]Type for REF_15

Name: _draws Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: winningRandomNumber
Finance Type: undef
Root: None, Field: None
XXXX
REF_16(uint256) -> REF_15.winningRandomNumber
MEMBER
init
end
init
end
init
end
[i]Type for REF_16

Name: _draws.winningRandomNumber Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_15, Field: winningRandomNumber
init
end
Finance type key: (-1, -1)
XXXX
REF_17(uint64[]) -> _pickIndicesForDraws_1[drawIndex_2]
INDEX
[i]Type for REF_17

Name: _pickIndicesForDraws_1 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_18(IPrizeDistributionBuffer.PrizeDistribution) -> _prizeDistributions_1[drawIndex_2]
INDEX
[i]Type for REF_18

Name: _prizeDistributions Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TUPLE_1(uint256,uint256[]) = INTERNAL_CALL, DrawCalculator._calculate(uint256,uint256,bytes32,uint64[],IPrizeDistributionBuffer.PrizeDistribution)(REF_16,totalUserPicks_1,_userRandomNumber_1,REF_17,REF_18)
init
end
init
end
init
end
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _winningRandomNumber Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _totalUserPicks Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _userRandomNumber Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _picks Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, None, 'u']

Name: _prizeDistribution Function: None
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _winningRandomNumber_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _totalUserPicks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _picks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistribution_1 Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
Phid

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_winningRandomNumber_1(uint256) := ϕ(['REF_16'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalUserPicks_1(uint256) := ϕ(['totalUserPicks_1'])
Phi
[i]Type for _totalUserPicks

Name: _totalUserPicks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_picks_1(uint64[]) := ϕ(['REF_17'])
Phi
[i]Type for _picks

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['REF_18'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
XXXX
TIERS_LENGTH_1(uint8) := ϕ(['TIERS_LENGTH_0', 'TIERS_LENGTH_3', 'TIERS_LENGTH_2'])
Phi
[i]Type for TIERS_LENGTH

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
TMP_67(uint256[]) = INTERNAL_CALL, DrawCalculator._createBitMasks(IPrizeDistributionBuffer.PrizeDistribution)(_prizeDistribution_1)
init
end
init
end
[i]Type for TMP_67

Name: TMP_67 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_1(uint256[]) := TMP_67(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masks

Name: masks Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_42 -> LENGTH _picks_1
[i]Type for REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_68 = CONVERT REF_42 to uint32
Converting REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_68

Name: TMP_68 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
picksLength_1(uint32) := TMP_68(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for picksLength

Name: picksLength Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_43(uint32[16]) -> _prizeDistribution_1.tiers
MEMBER
init
end
init
end
init
end
[i]Type for REF_43

Name: _prizeDistribution.tiers Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: tiers
init
end
Finance type key: (-1, -1)
XXXX
REF_44 -> LENGTH REF_43
[i]Type for REF_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_70 = new uint256[](REF_44)
[i]Type for TMP_70

Name: TMP_70 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[]) := TMP_70(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 1
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_45(uint32) -> _prizeDistribution_1.maxPicksPerUser
MEMBER
init
end
init
end
init
end
[i]Type for REF_45

Name: _prizeDistribution.maxPicksPerUser Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: maxPicksPerUser
init
end
Finance type key: (-1, -1)
XXXX
TMP_71(bool) = picksLength_1 <= REF_45
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_71

Name: TMP_71 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,DrawCalc/exceeds-max-user-picks)
[i]Type for TMP_72

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 1
Globalname: index
End popogation
index_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: index, Num: 2
Globalname: index
Name: index, Num: 2
Globalname: index
End popogation
Name: index, Num: 2
Globalname: index

Name: index Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
index_2(uint32) := ϕ(['index_3', 'index_1'])
Phi
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = index_2 < picksLength_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_73

Name: TMP_73 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_46(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_46

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_74(bool) = REF_46 < _totalUserPicks_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_74

Name: TMP_74 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,DrawCalc/insufficient-user-picks)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = index_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeFraction, Num: 1
Globalname: prizeFraction
End popogation
prizeFraction_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_47(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_47

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_77(uint32) = index_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_77

Name: TMP_77 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint64) -> _picks_1[TMP_77]
INDEX
[i]Type for REF_48

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_78(bool) = REF_47 > REF_48
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,DrawCalc/picks-ascending)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
End popogation
REF_50(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_50

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_80(bytes) = SOLIDITY_CALL abi.encode()(_userRandomNumber_1,REF_50)
[i]Type for TMP_80

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_80)
[i]Type for TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82 = CONVERT TMP_81 to uint256
Converting TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_82

Name: TMP_82 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
randomNumberThisPick_1(uint256) := TMP_82(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for randomNumberThisPick

Name: randomNumberThisPick Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
End popogation
TMP_88(uint256[]) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFractions(IPrizeDistributionBuffer.PrizeDistribution,uint8)(_prizeDistribution_1,maxWinningTierIndex_1)
init
end
init
end
init
end
[i]Type for TMP_88

Name: TMP_88 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeTiersFractions_1(uint256[]) := TMP_88(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeTiersFractions

Name: prizeTiersFractions Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_83(uint8) = INTERNAL_CALL, DrawCalculator._calculateTierIndex(uint256,uint256,uint256[])(randomNumberThisPick_1,_winningRandomNumber_1,masks_1)
init
end
init
end
init
end
[i]Type for TMP_83

Name: TMP_83 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tiersIndex_1(uint8) := TMP_83(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tiersIndex

Name: tiersIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_84(bool) = tiersIndex_1 < TIERS_LENGTH_3
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_84

Name: TMP_84 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 1
Globalname: prizeCountIndex
End popogation
prizeCountIndex_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_85(bool) = tiersIndex_1 > maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_85

Name: TMP_85 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: maxWinningTierIndex, Num: 3
Globalname: maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
maxWinningTierIndex_3(uint8) := ϕ(['maxWinningTierIndex_1', 'maxWinningTierIndex_2'])
Phi
init
end
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
End popogation
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_51(uint256) -> _prizeCounts_1[tiersIndex_1]
INDEX
[i]Type for REF_51

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_86(uint256) := REF_51(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_86

Name: TMP_86 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_2(uint256[]) := ϕ(['_prizeCounts_1'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_51(-> _prizeCounts_2) = REF_51 (c)+ 1
init
end
init
end
lnorm: 0 rnorm: 0
init
end
[i]Type for REF_51

Name: REF_51 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 2
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_2(uint8) := tiersIndex_1(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: _prizeCounts, Num: 3
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeCounts_3(uint256[]) := ϕ(['_prizeCounts_1', '_prizeCounts_2'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
End popogation
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 5
Fields: 
Finance Type: undef
Phid
prizeCountIndex_2(uint256) := ϕ(['prizeCountIndex_3', 'prizeCountIndex_1'])
Phi
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 6
Fields: 
Finance Type: undef
XXXX
TMP_89(bool) = prizeCountIndex_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_89

Name: TMP_89 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 3
Globalname: index
End popogation
TMP_87(uint32) := index_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_87

Name: TMP_87 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
index_3(uint32) = index_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_52(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_52

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_90(bool) = REF_52 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_90

Name: TMP_90 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: prizeFraction, Num: 3
Globalname: prizeFraction

Name: prizeFraction Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
prizeFraction_3(uint256) := ϕ(['prizeFraction_1', 'prizeFraction_2'])
Phi
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeFraction, Num: 2
Globalname: prizeFraction
End popogation
REF_53(uint256) -> prizeTiersFractions_1[prizeCountIndex_2]
INDEX
[i]Type for REF_53

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_54(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_54

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_91(uint256) = REF_53 (c)* REF_54
testing mul...
init
end
init
end

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_91

Name: TMP_91 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeFraction_2(uint256) = prizeFraction_1 (c)+ TMP_91
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prize, Num: 1
Globalname: prize
End popogation
REF_55(uint256) -> _prizeDistribution_1.prize
MEMBER
init
end
init
end
init
end
[i]Type for REF_55

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: prize
init
end
Finance type key: (-1, -1)
XXXX
TMP_93(uint256) = prizeFraction_1 (c)* REF_55
testing mul...
init
end
init
end

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_93

Name: TMP_93 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(uint256) = TMP_93 (c)/ 1000000000
init
end
init
end
lnorm: u rnorm: 9
init
end
init
end
init
end
lnorm: u rnorm: 9
init
end
[i]Type for TMP_94

Name: TMP_94 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prize_1(uint256) := TMP_94(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prize

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 3
Globalname: prizeCountIndex
End popogation
TMP_92(uint256) := prizeCountIndex_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_92

Name: TMP_92 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 6
Fields: 
Finance Type: undef
XXXX
prizeCountIndex_3(uint256) = prizeCountIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 7
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
prizeCounts_1(uint256[]) := _prizeCounts_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prize_1,prizeCounts_1
RETURN
init
end

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _winningRandomNumber_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _totalUserPicks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber

Name: _userRandomNumber_1 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _picks_1 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: _prizeDistribution_1 Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
Phid

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_winningRandomNumber_1(uint256) := ϕ(['REF_16'])
Phi
[i]Type for _winningRandomNumber

Name: _winningRandomNumber Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_totalUserPicks_1(uint256) := ϕ(['totalUserPicks_1'])
Phi
[i]Type for _totalUserPicks

Name: _totalUserPicks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := ϕ(['_userRandomNumber_1'])
Phi
init
end
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_picks_1(uint64[]) := ϕ(['REF_17'])
Phi
[i]Type for _picks

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistribution_1(IPrizeDistributionBuffer.PrizeDistribution) := ϕ(['REF_18'])
Phi
[i]Type for _prizeDistribution

Name: _prizeDistribution Function: _calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: tiers, maxPicksPerUser, prize
Finance Type: undef
XXXX
TIERS_LENGTH_1(uint8) := ϕ(['TIERS_LENGTH_0', 'TIERS_LENGTH_3', 'TIERS_LENGTH_2'])
Phi
[i]Type for TIERS_LENGTH

Name: TIERS_LENGTH Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
End popogation
TMP_67(uint256[]) = INTERNAL_CALL, DrawCalculator._createBitMasks(IPrizeDistributionBuffer.PrizeDistribution)(_prizeDistribution_1)
init
end
init
end
[i]Type for TMP_67

Name: TMP_67 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
masks_1(uint256[]) := TMP_67(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for masks

Name: masks Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_42 -> LENGTH _picks_1
[i]Type for REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_68 = CONVERT REF_42 to uint32
Converting REF_42

Name: REF_42 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_68

Name: TMP_68 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
picksLength_1(uint32) := TMP_68(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for picksLength

Name: picksLength Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_43(uint32[16]) -> _prizeDistribution_1.tiers
MEMBER
init
end
init
end
init
end
[i]Type for REF_43

Name: _prizeDistribution.tiers Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: tiers
init
end
Finance type key: (-1, -1)
XXXX
REF_44 -> LENGTH REF_43
[i]Type for REF_44

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_70 = new uint256[](REF_44)
[i]Type for TMP_70

Name: TMP_70 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_1(uint256[]) := TMP_70(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 1
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_1(uint8) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: picksLength, Num: 1
Globalname: picksLength
End popogation
REF_45(uint32) -> _prizeDistribution_1.maxPicksPerUser
MEMBER
init
end
init
end
init
end
[i]Type for REF_45

Name: _prizeDistribution.maxPicksPerUser Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: maxPicksPerUser
init
end
Finance type key: (-1, -1)
XXXX
TMP_71(bool) = picksLength_1 <= REF_45
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_71

Name: TMP_71 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(None) = SOLIDITY_CALL require(bool,string)(TMP_71,DrawCalc/exceeds-max-user-picks)
[i]Type for TMP_72

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 1
Globalname: index
End popogation
index_1(uint32) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: index, Num: 2
Globalname: index
Name: index, Num: 2
Globalname: index
End popogation
Name: index, Num: 2
Globalname: index

Name: index Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
index_2(uint32) := ϕ(['index_3', 'index_1'])
Phi
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = index_2 < picksLength_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_73

Name: TMP_73 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_46(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_46

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_74(bool) = REF_46 < _totalUserPicks_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_74

Name: TMP_74 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,DrawCalc/insufficient-user-picks)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = index_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: prizeFraction, Num: 1
Globalname: prizeFraction
End popogation
prizeFraction_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_47(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_47

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_77(uint32) = index_2 (c)- 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_77

Name: TMP_77 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_48(uint64) -> _picks_1[TMP_77]
INDEX
[i]Type for REF_48

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_78(bool) = REF_47 > REF_48
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,DrawCalc/picks-ascending)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
End popogation
REF_50(uint64) -> _picks_1[index_2]
INDEX
[i]Type for REF_50

Name: _picks Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_80(bytes) = SOLIDITY_CALL abi.encode()(_userRandomNumber_1,REF_50)
[i]Type for TMP_80

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_81(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_80)
[i]Type for TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82 = CONVERT TMP_81 to uint256
Converting TMP_81

Name: TMP_81 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
[i]Type for TMP_82

Name: TMP_82 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
randomNumberThisPick_1(uint256) := TMP_82(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for randomNumberThisPick

Name: randomNumberThisPick Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
End popogation
TMP_88(uint256[]) = INTERNAL_CALL, DrawCalculator._calculatePrizeTierFractions(IPrizeDistributionBuffer.PrizeDistribution,uint8)(_prizeDistribution_1,maxWinningTierIndex_1)
init
end
init
end
init
end
[i]Type for TMP_88

Name: TMP_88 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeTiersFractions_1(uint256[]) := TMP_88(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeTiersFractions

Name: prizeTiersFractions Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: masks, Num: 1
Globalname: masks
Name: randomNumberThisPick, Num: 1
Globalname: randomNumberThisPick
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_83(uint8) = INTERNAL_CALL, DrawCalculator._calculateTierIndex(uint256,uint256,uint256[])(randomNumberThisPick_1,_winningRandomNumber_1,masks_1)
init
end
init
end
init
end
[i]Type for TMP_83

Name: TMP_83 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tiersIndex_1(uint8) := TMP_83(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for tiersIndex

Name: tiersIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tiersIndex, Num: 1
Globalname: tiersIndex
End popogation
TMP_84(bool) = tiersIndex_1 < TIERS_LENGTH_3
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
[i]Type for TMP_84

Name: TMP_84 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 1
Globalname: prizeCountIndex
End popogation
prizeCountIndex_1(uint256) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_85(bool) = tiersIndex_1 > maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_85

Name: TMP_85 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: maxWinningTierIndex, Num: 3
Globalname: maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
maxWinningTierIndex_3(uint8) := ϕ(['maxWinningTierIndex_1', 'maxWinningTierIndex_2'])
Phi
init
end
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts
End popogation
Name: _prizeCounts, Num: 2
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_51(uint256) -> _prizeCounts_1[tiersIndex_1]
INDEX
[i]Type for REF_51

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_86(uint256) := REF_51(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_86

Name: TMP_86 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeCounts_2(uint256[]) := ϕ(['_prizeCounts_1'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_51(-> _prizeCounts_2) = REF_51 (c)+ 1
init
end
init
end
lnorm: 0 rnorm: 0
init
end
[i]Type for REF_51

Name: REF_51 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: maxWinningTierIndex, Num: 2
Globalname: maxWinningTierIndex
End popogation
maxWinningTierIndex_2(uint8) := tiersIndex_1(uint8)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for maxWinningTierIndex

Name: maxWinningTierIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: _prizeCounts, Num: 3
Globalname: _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_prizeCounts_3(uint256[]) := ϕ(['_prizeCounts_1', '_prizeCounts_2'])
Phi
init
end
[i]Type for _prizeCounts

Name: _prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex
End popogation
Name: prizeCountIndex, Num: 2
Globalname: prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6
Fields: 
Finance Type: undef
Phid
prizeCountIndex_2(uint256) := ϕ(['prizeCountIndex_3', 'prizeCountIndex_1'])
Phi
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 7
Fields: 
Finance Type: undef
XXXX
TMP_89(bool) = prizeCountIndex_2 <= maxWinningTierIndex_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_89

Name: TMP_89 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: index, Num: 3
Globalname: index
End popogation
TMP_87(uint32) := index_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_87

Name: TMP_87 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
index_3(uint32) = index_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for index

Name: index Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
End popogation
REF_52(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_52

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_90(bool) = REF_52 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_90

Name: TMP_90 Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: prizeFraction, Num: 3
Globalname: prizeFraction

Name: prizeFraction Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
prizeFraction_3(uint256) := ϕ(['prizeFraction_1', 'prizeFraction_2'])
Phi
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeTiersFractions, Num: 1
Globalname: prizeTiersFractions
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeFraction, Num: 2
Globalname: prizeFraction
End popogation
REF_53(uint256) -> prizeTiersFractions_1[prizeCountIndex_2]
INDEX
[i]Type for REF_53

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_54(uint256) -> _prizeCounts_1[prizeCountIndex_2]
INDEX
[i]Type for REF_54

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_91(uint256) = REF_53 (c)* REF_54
testing mul...
init
end
init
end

Name: prizeTiersFractions Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _prizeCounts Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_91

Name: TMP_91 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeFraction_2(uint256) = prizeFraction_1 (c)+ TMP_91
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for prizeFraction

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prize, Num: 1
Globalname: prize
End popogation
REF_55(uint256) -> _prizeDistribution_1.prize
MEMBER
init
end
init
end
init
end
[i]Type for REF_55

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _prizeDistribution_1, Field: prize
init
end
Finance type key: (-1, -1)
XXXX
TMP_93(uint256) = prizeFraction_1 (c)* REF_55
testing mul...
init
end
init
end

Name: prizeFraction Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: _prizeDistribution.prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
[i]Type for TMP_93

Name: TMP_93 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(uint256) = TMP_93 (c)/ 1000000000
init
end
init
end
lnorm: u rnorm: 9
init
end
init
end
init
end
lnorm: u rnorm: 9
init
end
[i]Type for TMP_94

Name: TMP_94 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prize_1(uint256) := TMP_94(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prize

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCountIndex, Num: 3
Globalname: prizeCountIndex
End popogation
TMP_92(uint256) := prizeCountIndex_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_92

Name: TMP_92 Function: _calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 7
Fields: 
Finance Type: undef
XXXX
prizeCountIndex_3(uint256) = prizeCountIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for prizeCountIndex

Name: prizeCountIndex Function: _calculate
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 8
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
prizeCounts_1(uint256[]) := _prizeCounts_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prize_1,prizeCounts_1
RETURN
init
end

Name: prize Function: _calculate
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TUPLE_1

Name: TUPLE_1 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_13(uint256)= UNPACK TUPLE_1 index: 0 
([-1], [-1], -9, 'u', 'u', -1)
[i]Type for REF_13

Name: REF_13 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: -9
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_14(uint256[])= UNPACK TUPLE_1 index: 1 
([], [], 'u', 'u', 'u', -1)
[i]Type for REF_14

Name: REF_14 Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_44(uint32) := drawIndex_2(uint32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for TMP_44

Name: TMP_44 Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
drawIndex_3(uint32) = drawIndex_2 (c)+ 1
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for drawIndex

Name: drawIndex Function: _calculatePrizesAwardable
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _prizeCounts, Num: 1
Globalname: _prizeCounts
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
TMP_45(bytes) = SOLIDITY_CALL abi.encode()(_prizeCounts_1)
[i]Type for TMP_45

Name: TMP_45 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeCounts_1(bytes) := TMP_45(bytes)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizeCounts

Name: prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _prizesAwardable, Num: 1
Globalname: _prizesAwardable
Name: prizesAwardable, Num: 1
Globalname: prizesAwardable
End popogation
prizesAwardable_1(uint256[]) := _prizesAwardable_1(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for prizesAwardable

Name: prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: prizesAwardable, Num: 1
Globalname: prizesAwardable
Name: prizeCounts, Num: 1
Globalname: prizeCounts
End popogation
RETURN prizesAwardable_1,prizeCounts_1
RETURN
init
end

Name: prizesAwardable Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end

Name: prizeCounts Function: _calculatePrizesAwardable
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TUPLE_0

Name: TUPLE_0 Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TUPLE_0
RETURN
init
end

Name: TUPLE_0 Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


drawBuffer_2(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
prizeDistributionBuffer_2(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
TMP_27(uint64[][]) = SOLIDITY_CALL abi.decode()(_pickIndicesForDraws_1,uint64[][])
pickIndices_1(uint64[][]) := TMP_27(uint64[][])
REF_1 -> LENGTH pickIndices_1
REF_2 -> LENGTH _drawIds_1 (-> [])
TMP_28(bool) = REF_1 == REF_2
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,DrawCalc/invalid-pick-indices-length)
TMP_30(IDrawBeacon.Draw[]) = HIGH_LEVEL_CALL, dest:drawBuffer_2(IDrawBuffer), function:getDraws, arguments:['_drawIds_1 (-> [])']  
drawBuffer_3(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_2', 'drawBuffer_3', 'drawBuffer_1'])
prizeDistributionBuffer_3(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_2', 'prizeDistributionBuffer_8'])
draws_1(IDrawBeacon.Draw[]) := TMP_30(IDrawBeacon.Draw[])
TMP_31(IPrizeDistributionBuffer.PrizeDistribution[]) = HIGH_LEVEL_CALL, dest:prizeDistributionBuffer_3(IPrizeDistributionBuffer), function:getPrizeDistributions, arguments:['_drawIds_1 (-> [])']  
prizeDistributionBuffer_4(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_3', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_8'])
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := TMP_31(IPrizeDistributionBuffer.PrizeDistribution[])
TMP_32(uint256[]) = INTERNAL_CALL, DrawCalculator._getNormalizedBalancesAt(address,IDrawBeacon.Draw[],IPrizeDistributionBuffer.PrizeDistribution[])(_user_1,draws_1,_prizeDistributions_1)
userBalances_1(uint256[]) := TMP_32(uint256[])
TMP_33(bytes) = SOLIDITY_CALL abi.encodePacked()(_user_1)
TMP_34(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_33)
_userRandomNumber_1(bytes32) := TMP_34(bytes32)
TUPLE_0(uint256[],bytes) = INTERNAL_CALL, DrawCalculator._calculatePrizesAwardable(uint256[],bytes32,IDrawBeacon.Draw[],uint64[][],IPrizeDistributionBuffer.PrizeDistribution[])(userBalances_1,_userRandomNumber_1,draws_1,pickIndices_1,_prizeDistributions_1)
RETURN TUPLE_0


Propogating parameters and globals to SSA variables...
End popogation

Name: drawBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: prizeDistributionBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
drawBuffer_2(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
Phi
[i]Type for drawBuffer

Name: drawBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_2(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _pickIndicesForDraws, Num: 1
Globalname: _pickIndicesForDraws
Name: pickIndices, Num: 1
Globalname: pickIndices
End popogation
TMP_27(uint64[][]) = SOLIDITY_CALL abi.decode()(_pickIndicesForDraws_1,uint64[][])
[i]Type for TMP_27

Name: TMP_27 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pickIndices_1(uint64[][]) := TMP_27(uint64[][])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for pickIndices

Name: pickIndices Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pickIndices, Num: 1
Globalname: pickIndices
Name: _drawIds, Num: 1 (-> [])
Globalname: _drawIds
End popogation
REF_1 -> LENGTH pickIndices_1
[i]Type for REF_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_2 -> LENGTH _drawIds_1 (-> [])
[i]Type for REF_2

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_28(bool) = REF_1 == REF_2
[i]Type for TMP_28

Name: TMP_28 Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,DrawCalc/invalid-pick-indices-length)
[i]Type for TMP_29

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawIds, Num: 1 (-> [])
Globalname: _drawIds
Name: draws, Num: 1
Globalname: draws
End popogation

Name: drawBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: prizeDistributionBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_30(IDrawBeacon.Draw[]) = HIGH_LEVEL_CALL, dest:drawBuffer_2(IDrawBuffer), function:getDraws, arguments:['_drawIds_1 (-> [])']  
High Call: getDraws
Running querryfc
Written func info: DrawBuffer, getDraws
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
calculate
TMP_30
winningRandomNumber
OUT KEY: calculate_TMP_30_winningRandomNumber
calculate
TMP_30
drawId
OUT KEY: calculate_TMP_30_drawId
calculate
TMP_30
timestamp
OUT KEY: calculate_TMP_30_timestamp
calculate
TMP_30
beaconPeriodStartedAt
OUT KEY: calculate_TMP_30_beaconPeriodStartedAt
calculate
TMP_30
beaconPeriodSeconds
OUT KEY: calculate_TMP_30_beaconPeriodSeconds
[i]Type for TMP_30

Name: TMP_30 Function: calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
drawBuffer_3(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_2', 'drawBuffer_3', 'drawBuffer_1'])
Phi
[i]Type for drawBuffer

Name: drawBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_3(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_2', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
draws_1(IDrawBeacon.Draw[]) := TMP_30(IDrawBeacon.Draw[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for draws

Name: draws Function: calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawIds, Num: 1 (-> [])
Globalname: _drawIds
Name: _prizeDistributions, Num: 1
Globalname: _prizeDistributions
End popogation

Name: prizeDistributionBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_31(IPrizeDistributionBuffer.PrizeDistribution[]) = HIGH_LEVEL_CALL, dest:prizeDistributionBuffer_3(IPrizeDistributionBuffer), function:getPrizeDistributions, arguments:['_drawIds_1 (-> [])']  
High Call: getPrizeDistributions
Running querryfc
Written func info: PrizeDistributionBuffer, getPrizeDistributions
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
calculate
TMP_31
bitRangeSize
OUT KEY: calculate_TMP_31_bitRangeSize
calculate
TMP_31
matchCardinality
OUT KEY: calculate_TMP_31_matchCardinality
calculate
TMP_31
startTimestampOffset
OUT KEY: calculate_TMP_31_startTimestampOffset
calculate
TMP_31
endTimestampOffset
OUT KEY: calculate_TMP_31_endTimestampOffset
calculate
TMP_31
maxPicksPerUser
OUT KEY: calculate_TMP_31_maxPicksPerUser
calculate
TMP_31
numberOfPicks
OUT KEY: calculate_TMP_31_numberOfPicks
calculate
TMP_31
tiers
OUT KEY: calculate_TMP_31_tiers
calculate
TMP_31
prize
OUT KEY: calculate_TMP_31_prize
[i]Type for TMP_31

Name: TMP_31 Function: calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_4(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_3', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: calculate
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := TMP_31(IPrizeDistributionBuffer.PrizeDistribution[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: calculate
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: userBalances, Num: 1
Globalname: userBalances
End popogation
TMP_32(uint256[]) = INTERNAL_CALL, DrawCalculator._getNormalizedBalancesAt(address,IDrawBeacon.Draw[],IPrizeDistributionBuffer.PrizeDistribution[])(_user_1,draws_1,_prizeDistributions_1)
init
end
init
end
init
end
init
end
[i]Type for TMP_32

Name: TMP_32 Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userBalances_1(uint256[]) := TMP_32(uint256[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for userBalances

Name: userBalances Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
End popogation
TMP_33(bytes) = SOLIDITY_CALL abi.encodePacked()(_user_1)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_34(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_33)
[i]Type for TMP_34

Name: TMP_34 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_userRandomNumber_1(bytes32) := TMP_34(bytes32)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _userRandomNumber

Name: _userRandomNumber Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pickIndices, Num: 1
Globalname: pickIndices
Name: _userRandomNumber, Num: 1
Globalname: _userRandomNumber
Name: userBalances, Num: 1
Globalname: userBalances
End popogation
TUPLE_0(uint256[],bytes) = INTERNAL_CALL, DrawCalculator._calculatePrizesAwardable(uint256[],bytes32,IDrawBeacon.Draw[],uint64[][],IPrizeDistributionBuffer.PrizeDistribution[])(userBalances_1,_userRandomNumber_1,draws_1,pickIndices_1,_prizeDistributions_1)
init
end
init
end
init
end
init
end
init
end
[i]Type for TUPLE_0

Name: TUPLE_0 Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TUPLE_0
RETURN
init
end

Name: TUPLE_0 Function: calculate
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



getDrawBuffer


drawBuffer_4(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
RETURN drawBuffer_4


Propogating parameters and globals to SSA variables...
End popogation
Name: drawBuffer, Num: 4
Globalname: drawBuffer
global...

Name: drawBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
drawBuffer_4(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
Phi
[i]Type for drawBuffer

Name: drawBuffer Function: getDrawBuffer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN drawBuffer_4
RETURN
init
end

Name: drawBuffer Function: getDrawBuffer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


drawBuffer_4(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
RETURN drawBuffer_4


Propogating parameters and globals to SSA variables...
End popogation

Name: drawBuffer Function: getDrawBuffer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
drawBuffer_4(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
Phi
[i]Type for drawBuffer

Name: drawBuffer Function: getDrawBuffer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN drawBuffer_4
RETURN
init
end

Name: drawBuffer Function: getDrawBuffer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



getPrizeDistributionBuffer


prizeDistributionBuffer_5(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
RETURN prizeDistributionBuffer_5


Propogating parameters and globals to SSA variables...
End popogation
Name: prizeDistributionBuffer, Num: 5
Globalname: prizeDistributionBuffer
global...

Name: prizeDistributionBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
prizeDistributionBuffer_5(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: getPrizeDistributionBuffer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN prizeDistributionBuffer_5
RETURN
init
end

Name: prizeDistributionBuffer Function: getPrizeDistributionBuffer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


prizeDistributionBuffer_5(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
RETURN prizeDistributionBuffer_5


Propogating parameters and globals to SSA variables...
End popogation

Name: prizeDistributionBuffer Function: getPrizeDistributionBuffer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
prizeDistributionBuffer_5(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: getPrizeDistributionBuffer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN prizeDistributionBuffer_5
RETURN
init
end

Name: prizeDistributionBuffer Function: getPrizeDistributionBuffer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



getNormalizedBalancesForDrawIds
Finding type for _user(address ... )
prev address? u
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Finding type for _drawIds(uint32[] ... )
Param: 0
    num: []
    den: []
    norm: u
    link: _user
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


drawBuffer_5(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
prizeDistributionBuffer_6(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
TMP_35(IDrawBeacon.Draw[]) = HIGH_LEVEL_CALL, dest:drawBuffer_5(IDrawBuffer), function:getDraws, arguments:['_drawIds_1 (-> [])']  
drawBuffer_6(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_3', 'drawBuffer_5', 'drawBuffer_1'])
prizeDistributionBuffer_7(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_6', 'prizeDistributionBuffer_8'])
_draws_1(IDrawBeacon.Draw[]) := TMP_35(IDrawBeacon.Draw[])
TMP_36(IPrizeDistributionBuffer.PrizeDistribution[]) = HIGH_LEVEL_CALL, dest:prizeDistributionBuffer_7(IPrizeDistributionBuffer), function:getPrizeDistributions, arguments:['_drawIds_1 (-> [])']  
prizeDistributionBuffer_8(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_7', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_8'])
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := TMP_36(IPrizeDistributionBuffer.PrizeDistribution[])
TMP_37(uint256[]) = INTERNAL_CALL, DrawCalculator._getNormalizedBalancesAt(address,IDrawBeacon.Draw[],IPrizeDistributionBuffer.PrizeDistribution[])(_user_1,_draws_1,_prizeDistributions_1)
RETURN TMP_37


Propogating parameters and globals to SSA variables...
End popogation
Name: drawBuffer, Num: 5
Globalname: drawBuffer
global...

Name: drawBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: prizeDistributionBuffer, Num: 6
Globalname: prizeDistributionBuffer
global...

Name: prizeDistributionBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
drawBuffer_5(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
Phi
[i]Type for drawBuffer

Name: drawBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_6(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawIds, Num: 1 (-> [])
Globalname: _drawIds
Name: _draws, Num: 1
Globalname: _draws
End popogation
Name: drawBuffer, Num: 6
Globalname: drawBuffer
global...

Name: drawBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: prizeDistributionBuffer, Num: 7
Globalname: prizeDistributionBuffer
global...

Name: prizeDistributionBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_35(IDrawBeacon.Draw[]) = HIGH_LEVEL_CALL, dest:drawBuffer_5(IDrawBuffer), function:getDraws, arguments:['_drawIds_1 (-> [])']  
High Call: getDraws
Running querryfc
Written func info: DrawBuffer, getDraws
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
getNormalizedBalancesForDrawIds
TMP_35
winningRandomNumber
OUT KEY: getNormalizedBalancesForDrawIds_TMP_35_winningRandomNumber
getNormalizedBalancesForDrawIds
TMP_35
drawId
OUT KEY: getNormalizedBalancesForDrawIds_TMP_35_drawId
getNormalizedBalancesForDrawIds
TMP_35
timestamp
OUT KEY: getNormalizedBalancesForDrawIds_TMP_35_timestamp
getNormalizedBalancesForDrawIds
TMP_35
beaconPeriodStartedAt
OUT KEY: getNormalizedBalancesForDrawIds_TMP_35_beaconPeriodStartedAt
getNormalizedBalancesForDrawIds
TMP_35
beaconPeriodSeconds
OUT KEY: getNormalizedBalancesForDrawIds_TMP_35_beaconPeriodSeconds
[i]Type for TMP_35

Name: TMP_35 Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
drawBuffer_6(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_3', 'drawBuffer_5', 'drawBuffer_1'])
Phi
[i]Type for drawBuffer

Name: drawBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_7(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_6', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_draws_1(IDrawBeacon.Draw[]) := TMP_35(IDrawBeacon.Draw[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _draws

Name: _draws Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawIds, Num: 1 (-> [])
Globalname: _drawIds
Name: _prizeDistributions, Num: 1
Globalname: _prizeDistributions
End popogation
Name: prizeDistributionBuffer, Num: 8
Globalname: prizeDistributionBuffer
global...

Name: prizeDistributionBuffer Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_36(IPrizeDistributionBuffer.PrizeDistribution[]) = HIGH_LEVEL_CALL, dest:prizeDistributionBuffer_7(IPrizeDistributionBuffer), function:getPrizeDistributions, arguments:['_drawIds_1 (-> [])']  
High Call: getPrizeDistributions
Running querryfc
Written func info: PrizeDistributionBuffer, getPrizeDistributions
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
getNormalizedBalancesForDrawIds
TMP_36
bitRangeSize
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_bitRangeSize
getNormalizedBalancesForDrawIds
TMP_36
matchCardinality
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_matchCardinality
getNormalizedBalancesForDrawIds
TMP_36
startTimestampOffset
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_startTimestampOffset
getNormalizedBalancesForDrawIds
TMP_36
endTimestampOffset
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_endTimestampOffset
getNormalizedBalancesForDrawIds
TMP_36
maxPicksPerUser
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_maxPicksPerUser
getNormalizedBalancesForDrawIds
TMP_36
numberOfPicks
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_numberOfPicks
getNormalizedBalancesForDrawIds
TMP_36
tiers
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_tiers
getNormalizedBalancesForDrawIds
TMP_36
prize
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_prize
[i]Type for TMP_36

Name: TMP_36 Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_8(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_7', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := TMP_36(IPrizeDistributionBuffer.PrizeDistribution[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_37(uint256[]) = INTERNAL_CALL, DrawCalculator._getNormalizedBalancesAt(address,IDrawBeacon.Draw[],IPrizeDistributionBuffer.PrizeDistribution[])(_user_1,_draws_1,_prizeDistributions_1)
[i]Type for TMP_37

Name: TMP_37 Function: getNormalizedBalancesForDrawIds
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_37
RETURN
init
end

Name: TMP_37 Function: getNormalizedBalancesForDrawIds
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


drawBuffer_5(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
prizeDistributionBuffer_6(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
TMP_35(IDrawBeacon.Draw[]) = HIGH_LEVEL_CALL, dest:drawBuffer_5(IDrawBuffer), function:getDraws, arguments:['_drawIds_1 (-> [])']  
drawBuffer_6(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_3', 'drawBuffer_5', 'drawBuffer_1'])
prizeDistributionBuffer_7(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_6', 'prizeDistributionBuffer_8'])
_draws_1(IDrawBeacon.Draw[]) := TMP_35(IDrawBeacon.Draw[])
TMP_36(IPrizeDistributionBuffer.PrizeDistribution[]) = HIGH_LEVEL_CALL, dest:prizeDistributionBuffer_7(IPrizeDistributionBuffer), function:getPrizeDistributions, arguments:['_drawIds_1 (-> [])']  
prizeDistributionBuffer_8(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_7', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_8'])
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := TMP_36(IPrizeDistributionBuffer.PrizeDistribution[])
TMP_37(uint256[]) = INTERNAL_CALL, DrawCalculator._getNormalizedBalancesAt(address,IDrawBeacon.Draw[],IPrizeDistributionBuffer.PrizeDistribution[])(_user_1,_draws_1,_prizeDistributions_1)
RETURN TMP_37


Propogating parameters and globals to SSA variables...
End popogation

Name: drawBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: prizeDistributionBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
drawBuffer_5(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_0', 'drawBuffer_3', 'drawBuffer_1'])
Phi
[i]Type for drawBuffer

Name: drawBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_6(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_0', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawIds, Num: 1 (-> [])
Globalname: _drawIds
Name: _draws, Num: 1
Globalname: _draws
End popogation

Name: drawBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: prizeDistributionBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_35(IDrawBeacon.Draw[]) = HIGH_LEVEL_CALL, dest:drawBuffer_5(IDrawBuffer), function:getDraws, arguments:['_drawIds_1 (-> [])']  
High Call: getDraws
Running querryfc
Written func info: DrawBuffer, getDraws
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
getNormalizedBalancesForDrawIds
TMP_35
winningRandomNumber
OUT KEY: getNormalizedBalancesForDrawIds_TMP_35_winningRandomNumber
getNormalizedBalancesForDrawIds
TMP_35
drawId
OUT KEY: getNormalizedBalancesForDrawIds_TMP_35_drawId
getNormalizedBalancesForDrawIds
TMP_35
timestamp
OUT KEY: getNormalizedBalancesForDrawIds_TMP_35_timestamp
getNormalizedBalancesForDrawIds
TMP_35
beaconPeriodStartedAt
OUT KEY: getNormalizedBalancesForDrawIds_TMP_35_beaconPeriodStartedAt
getNormalizedBalancesForDrawIds
TMP_35
beaconPeriodSeconds
OUT KEY: getNormalizedBalancesForDrawIds_TMP_35_beaconPeriodSeconds
[i]Type for TMP_35

Name: TMP_35 Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
drawBuffer_6(IDrawBuffer) := ϕ(['drawBuffer_6', 'drawBuffer_3', 'drawBuffer_5', 'drawBuffer_1'])
Phi
[i]Type for drawBuffer

Name: drawBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_7(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_6', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_draws_1(IDrawBeacon.Draw[]) := TMP_35(IDrawBeacon.Draw[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _draws

Name: _draws Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _drawIds, Num: 1 (-> [])
Globalname: _drawIds
Name: _prizeDistributions, Num: 1
Globalname: _prizeDistributions
End popogation

Name: prizeDistributionBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_36(IPrizeDistributionBuffer.PrizeDistribution[]) = HIGH_LEVEL_CALL, dest:prizeDistributionBuffer_7(IPrizeDistributionBuffer), function:getPrizeDistributions, arguments:['_drawIds_1 (-> [])']  
High Call: getPrizeDistributions
Running querryfc
Written func info: PrizeDistributionBuffer, getPrizeDistributions
Retvar: ('c', [-1], [-1], 'u', 'u', None)
([-1], [-1], 'u', 'u', None, -1)
getNormalizedBalancesForDrawIds
TMP_36
bitRangeSize
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_bitRangeSize
getNormalizedBalancesForDrawIds
TMP_36
matchCardinality
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_matchCardinality
getNormalizedBalancesForDrawIds
TMP_36
startTimestampOffset
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_startTimestampOffset
getNormalizedBalancesForDrawIds
TMP_36
endTimestampOffset
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_endTimestampOffset
getNormalizedBalancesForDrawIds
TMP_36
maxPicksPerUser
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_maxPicksPerUser
getNormalizedBalancesForDrawIds
TMP_36
numberOfPicks
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_numberOfPicks
getNormalizedBalancesForDrawIds
TMP_36
tiers
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_tiers
getNormalizedBalancesForDrawIds
TMP_36
prize
OUT KEY: getNormalizedBalancesForDrawIds_TMP_36_prize
[i]Type for TMP_36

Name: TMP_36 Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
prizeDistributionBuffer_8(IPrizeDistributionBuffer) := ϕ(['prizeDistributionBuffer_7', 'prizeDistributionBuffer_4', 'prizeDistributionBuffer_1', 'prizeDistributionBuffer_8'])
Phi
[i]Type for prizeDistributionBuffer

Name: prizeDistributionBuffer Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_prizeDistributions_1(IPrizeDistributionBuffer.PrizeDistribution[]) := TMP_36(IPrizeDistributionBuffer.PrizeDistribution[])
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _prizeDistributions

Name: _prizeDistributions Function: getNormalizedBalancesForDrawIds
Num: -1
Den: -1
Address: None
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_37(uint256[]) = INTERNAL_CALL, DrawCalculator._getNormalizedBalancesAt(address,IDrawBeacon.Draw[],IPrizeDistributionBuffer.PrizeDistribution[])(_user_1,_draws_1,_prizeDistributions_1)
[i]Type for TMP_37

Name: TMP_37 Function: getNormalizedBalancesForDrawIds
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_37
RETURN
init
end

Name: TMP_37 Function: getNormalizedBalancesForDrawIds
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



_calculatePrizesAwardable
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



_calculateNumberOfUserPicks
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



_getNormalizedBalancesAt
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



_calculate
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



_calculateTierIndex
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



_createBitMasks
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



_calculatePrizeTierFraction
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



_calculatePrizeTierFractions
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



_numberOfPrizesForIndex
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket



slitherConstructorConstantVariables
State_var: _owner
State_var: TIERS_LENGTH
State_var: drawBuffer
State_var: _pendingOwner
State_var: prizeDistributionBuffer
State_var: ticket
Address: 1, Label: global:_owner
Address: 2, Label: global:_pendingOwner
Address: -999, Label: constructor:_owner
Address: -998, Label: calculate:_user
Address: -997, Label: getNormalizedBalancesForDrawIds:_user
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Function count: 19
Executing Group 10
[*] Tested 1 warnings for Pool Together v4
Group 10 complete
Testing complete
