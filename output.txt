Switched global version to 0.8.12
Analyzed_contracts_count: 10
total compilations: 1, contracts: 10
contract name: MasterChef
Add to address_to_label {'global:_owner': 1}
Addr:global__owner : 0
Add to address_to_label {'global:_owner': 1, 'addDepositor:_depositor': -999}
Addr:addDepositor__depositor : 0
Add to address_to_label {'global:_owner': 1, 'addDepositor:_depositor': -999, 'removeDepositor:_depositor': -998}
Addr:removeDepositor__depositor : 0
Add to address_to_label {'global:_owner': 1, 'addDepositor:_depositor': -999, 'removeDepositor:_depositor': -998, 'add:_token': -997}
Addr:add__token : 6
Add to address_to_label {'global:_owner': 1, 'addDepositor:_depositor': -999, 'removeDepositor:_depositor': -998, 'add:_token': -997, 'pendingConcur:_user': -996}
Addr:pendingConcur__user : 0
Add to address_to_label {'global:_owner': 1, 'addDepositor:_depositor': -999, 'removeDepositor:_depositor': -998, 'add:_token': -997, 'pendingConcur:_user': -996, 'deposit:_recipient': -995}
Addr:deposit__recipient : 0
Add to address_to_label {'global:_owner': 1, 'addDepositor:_depositor': -999, 'removeDepositor:_depositor': -998, 'add:_token': -997, 'pendingConcur:_user': -996, 'deposit:_recipient': -995, 'withdraw:_recipient': -994}
Addr:withdraw__recipient : 0
Mark functions Adding: MasterChef, constructor, True
[*]Marked
Mark functions Adding: MasterChef, addDepositor, True
[X]No Binary
Mark functions Adding: MasterChef, removeDepositor, True
[X]No Binary
Mark functions Adding: MasterChef, add, True
[*]Marked
Mark functions Adding: MasterChef, poolLength, True
[X]No Binary
Mark functions Adding: MasterChef, getMultiplier, True
[*]Marked
Mark functions Adding: MasterChef, pendingConcur, True
[*]Marked
Mark functions Adding: MasterChef, massUpdatePools, True
[*]Marked
Mark functions Adding: MasterChef, updatePool, True
[*]Marked
Mark functions Adding: MasterChef, deposit, True
[*]Marked
Mark functions Adding: MasterChef, withdraw, True
[*]Marked
Mark functions Adding: MasterChef, safeConcurTransfer, True
[x] Not visible 
Mark functions Adding: MasterChef, slitherConstructorVariables, True
[x] Not visible 
State_var: _owner
Finding type for _owner(address ... )
prev address? u
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Source address: 1
State_var: _NOT_ENTERED
Finding type for _NOT_ENTERED(uint256 ... )
Value: u
Source address: u
State_var: _concurShareMultiplier
Finding type for _concurShareMultiplier(uint256 ... )
Value: u
Source address: u
State_var: poolInfo
Finding type for poolInfo(MasterChef.PoolInfo[] ... )
global
poolInfo
depositToken
OUT KEY: global_poolInfo_depositToken
global
poolInfo
allocPoint
OUT KEY: global_poolInfo_allocPoint
global
poolInfo
lastRewardBlock
OUT KEY: global_poolInfo_lastRewardBlock
global
poolInfo
accConcurPerShare
OUT KEY: global_poolInfo_accConcurPerShare
global
poolInfo
depositFeeBP
OUT KEY: global_poolInfo_depositFeeBP
Value: u
Source address: u
State_var: userInfo
Finding type for userInfo(mapping(uint256 => mapping(address => MasterChef.UserInfo)) ... )
global
userInfo
amount
OUT KEY: global_userInfo_amount
global
userInfo
rewardDebt
OUT KEY: global_userInfo_rewardDebt
Value: u
Source address: u
State_var: _ENTERED
Finding type for _ENTERED(uint256 ... )
Value: u
Source address: u
State_var: _status
Finding type for _status(uint256 ... )
Value: u
Source address: u
State_var: concur
Finding type for concur(IERC20 ... )
Value: u
Source address: u
State_var: concurPerBlock
Finding type for concurPerBlock(uint256 ... )
Value: u
Source address: u
State_var: endBlock
Finding type for endBlock(uint256 ... )
Value: u
Source address: u
State_var: totalAllocPoint
Finding type for totalAllocPoint(uint256 ... )
Value: u
Source address: u
State_var: _perMille
Finding type for _perMille(uint256 ... )
Value: u
Source address: u
State_var: isDepositor
Finding type for isDepositor(mapping(address => bool) ... )
Value: u
Source address: u
State_var: pid
Finding type for pid(mapping(address => uint256) ... )
Value: u
Source address: u
contract name: Ownable
contract name: ReentrancyGuard
contract name: IERC20
contract name: IERC20Permit
contract name: SafeERC20
contract name: Address
contract name: Context
contract name: SafeCast
contract name: SafeMath
Running check on MasterChef
Reading Function: constructor
Checking funcion...



constructor
Function name: constructor
Finding type for _concur(IERC20 ... )
Value: u
Finding type for _startBlock(uint256 ... )
Value: u
Finding type for _endBlock(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
constructor(IERC20,uint256,uint256)


poolInfo_1(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
INTERNAL_CALL, Ownable.constructor()()
startBlock_1(uint256) := _startBlock_1(uint256)
endBlock_1(uint256) := _endBlock_1(uint256)
concur_1(IERC20) := _concur_1(IERC20)
TMP_18 = CONVERT 0 to address
TMP_19 = CONVERT TMP_18 to IERC20
TMP_20 = new PoolInfo(TMP_19,0,_startBlock_1,0,0)
REF_1 -> LENGTH poolInfo_2
TMP_22(uint256) := REF_1(uint256)
TMP_23(uint256) = TMP_22 (c)+ 1
poolInfo_3(MasterChef.PoolInfo[]) := ϕ(['poolInfo_2'])
REF_1 (->poolInfo_3) := TMP_23(uint256)
REF_2(MasterChef.PoolInfo) -> poolInfo_3[TMP_22]
poolInfo_4(MasterChef.PoolInfo[]) := ϕ(['poolInfo_3'])
REF_2 (->poolInfo_4) := TMP_20(MasterChef.PoolInfo)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_1, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 1
Globalname: poolInfo, contract_name: MasterChef
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
poolInfo_1(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, Ownable.constructor()()
New param cache []
FIND RETURN
ENTRY_POINT
constructor()
ENTRY_POINT
Propogating All
EXPRESSION _transferOwnership(_msgSender())
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_126 cleared
Propogating parameters and globals to SSA variables...
End popogation
TMP_126(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
FIND RETURN
ENTRY_POINT
_msgSender()
ENTRY_POINT
Propogating All
RETURN msg.sender
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN msg.sender
RETURN
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN msg.sender
RETURN
Source address: u
Source address: u
[i]Type for TMP_126

Name: TMP_126 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, Ownable._transferOwnership(address)(TMP_126)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: newOwner Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
_transferOwnership(address)
ENTRY_POINT
Propogating All
NEW VARIABLE oldOwner = _owner
Propogating All
EXPRESSION _owner = newOwner
Propogating All
newOwner_1
Ssa_name: newOwner_1, name: newOwner

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: newOwner_1 Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION OwnershipTransferred(oldOwner,newOwner)
Propogating All
oldOwner_1
Ssa_name: oldOwner_1, name: oldOwner

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
newOwner_1
Ssa_name: newOwner_1, name: newOwner

Name: newOwner_1 Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: newOwner_1 Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Copied ftype
[i] newOwner cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: newOwner_1, name: newOwner

Name: newOwner_1 Function: _transferOwnership
Num: 
Den: 
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: newOwner_1 Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owner_2, name: _owner

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owner, Num: 2
Globalname: _owner, contract_name: MasterChef
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Source address: 1
newOwner_1(address) := ϕ(['TMP_126', 'newOwner_1', 'TMP_132'])
Phi
[i]Type for newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
XXXX
_owner_2(address) := ϕ(['_owner_3', '_owner_0'])
Phi
[i]Type for _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
[i] oldOwner cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _owner_2, name: _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owner_2, name: _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: oldOwner_1, name: oldOwner

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: oldOwner, Num: 1
Globalname: oldOwner, contract_name: MasterChef
End popogation
oldOwner_1(address) := _owner_2(address)
asgn
Source address: 1
Finance type key: (-1, -1)
[i]Type for oldOwner

Name: oldOwner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: newOwner_1, name: newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Ssa_name: newOwner_1, name: newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owner_3, name: _owner

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owner, Num: 3
Globalname: _owner, contract_name: MasterChef
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Source address: 1
End popogation
_owner_3(address) := newOwner_1(address)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: 0
LF: newOwner
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _owner
Propogating parameters and globals to SSA variables...
Ssa_name: oldOwner_1, name: oldOwner

Name: oldOwner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: newOwner_1, name: newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Ssa_name: oldOwner_1, name: oldOwner

Name: oldOwner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: newOwner_1, name: newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
End popogation
[i] newOwner cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: newOwner_1, name: newOwner

Name: newOwner Function: _transferOwnership
Num: 
Den: 
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: newOwner_1 Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _owner_2, name: _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
newOwner_1(address) := ϕ(['TMP_126', 'newOwner_1', 'TMP_132'])
Phi
[i]Type for newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
XXXX
_owner_2(address) := ϕ(['_owner_3', '_owner_0'])
Phi
[i]Type for _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
[i] oldOwner cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _owner_2, name: _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owner_2, name: _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: oldOwner_1, name: oldOwner

Name: oldOwner Function: _transferOwnership
Num: 
Den: 
Address: u
Norm: u
LF: _owner
Value: u
Fields: 
Finance Type: undef
Name: oldOwner, Num: 1
Globalname: oldOwner, contract_name: MasterChef
End popogation
oldOwner_1(address) := _owner_2(address)
asgn
Source address: 1
Finance type key: (-1, -1)
[i]Type for oldOwner

Name: oldOwner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: newOwner_1, name: newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Ssa_name: newOwner_1, name: newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owner_3, name: _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: 0
LF: newOwner
Value: u
Fields: 
Finance Type: undef
End popogation
_owner_3(address) := newOwner_1(address)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _owner

Name: _owner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: 0
LF: newOwner
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _owner
Propogating parameters and globals to SSA variables...
Ssa_name: oldOwner_1, name: oldOwner

Name: oldOwner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: newOwner_1, name: newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
Ssa_name: oldOwner_1, name: oldOwner

Name: oldOwner Function: _transferOwnership
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: newOwner_1, name: newOwner

Name: newOwner Function: _transferOwnership
Num: -1
Den: -1
Address: u
Norm: u
LF: newOwner
Value: u
Fields: 
Finance Type: undef
End popogation
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_126 cleared
Propogating parameters and globals to SSA variables...
End popogation
TMP_126(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_126

Name: TMP_126 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, Ownable._transferOwnership(address)(TMP_126)
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u']]
Propogating parameters and globals to SSA variables...
Ssa_name: _startBlock_1, name: _startBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: startBlock_1, name: startBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: startBlock, Num: 1
Globalname: startBlock, contract_name: MasterChef
End popogation
startBlock_1(uint256) := _startBlock_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for startBlock

Name: startBlock Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _endBlock_1, name: _endBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _endBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _endBlock, Num: 1
Globalname: _endBlock, contract_name: MasterChef
Ssa_name: _endBlock_1, name: _endBlock

Name: _endBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _endBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _endBlock, Num: 1
Globalname: _endBlock, contract_name: MasterChef
Ssa_name: endBlock_1, name: endBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: endBlock, Num: 1
Globalname: endBlock, contract_name: MasterChef
global...

Name: PIC_10 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
endBlock_1(uint256) := _endBlock_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for endBlock

Name: endBlock Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied endBlock
Source address: u
Propogating parameters and globals to SSA variables...
Ssa_name: _concur_1, name: _concur

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _concur_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _concur, Num: 1
Globalname: _concur, contract_name: MasterChef
Ssa_name: _concur_1, name: _concur

Name: _concur_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _concur_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _concur, Num: 1
Globalname: _concur, contract_name: MasterChef
Ssa_name: concur_1, name: concur

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concur, Num: 1
Globalname: concur, contract_name: MasterChef
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
concur_1(IERC20) := _concur_1(IERC20)
asgn
Finance type key: (-1, -1)
[i]Type for concur

Name: concur Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied concur
Source address: u
[i] TMP_18 cleared
[i] TMP_19 cleared
[i] TMP_22 cleared
[i] TMP_23 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: poolInfo_2, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 2
Globalname: poolInfo, contract_name: MasterChef
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: poolInfo_3, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 3
Globalname: poolInfo, contract_name: MasterChef
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: poolInfo_2, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_3, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: poolInfo_4, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 4
Globalname: poolInfo, contract_name: MasterChef
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: poolInfo_3, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: poolInfo_3, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_4, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_18 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_19 = CONVERT TMP_18 to IERC20
Converting TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
ERC20
[i]Type for TMP_19

Name: TMP_19 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20 = new PoolInfo(TMP_19,0,_startBlock_1,0,0)
[i]Type for TMP_20

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_1 -> LENGTH poolInfo_2
[i]Type for REF_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_22(uint256) := REF_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_22

Name: TMP_22 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_23(uint256) = TMP_22 (c)+ 1
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_23

Name: TMP_23 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
poolInfo_3(MasterChef.PoolInfo[]) := ϕ(['poolInfo_2'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_1 (->poolInfo_3) := TMP_23(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_1

Name: REF_1 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_2(MasterChef.PoolInfo) -> poolInfo_3[TMP_22]
INDEX
[i]Type for REF_2

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
poolInfo_4(MasterChef.PoolInfo[]) := ϕ(['poolInfo_3'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_2 (->poolInfo_4) := TMP_20(MasterChef.PoolInfo)
asgn
Finance type key: (-1, -1)
[i]Type for REF_2

Name: REF_2 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied poolInfo
Source address: u
Copied poolInfo
Source address: u


poolInfo_1(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
INTERNAL_CALL, Ownable.constructor()()
startBlock_1(uint256) := _startBlock_1(uint256)
endBlock_1(uint256) := _endBlock_1(uint256)
concur_1(IERC20) := _concur_1(IERC20)
TMP_18 = CONVERT 0 to address
TMP_19 = CONVERT TMP_18 to IERC20
TMP_20 = new PoolInfo(TMP_19,0,_startBlock_1,0,0)
REF_1 -> LENGTH poolInfo_2
TMP_22(uint256) := REF_1(uint256)
TMP_23(uint256) = TMP_22 (c)+ 1
poolInfo_3(MasterChef.PoolInfo[]) := ϕ(['poolInfo_2'])
REF_1 (->poolInfo_3) := TMP_23(uint256)
REF_2(MasterChef.PoolInfo) -> poolInfo_3[TMP_22]
poolInfo_4(MasterChef.PoolInfo[]) := ϕ(['poolInfo_3'])
REF_2 (->poolInfo_4) := TMP_20(MasterChef.PoolInfo)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_1, name: poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolInfo_1(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, Ownable.constructor()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: startBlock_1, name: startBlock

Name: startBlock Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: startBlock, Num: 1
Globalname: startBlock, contract_name: MasterChef
End popogation
startBlock_1(uint256) := _startBlock_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for startBlock

Name: startBlock Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _endBlock_1, name: _endBlock

Name: _endBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _endBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _endBlock, Num: 1
Globalname: _endBlock, contract_name: MasterChef
Ssa_name: _endBlock_1, name: _endBlock

Name: _endBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _endBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _endBlock, Num: 1
Globalname: _endBlock, contract_name: MasterChef
Ssa_name: endBlock_1, name: endBlock

Name: endBlock Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
endBlock_1(uint256) := _endBlock_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for endBlock

Name: endBlock Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied endBlock
Source address: u
Propogating parameters and globals to SSA variables...
Ssa_name: _concur_1, name: _concur

Name: _concur_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _concur_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _concur, Num: 1
Globalname: _concur, contract_name: MasterChef
Ssa_name: _concur_1, name: _concur

Name: _concur_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _concur_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _concur, Num: 1
Globalname: _concur, contract_name: MasterChef
Ssa_name: concur_1, name: concur

Name: concur Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
concur_1(IERC20) := _concur_1(IERC20)
asgn
Finance type key: (-1, -1)
[i]Type for concur

Name: concur Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied concur
Source address: u
[i] TMP_18 cleared
[i] TMP_19 cleared
[i] TMP_22 cleared
[i] TMP_23 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: poolInfo_2, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_3, name: poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_2, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_3, name: poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: constructor
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: poolInfo_4, name: poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_3, name: poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: poolInfo_3, name: poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_4, name: poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_18 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_19 = CONVERT TMP_18 to IERC20
Converting TMP_18

Name: TMP_18 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
ERC20
[i]Type for TMP_19

Name: TMP_19 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20 = new PoolInfo(TMP_19,0,_startBlock_1,0,0)
[i]Type for TMP_20

Name: TMP_20 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_1 -> LENGTH poolInfo_2
[i]Type for REF_1

Name: REF_1 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_22(uint256) := REF_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_22

Name: TMP_22 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_23(uint256) = TMP_22 (c)+ 1
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
[i]Type for TMP_23

Name: TMP_23 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
poolInfo_3(MasterChef.PoolInfo[]) := ϕ(['poolInfo_2'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_1 (->poolInfo_3) := TMP_23(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_1

Name: REF_1 Function: constructor
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_2(MasterChef.PoolInfo) -> poolInfo_3[TMP_22]
INDEX
[i]Type for REF_2

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
poolInfo_4(MasterChef.PoolInfo[]) := ϕ(['poolInfo_3'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_2 (->poolInfo_4) := TMP_20(MasterChef.PoolInfo)
asgn
Finance type key: (-1, -1)
[i]Type for REF_2

Name: REF_2 Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied poolInfo
Source address: u
Copied poolInfo
Source address: u
Reading Function: addDepositor
Function addDepositor not marked
Reading Function: removeDepositor
Function removeDepositor not marked
Reading Function: add
Checking funcion...



add
Function name: add
Finding type for _token(address ... )
prev address? u
Head Addr: -997
    Norm: 6
    Set: {-997}
    Fin: NULL
Finding type for _allocationPoints(uint256 ... )
Value: u
Finding type for _depositFee(uint16 ... )
Value: u
Finding type for _startBlock(uint256 ... )
Value: u
New param cache [[[], [], 6, '_token', [], -1, -997, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
add(address,uint256,uint16,uint256)


poolInfo_5(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
pid_1(mapping(address => uint256)) := ϕ(['pid_0', 'pid_3'])
totalAllocPoint_1(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
MODIFIER_CALL, Ownable.onlyOwner()()
TMP_27 = CONVERT 0 to address
TMP_28(bool) = _token_1 != TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,zero address)
TMP_40(bool) = block.number > _startBlock_1
CONDITION TMP_40
lastRewardBlock_1(uint256) := block.number(uint256)
lastRewardBlock_2(uint256) := _startBlock_1(uint256)
lastRewardBlock_3(uint256) := ϕ(['lastRewardBlock_1', 'lastRewardBlock_2'])
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAllocPoint_2', '_allocationPoints_1'] 
totalAllocPoint_3(uint256) := TMP_30(uint256)
REF_6(uint256) -> pid_2[_token_1]
TMP_31(bool) = REF_6 == 0
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,already registered)
TMP_33 = CONVERT _token_1 to IERC20
TMP_34 = new PoolInfo(TMP_33,_allocationPoints_1,lastRewardBlock_3,0,_depositFee_1)
REF_8 -> LENGTH poolInfo_6
TMP_36(uint256) := REF_8(uint256)
TMP_37(uint256) = TMP_36 (c)+ 1
poolInfo_7(MasterChef.PoolInfo[]) := ϕ(['poolInfo_6'])
REF_8 (->poolInfo_7) := TMP_37(uint256)
REF_9(MasterChef.PoolInfo) -> poolInfo_7[TMP_36]
poolInfo_8(MasterChef.PoolInfo[]) := ϕ(['poolInfo_7'])
REF_9 (->poolInfo_8) := TMP_34(MasterChef.PoolInfo)
REF_10(uint256) -> pid_2[_token_1]
REF_11 -> LENGTH poolInfo_8
TMP_38(uint256) = REF_11 (c)- 1
pid_3(mapping(address => uint256)) := ϕ(['pid_2'])
REF_10 (->pid_3) := TMP_38(uint256)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_5, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 5
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: pid_1, name: pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pid, Num: 1
Globalname: pid, contract_name: MasterChef
global...

Name: PIC_14 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalAllocPoint_1, name: totalAllocPoint

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalAllocPoint, Num: 1
Globalname: totalAllocPoint, contract_name: MasterChef
global...

Name: PIC_11 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
poolInfo_5(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pid_1(mapping(address => uint256)) := ϕ(['pid_0', 'pid_3'])
Phi
[i]Type for pid

Name: pid Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_1(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
New param cache []
FIND RETURN
ENTRY_POINT
onlyOwner()
ENTRY_POINT
Propogating All
EXPRESSION _checkOwner()
Propogating All
_
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, Ownable._checkOwner()()
New param cache []
FIND RETURN
ENTRY_POINT
_checkOwner()
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(owner() == _msgSender(),Ownable: caller is not the owner)
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_5 cleared
[i] TMP_6 cleared
[i] TMP_7 cleared
Propogating parameters and globals to SSA variables...
End popogation
TMP_5(address) = INTERNAL_CALL, Ownable.owner()()
New param cache []
FIND RETURN
ENTRY_POINT
owner()
ENTRY_POINT
Propogating All
RETURN _owner
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _owner_1, name: _owner

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _owner, Num: 1
Globalname: _owner, contract_name: MasterChef
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Source address: 1
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
Phi
[i]Type for _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _owner_1, name: _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owner_1, name: _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
End popogation
RETURN _owner_1
RETURN

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _owner_1, name: _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
_owner_1(address) := ϕ(['_owner_3', '_owner_0'])
Phi
[i]Type for _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _owner_1, name: _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Ssa_name: _owner_1, name: _owner

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
End popogation
RETURN _owner_1
RETURN

Name: _owner Function: owner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
Source address: 1
Source address: 1
[i]Type for TMP_5

Name: TMP_5 Function: _checkOwner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_6(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
FIND RETURN
ENTRY_POINT
_msgSender()
ENTRY_POINT
Propogating All
RETURN msg.sender
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN msg.sender
RETURN
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN msg.sender
RETURN
Source address: u
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: _checkOwner
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_7(bool) = TMP_5 == TMP_6
[i]Type for TMP_7

Name: TMP_7 Function: _checkOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,Ownable: caller is not the owner)
[i]Type for TMP_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_5 cleared
[i] TMP_6 cleared
[i] TMP_7 cleared
Propogating parameters and globals to SSA variables...
End popogation
TMP_5(address) = INTERNAL_CALL, Ownable.owner()()
New param cache []
Old param cache: []
Source address: 1
[i]Type for TMP_5

Name: TMP_5 Function: _checkOwner
Num: -1
Den: -1
Address: 1
Norm: 0
LF: _owner
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_6(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_6

Name: TMP_6 Function: _checkOwner
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_7(bool) = TMP_5 == TMP_6
[i]Type for TMP_7

Name: TMP_7 Function: _checkOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_8(None) = SOLIDITY_CALL require(bool,string)(TMP_7,Ownable: caller is not the owner)
[i]Type for TMP_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, Ownable._checkOwner()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_27 cleared
[i] TMP_28 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _token_1, name: _token

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -997

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_27 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_27

Name: TMP_27 Function: add
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(bool) = _token_1 != TMP_27
[i]Type for TMP_28

Name: TMP_28 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,zero address)
[i]Type for TMP_29

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_40 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _startBlock_1, name: _startBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
End popogation
TMP_40(bool) = block.number > _startBlock_1
[i]Type for TMP_40

Name: TMP_40 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] lastRewardBlock cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lastRewardBlock_1, name: lastRewardBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lastRewardBlock, Num: 1
Globalname: lastRewardBlock, contract_name: MasterChef
End popogation
lastRewardBlock_1(uint256) := block.number(uint256)
asgn
[i]Type for lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] lastRewardBlock cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: lastRewardBlock_2, name: lastRewardBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lastRewardBlock, Num: 2
Globalname: lastRewardBlock, contract_name: MasterChef
End popogation
lastRewardBlock_2(uint256) := _startBlock_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] lastRewardBlock cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: lastRewardBlock_3, name: lastRewardBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lastRewardBlock, Num: 3
Globalname: lastRewardBlock, contract_name: MasterChef
lastRewardBlock_3(uint256) := ϕ(['lastRewardBlock_1', 'lastRewardBlock_2'])
Phi

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_30 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _allocationPoints_1, name: _allocationPoints

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _allocationPoints, Num: 1
Globalname: _allocationPoints, contract_name: MasterChef
Ssa_name: totalAllocPoint_2, name: totalAllocPoint

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalAllocPoint, Num: 2
Globalname: totalAllocPoint, contract_name: MasterChef
global...

Name: PIC_11 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalAllocPoint_2, name: totalAllocPoint

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _allocationPoints_1, name: _allocationPoints

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _allocationPoints, Num: 1
Globalname: _allocationPoints, contract_name: MasterChef
Ssa_name: totalAllocPoint_3, name: totalAllocPoint

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalAllocPoint, Num: 3
Globalname: totalAllocPoint, contract_name: MasterChef
global...

Name: PIC_11 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAllocPoint_2', '_allocationPoints_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_30

Name: TMP_30 Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_3(uint256) := TMP_30(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied totalAllocPoint
Source address: u
[i] TMP_31 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: pid_2, name: pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pid, Num: 2
Globalname: pid, contract_name: MasterChef
global...

Name: PIC_14 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: pid_2, name: pid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(uint256) -> pid_2[_token_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_6

Name: None Function: None
Num: -997
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_31(bool) = REF_6 == 0
[i]Type for TMP_31

Name: TMP_31 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,already registered)
[i]Type for TMP_32

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_33 cleared
[i] TMP_36 cleared
[i] TMP_37 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _depositFee_1, name: _depositFee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _depositFee_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _depositFee, Num: 1
Globalname: _depositFee, contract_name: MasterChef
Ssa_name: _allocationPoints_1, name: _allocationPoints

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _allocationPoints, Num: 1
Globalname: _allocationPoints, contract_name: MasterChef
Ssa_name: lastRewardBlock_3, name: lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lastRewardBlock, Num: 3
Globalname: lastRewardBlock, contract_name: MasterChef
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_6, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 6
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: poolInfo_7, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 7
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: poolInfo_6, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _depositFee_1, name: _depositFee

Name: _depositFee_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _depositFee_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _depositFee, Num: 1
Globalname: _depositFee, contract_name: MasterChef
Ssa_name: _allocationPoints_1, name: _allocationPoints

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _allocationPoints, Num: 1
Globalname: _allocationPoints, contract_name: MasterChef
Ssa_name: lastRewardBlock_3, name: lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lastRewardBlock, Num: 3
Globalname: lastRewardBlock, contract_name: MasterChef
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_7, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_8, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 8
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: poolInfo_7, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: poolInfo_7, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_8, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33 = CONVERT _token_1 to IERC20
Converting _token_1

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Source address: -997
ERC20
[i]Type for TMP_33

Name: TMP_33 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_34 = new PoolInfo(TMP_33,_allocationPoints_1,lastRewardBlock_3,0,_depositFee_1)
[i]Type for TMP_34

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_8 -> LENGTH poolInfo_6
[i]Type for REF_8

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_36(uint256) := REF_8(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for TMP_36

Name: TMP_36 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_37(uint256) = TMP_36 (c)+ 1
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_37

Name: TMP_37 Function: add
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
poolInfo_7(MasterChef.PoolInfo[]) := ϕ(['poolInfo_6'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_8 (->poolInfo_7) := TMP_37(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_8

Name: REF_8 Function: add
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_9(MasterChef.PoolInfo) -> poolInfo_7[TMP_36]
INDEX
[i]Type for REF_9

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
poolInfo_8(MasterChef.PoolInfo[]) := ϕ(['poolInfo_7'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_9 (->poolInfo_8) := TMP_34(MasterChef.PoolInfo)
asgn
Finance type key: (-1, -1)
[i]Type for REF_9

Name: REF_9 Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied poolInfo
Source address: u
Copied poolInfo
Source address: u
[i] TMP_38 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_8, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_8, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: pid_3, name: pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pid, Num: 3
Globalname: pid, contract_name: MasterChef
global...

Name: PIC_14 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: pid_3, name: pid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_10(uint256) -> pid_2[_token_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_10

Name: None Function: None
Num: -997
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_11 -> LENGTH poolInfo_8
[i]Type for REF_11

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_38(uint256) = REF_11 (c)- 1
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_38

Name: TMP_38 Function: add
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
pid_3(mapping(address => uint256)) := ϕ(['pid_2'])
Phi
[i]Type for pid

Name: pid Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_10 (->pid_3) := TMP_38(uint256)
asgn
Error with REF_10 in function add
Error with: REF_10 in function add
Finance type key: (-1, -1)
[i]Type for REF_10

Name: REF_10 Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied pid
Source address: u


poolInfo_5(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
pid_1(mapping(address => uint256)) := ϕ(['pid_0', 'pid_3'])
totalAllocPoint_1(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
MODIFIER_CALL, Ownable.onlyOwner()()
TMP_27 = CONVERT 0 to address
TMP_28(bool) = _token_1 != TMP_27
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,zero address)
TMP_40(bool) = block.number > _startBlock_1
CONDITION TMP_40
lastRewardBlock_1(uint256) := block.number(uint256)
lastRewardBlock_2(uint256) := _startBlock_1(uint256)
lastRewardBlock_3(uint256) := ϕ(['lastRewardBlock_1', 'lastRewardBlock_2'])
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAllocPoint_2', '_allocationPoints_1'] 
totalAllocPoint_3(uint256) := TMP_30(uint256)
REF_6(uint256) -> pid_2[_token_1]
TMP_31(bool) = REF_6 == 0
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,already registered)
TMP_33 = CONVERT _token_1 to IERC20
TMP_34 = new PoolInfo(TMP_33,_allocationPoints_1,lastRewardBlock_3,0,_depositFee_1)
REF_8 -> LENGTH poolInfo_6
TMP_36(uint256) := REF_8(uint256)
TMP_37(uint256) = TMP_36 (c)+ 1
poolInfo_7(MasterChef.PoolInfo[]) := ϕ(['poolInfo_6'])
REF_8 (->poolInfo_7) := TMP_37(uint256)
REF_9(MasterChef.PoolInfo) -> poolInfo_7[TMP_36]
poolInfo_8(MasterChef.PoolInfo[]) := ϕ(['poolInfo_7'])
REF_9 (->poolInfo_8) := TMP_34(MasterChef.PoolInfo)
REF_10(uint256) -> pid_2[_token_1]
REF_11 -> LENGTH poolInfo_8
TMP_38(uint256) = REF_11 (c)- 1
pid_3(mapping(address => uint256)) := ϕ(['pid_2'])
REF_10 (->pid_3) := TMP_38(uint256)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_5, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pid_1, name: pid

Name: pid Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_1, name: totalAllocPoint

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolInfo_5(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pid_1(mapping(address => uint256)) := ϕ(['pid_0', 'pid_3'])
Phi
[i]Type for pid

Name: pid Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_1(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, Ownable.onlyOwner()()
New param cache []
Old param cache: []
[i] TMP_27 cleared
[i] TMP_28 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_27 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_27

Name: TMP_27 Function: add
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_28(bool) = _token_1 != TMP_27
[i]Type for TMP_28

Name: TMP_28 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,zero address)
[i]Type for TMP_29

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_40 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
End popogation
TMP_40(bool) = block.number > _startBlock_1
[i]Type for TMP_40

Name: TMP_40 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] lastRewardBlock cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lastRewardBlock_1, name: lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lastRewardBlock, Num: 1
Globalname: lastRewardBlock, contract_name: MasterChef
End popogation
lastRewardBlock_1(uint256) := block.number(uint256)
asgn
[i]Type for lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] lastRewardBlock cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: _startBlock_1, name: _startBlock

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _startBlock_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _startBlock, Num: 1
Globalname: _startBlock, contract_name: MasterChef
Ssa_name: lastRewardBlock_2, name: lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lastRewardBlock, Num: 2
Globalname: lastRewardBlock, contract_name: MasterChef
End popogation
lastRewardBlock_2(uint256) := _startBlock_1(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] lastRewardBlock cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: lastRewardBlock_3, name: lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lastRewardBlock, Num: 3
Globalname: lastRewardBlock, contract_name: MasterChef
lastRewardBlock_3(uint256) := ϕ(['lastRewardBlock_1', 'lastRewardBlock_2'])
Phi

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_30 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _allocationPoints_1, name: _allocationPoints

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _allocationPoints, Num: 1
Globalname: _allocationPoints, contract_name: MasterChef
Ssa_name: totalAllocPoint_2, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_2, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _allocationPoints_1, name: _allocationPoints

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _allocationPoints, Num: 1
Globalname: _allocationPoints, contract_name: MasterChef
Ssa_name: totalAllocPoint_3, name: totalAllocPoint

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_30(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAllocPoint_2', '_allocationPoints_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_30

Name: TMP_30 Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_3(uint256) := TMP_30(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied totalAllocPoint
Source address: u
[i] TMP_31 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: pid_2, name: pid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pid_2, name: pid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
End popogation
REF_6(uint256) -> pid_2[_token_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_6

Name: None Function: None
Num: -997
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_31(bool) = REF_6 == 0
[i]Type for TMP_31

Name: TMP_31 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,already registered)
[i]Type for TMP_32

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_33 cleared
[i] TMP_36 cleared
[i] TMP_37 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _depositFee_1, name: _depositFee

Name: _depositFee_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _depositFee_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _depositFee, Num: 1
Globalname: _depositFee, contract_name: MasterChef
Ssa_name: _allocationPoints_1, name: _allocationPoints

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _allocationPoints, Num: 1
Globalname: _allocationPoints, contract_name: MasterChef
Ssa_name: lastRewardBlock_3, name: lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lastRewardBlock, Num: 3
Globalname: lastRewardBlock, contract_name: MasterChef
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_6, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_7, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_6, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _depositFee_1, name: _depositFee

Name: _depositFee_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _depositFee_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _depositFee, Num: 1
Globalname: _depositFee, contract_name: MasterChef
Ssa_name: _allocationPoints_1, name: _allocationPoints

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _allocationPoints_1 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _allocationPoints, Num: 1
Globalname: _allocationPoints, contract_name: MasterChef
Ssa_name: lastRewardBlock_3, name: lastRewardBlock

Name: lastRewardBlock Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lastRewardBlock, Num: 3
Globalname: lastRewardBlock, contract_name: MasterChef
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_7, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_8, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_7, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: poolInfo_7, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_8, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_33 = CONVERT _token_1 to IERC20
Converting _token_1

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Source address: -997
ERC20
[i]Type for TMP_33

Name: TMP_33 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: ERC20
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_34 = new PoolInfo(TMP_33,_allocationPoints_1,lastRewardBlock_3,0,_depositFee_1)
[i]Type for TMP_34

Name: TMP_34 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_8 -> LENGTH poolInfo_6
[i]Type for REF_8

Name: REF_8 Function: add
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_36(uint256) := REF_8(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for TMP_36

Name: TMP_36 Function: add
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
TMP_37(uint256) = TMP_36 (c)+ 1
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
[i]Type for TMP_37

Name: TMP_37 Function: add
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
poolInfo_7(MasterChef.PoolInfo[]) := ϕ(['poolInfo_6'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_8 (->poolInfo_7) := TMP_37(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_8

Name: REF_8 Function: add
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_9(MasterChef.PoolInfo) -> poolInfo_7[TMP_36]
INDEX
[i]Type for REF_9

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
poolInfo_8(MasterChef.PoolInfo[]) := ϕ(['poolInfo_7'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_9 (->poolInfo_8) := TMP_34(MasterChef.PoolInfo)
asgn
Finance type key: (-1, -1)
[i]Type for REF_9

Name: REF_9 Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied poolInfo
Source address: u
Copied poolInfo
Source address: u
[i] TMP_38 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_8, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_8, name: poolInfo

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _token_1, name: _token

Name: _token_1 Function: add
Num: 
Den: 
Address: -997
Norm: 6
LF: _token
Value: u
Fields: 
Finance Type: undef
Ssa_name: pid_3, name: pid

Name: pid Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: pid_3, name: pid

Name: pid Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_10(uint256) -> pid_2[_token_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_10

Name: None Function: None
Num: -997
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_11 -> LENGTH poolInfo_8
[i]Type for REF_11

Name: REF_11 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_38(uint256) = REF_11 (c)- 1
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for TMP_38

Name: TMP_38 Function: add
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
pid_3(mapping(address => uint256)) := ϕ(['pid_2'])
Phi
[i]Type for pid

Name: pid Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_10 (->pid_3) := TMP_38(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for REF_10

Name: REF_10 Function: add
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Copied pid
Source address: u
Reading Function: poolLength
Function poolLength not marked
Reading Function: getMultiplier
Checking funcion...



getMultiplier
Function name: getMultiplier
Finding type for _from(uint256 ... )
Value: u
Finding type for _to(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
getMultiplier(uint256,uint256)


_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
_to_1(uint256) := ϕ(['block.number'])
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
RETURN TMP_41


[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _to, Num: 1
Globalname: _to, contract_name: MasterChef
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi

Name: block.number Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _to, Num: 1
Globalname: _to, contract_name: MasterChef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _to, Num: 1
Globalname: _to, contract_name: MasterChef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
_to_1(uint256) := ϕ(['block.number'])
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
RETURN TMP_41


[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _to, Num: 1
Globalname: _to, contract_name: MasterChef
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi

Name: block.number Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _to, Num: 1
Globalname: _to, contract_name: MasterChef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _to, Num: 1
Globalname: _to, contract_name: MasterChef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Reading Function: pendingConcur
Checking funcion...



pendingConcur
Function name: pendingConcur
Finding type for _pid(uint256 ... )
Value: u
Finding type for _user(address ... )
prev address? u
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[], [], 0, '_user', [], -1, -996, 'u']]
FIND RETURN
ENTRY_POINT
pendingConcur(uint256,address)


poolInfo_10(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
userInfo_1(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
concurPerBlock_1(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
totalAllocPoint_4(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
_concurShareMultiplier_1(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
REF_14(MasterChef.PoolInfo) -> poolInfo_10[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_14(MasterChef.PoolInfo)
REF_15(mapping(address => MasterChef.UserInfo)) -> userInfo_1[_pid_1]
REF_16(MasterChef.UserInfo) -> REF_15[_user_1]
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_16(MasterChef.UserInfo)
REF_17(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
accConcurPerShare_1(uint256) := REF_17(uint256)
REF_18(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
TMP_42 = CONVERT this to address
TMP_43(uint256) = HIGH_LEVEL_CALL, dest:REF_18(IERC20), function:balanceOf, arguments:['TMP_42']  
concurPerBlock_2(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_1', 'concurPerBlock_6', 'concurPerBlock_2'])
totalAllocPoint_5(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_4', 'totalAllocPoint_5', 'totalAllocPoint_9'])
_concurShareMultiplier_2(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_1', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
lpSupply_1(uint256) := TMP_43(uint256)
REF_20(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
TMP_44(bool) = block.number > REF_20
TMP_45(bool) = lpSupply_1 != 0
TMP_46(bool) = TMP_44 && TMP_45
CONDITION TMP_46
REF_21(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
TMP_47(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_21,block.number)
multiplier_1(uint256) := TMP_47(uint256)
accConcurPerShare_3(uint256) := ϕ(['accConcurPerShare_1', 'accConcurPerShare_2'])
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_3'] 
REF_24(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_48', 'REF_24'] 
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_49', 'totalAllocPoint_6'] 
concurReward_1(uint256) := TMP_50(uint256)
REF_29(uint128) -> user_1 (-> ['userInfo']).amount
TMP_54(uint128) = REF_29 (c)* accConcurPerShare_3
TMP_55(uint128) = TMP_54 (c)/ _concurShareMultiplier_3
REF_30(uint128) -> user_1 (-> ['userInfo']).rewardDebt
TMP_56(uint128) = TMP_55 (c)- REF_30
RETURN TMP_56
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_3'] 
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_51', 'lpSupply_1'] 
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['accConcurPerShare_1', 'TMP_52'] 
accConcurPerShare_2(uint256) := TMP_53(uint256)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_10, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 10
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: userInfo_1, name: userInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: userInfo, Num: 1
Globalname: userInfo, contract_name: MasterChef
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: concurPerBlock_1, name: concurPerBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurPerBlock, Num: 1
Globalname: concurPerBlock, contract_name: MasterChef
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalAllocPoint_4, name: totalAllocPoint

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalAllocPoint, Num: 4
Globalname: totalAllocPoint, contract_name: MasterChef
global...

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _concurShareMultiplier_1, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 1
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
poolInfo_10(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userInfo_1(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
Phi
[i]Type for userInfo

Name: userInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurPerBlock_1(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_4(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_1(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_10, name: poolInfo

Name: poolInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_10, name: poolInfo

Name: poolInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_14(MasterChef.PoolInfo) -> poolInfo_10[_pid_1]
INDEX
[i]Type for REF_14

Name: poolInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_14(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _user_1, name: _user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -996

Name: _user_1 Function: pendingConcur
Num: 
Den: 
Address: -996
Norm: 0
LF: _user
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: userInfo_1, name: userInfo

Name: userInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_1, name: userInfo

Name: userInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _user_1, name: _user

Name: _user_1 Function: pendingConcur
Num: 
Den: 
Address: -996
Norm: 0
LF: _user
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 1 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
REF_15(mapping(address => MasterChef.UserInfo)) -> userInfo_1[_pid_1]
INDEX
[i]Type for REF_15

Name: userInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_16(MasterChef.UserInfo) -> REF_15[_user_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_16

Name: userInfo Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_16(MasterChef.UserInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] accConcurPerShare cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: accConcurPerShare_1, name: accConcurPerShare

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 1
Globalname: accConcurPerShare, contract_name: MasterChef
End popogation
REF_17(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: pendingConcur_pool_accConcurPerShare
OUT KEY: pendingConcur_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_17

Name: REF_17 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_17 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
accConcurPerShare_1(uint256) := REF_17(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_42 cleared
[i] TMP_43 cleared
[i] lpSupply cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lpSupply, Num: 1
Globalname: lpSupply, contract_name: MasterChef
End popogation
Ssa_name: concurPerBlock_2, name: concurPerBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurPerBlock, Num: 2
Globalname: concurPerBlock, contract_name: MasterChef
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalAllocPoint_5, name: totalAllocPoint

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalAllocPoint, Num: 5
Globalname: totalAllocPoint, contract_name: MasterChef
global...

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _concurShareMultiplier_2, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 2
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_18(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
MEMBER
OUT KEY: pendingConcur_pool_depositToken
OUT KEY: pendingConcur_pool_depositToken
FTT: None
No field found
[i]Type for REF_18

Name: REF_18 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositToken
#################
Member: 
Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Fieldf: 
Name: depositToken Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_18 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_42 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 2
2
2
[i]Type for TMP_42

Name: TMP_42 Function: pendingConcur
Num: -1
Den: -1
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_43(uint256) = HIGH_LEVEL_CALL, dest:REF_18(IERC20), function:balanceOf, arguments:['TMP_42']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
global assignment: 3
3
[i]Type for TMP_43

Name: TMP_43 Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concurPerBlock_2(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_1', 'concurPerBlock_6', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_5(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_4', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_2(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_1', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_1(uint256) := TMP_43(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for lpSupply

Name: lpSupply Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] TMP_44 cleared
[i] TMP_45 cleared
[i] TMP_46 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken
Finance Type: undef
End popogation
REF_20(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: pendingConcur_pool_lastRewardBlock
OUT KEY: pendingConcur_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_20

Name: REF_20 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_20 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_44(bool) = block.number > REF_20
[i]Type for TMP_44

Name: TMP_44 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_45(bool) = lpSupply_1 != 0
[i]Type for TMP_45

Name: TMP_45 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(bool) = TMP_44 && TMP_45
[i]Type for TMP_46

Name: TMP_46 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_47 cleared
[i] multiplier cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: multiplier, Num: 1
Globalname: multiplier, contract_name: MasterChef
End popogation
REF_21(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: pendingConcur_pool_lastRewardBlock
OUT KEY: pendingConcur_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_21

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_21,block.number)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
getMultiplier(uint256,uint256)
ENTRY_POINT
Propogating All
RETURN _to.sub(_from)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
multiplier_1(uint256) := TMP_47(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for multiplier

Name: multiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] accConcurPerShare cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: accConcurPerShare_3, name: accConcurPerShare

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 3
Globalname: accConcurPerShare, contract_name: MasterChef
accConcurPerShare_3(uint256) := ϕ(['accConcurPerShare_1', 'accConcurPerShare_2'])
Phi

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_48 cleared
[i] TMP_49 cleared
[i] TMP_50 cleared
[i] concurReward cleared
Propogating parameters and globals to SSA variables...
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock
Finance Type: undef
Ssa_name: concurPerBlock_3, name: concurPerBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurPerBlock, Num: 3
Globalname: concurPerBlock, contract_name: MasterChef
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalAllocPoint_6, name: totalAllocPoint

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalAllocPoint, Num: 6
Globalname: totalAllocPoint, contract_name: MasterChef
global...

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: concurPerBlock_3, name: concurPerBlock

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_6, name: totalAllocPoint

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock
Finance Type: undef
Ssa_name: concurReward_1, name: concurReward

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurReward, Num: 1
Globalname: concurReward, contract_name: MasterChef
End popogation
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_3'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_48

Name: TMP_48 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: pendingConcur_pool_allocPoint
OUT KEY: pendingConcur_pool_allocPoint
FTT: None
No field found
[i]Type for REF_24

Name: REF_24 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock
Finance Type: undef
Fieldf: 
Name: allocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_24 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_48', 'REF_24'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_49

Name: TMP_49 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_49', 'totalAllocPoint_6'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_50

Name: TMP_50 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurReward_1(uint256) := TMP_50(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for concurReward

Name: concurReward Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_54 cleared
[i] TMP_55 cleared
[i] TMP_56 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: accConcurPerShare_3, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 3
Globalname: accConcurPerShare, contract_name: MasterChef
Ssa_name: _concurShareMultiplier_3, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 3
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_3, name: _concurShareMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: accConcurPerShare_3, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 3
Globalname: accConcurPerShare, contract_name: MasterChef
End popogation
REF_29(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: pendingConcur_user_amount
OUT KEY: pendingConcur_user_amount
FTT: None
No field found
[i]Type for REF_29

Name: REF_29 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_29 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_54(uint128) = REF_29 (c)* accConcurPerShare_3
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_54

Name: TMP_54 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_55(uint128) = TMP_54 (c)/ _concurShareMultiplier_3
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_55

Name: TMP_55 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_30(uint128) -> user_1 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: pendingConcur_user_rewardDebt
OUT KEY: pendingConcur_user_rewardDebt
FTT: None
No field found
[i]Type for REF_30

Name: REF_30 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: amount
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_30 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_56(uint128) = TMP_55 (c)- REF_30
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_56

Name: TMP_56 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_56
RETURN

Name: TMP_56 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i] TMP_51 cleared
[i] TMP_52 cleared
[i] TMP_53 cleared
[i] accConcurPerShare cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: accConcurPerShare_1, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 1
Globalname: accConcurPerShare, contract_name: MasterChef
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_3, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: accConcurPerShare_1, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 1
Globalname: accConcurPerShare, contract_name: MasterChef
Ssa_name: _concurShareMultiplier_3, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: accConcurPerShare_2, name: accConcurPerShare

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 2
Globalname: accConcurPerShare, contract_name: MasterChef
End popogation
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_3'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_51', 'lpSupply_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_52

Name: TMP_52 Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['accConcurPerShare_1', 'TMP_52'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_53

Name: TMP_53 Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
accConcurPerShare_2(uint256) := TMP_53(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX


poolInfo_10(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
userInfo_1(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
concurPerBlock_1(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
totalAllocPoint_4(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
_concurShareMultiplier_1(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
REF_14(MasterChef.PoolInfo) -> poolInfo_10[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_14(MasterChef.PoolInfo)
REF_15(mapping(address => MasterChef.UserInfo)) -> userInfo_1[_pid_1]
REF_16(MasterChef.UserInfo) -> REF_15[_user_1]
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_16(MasterChef.UserInfo)
REF_17(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
accConcurPerShare_1(uint256) := REF_17(uint256)
REF_18(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
TMP_42 = CONVERT this to address
TMP_43(uint256) = HIGH_LEVEL_CALL, dest:REF_18(IERC20), function:balanceOf, arguments:['TMP_42']  
concurPerBlock_2(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_1', 'concurPerBlock_6', 'concurPerBlock_2'])
totalAllocPoint_5(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_4', 'totalAllocPoint_5', 'totalAllocPoint_9'])
_concurShareMultiplier_2(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_1', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
lpSupply_1(uint256) := TMP_43(uint256)
REF_20(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
TMP_44(bool) = block.number > REF_20
TMP_45(bool) = lpSupply_1 != 0
TMP_46(bool) = TMP_44 && TMP_45
CONDITION TMP_46
REF_21(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
TMP_47(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_21,block.number)
multiplier_1(uint256) := TMP_47(uint256)
accConcurPerShare_3(uint256) := ϕ(['accConcurPerShare_1', 'accConcurPerShare_2'])
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_3'] 
REF_24(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_48', 'REF_24'] 
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_49', 'totalAllocPoint_6'] 
concurReward_1(uint256) := TMP_50(uint256)
REF_29(uint128) -> user_1 (-> ['userInfo']).amount
TMP_54(uint128) = REF_29 (c)* accConcurPerShare_3
TMP_55(uint128) = TMP_54 (c)/ _concurShareMultiplier_3
REF_30(uint128) -> user_1 (-> ['userInfo']).rewardDebt
TMP_56(uint128) = TMP_55 (c)- REF_30
RETURN TMP_56
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_3'] 
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_51', 'lpSupply_1'] 
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['accConcurPerShare_1', 'TMP_52'] 
accConcurPerShare_2(uint256) := TMP_53(uint256)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_10, name: poolInfo

Name: poolInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_1, name: userInfo

Name: userInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_1, name: concurPerBlock

Name: concurPerBlock Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_4, name: totalAllocPoint

Name: totalAllocPoint Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_1, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolInfo_10(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userInfo_1(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
Phi
[i]Type for userInfo

Name: userInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurPerBlock_1(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_4(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_1(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_10, name: poolInfo

Name: poolInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_10, name: poolInfo

Name: poolInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_14(MasterChef.PoolInfo) -> poolInfo_10[_pid_1]
INDEX
[i]Type for REF_14

Name: poolInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_14(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
XXXX
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _user_1, name: _user

Name: _user_1 Function: pendingConcur
Num: 
Den: 
Address: -996
Norm: 0
LF: _user
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_1, name: userInfo

Name: userInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_1, name: userInfo

Name: userInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _user_1, name: _user

Name: _user_1 Function: pendingConcur
Num: 
Den: 
Address: -996
Norm: 0
LF: _user
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 1 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
REF_15(mapping(address => MasterChef.UserInfo)) -> userInfo_1[_pid_1]
INDEX
[i]Type for REF_15

Name: userInfo Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_16(MasterChef.UserInfo) -> REF_15[_user_1]
INDEX
REFERENCE RIGHT VALUE PROPAGATION
[i]Type for REF_16

Name: userInfo Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_16(MasterChef.UserInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
[i] accConcurPerShare cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Ssa_name: accConcurPerShare_1, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 1
Globalname: accConcurPerShare, contract_name: MasterChef
End popogation
REF_17(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: pendingConcur_pool_accConcurPerShare
OUT KEY: pendingConcur_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_17

Name: REF_17 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_17 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
accConcurPerShare_1(uint256) := REF_17(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_42 cleared
[i] TMP_43 cleared
[i] lpSupply cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lpSupply, Num: 1
Globalname: lpSupply, contract_name: MasterChef
End popogation
Ssa_name: concurPerBlock_2, name: concurPerBlock

Name: concurPerBlock Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_5, name: totalAllocPoint

Name: totalAllocPoint Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_2, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_18(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
MEMBER
OUT KEY: pendingConcur_pool_depositToken
OUT KEY: pendingConcur_pool_depositToken
FTT: None
No field found
[i]Type for REF_18

Name: REF_18 Function: pendingConcur
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositToken
#################
Member: 
Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Fieldf: 
Name: depositToken Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_18 Function: pendingConcur
Num: 
Den: 
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: 3
Finance type key: (-1, -1)
Added to member...

Name: depositToken Function: pendingConcur
Num: -1
Den: -1
Address: 3
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_42 = CONVERT this to address
Converting this
2
[i]Type for TMP_42

Name: TMP_42 Function: pendingConcur
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_43(uint256) = HIGH_LEVEL_CALL, dest:REF_18(IERC20), function:balanceOf, arguments:['TMP_42']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
3
[i]Type for TMP_43

Name: TMP_43 Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concurPerBlock_2(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_1', 'concurPerBlock_6', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_5(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_4', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_2(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_1', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_1(uint256) := TMP_43(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for lpSupply

Name: lpSupply Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] TMP_44 cleared
[i] TMP_45 cleared
[i] TMP_46 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
End popogation
REF_20(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: pendingConcur_pool_lastRewardBlock
OUT KEY: pendingConcur_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_20

Name: REF_20 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_20 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_44(bool) = block.number > REF_20
[i]Type for TMP_44

Name: TMP_44 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_45(bool) = lpSupply_1 != 0
[i]Type for TMP_45

Name: TMP_45 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_46(bool) = TMP_44 && TMP_45
[i]Type for TMP_46

Name: TMP_46 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_47 cleared
[i] multiplier cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: multiplier, Num: 1
Globalname: multiplier, contract_name: MasterChef
End popogation
REF_21(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: pendingConcur_pool_lastRewardBlock
OUT KEY: pendingConcur_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_21

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_47(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_21,block.number)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
getMultiplier(uint256,uint256)
ENTRY_POINT
Propogating All
RETURN _to.sub(_from)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_47

Name: TMP_47 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
multiplier_1(uint256) := TMP_47(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for multiplier

Name: multiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] accConcurPerShare cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: accConcurPerShare_3, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 3
Globalname: accConcurPerShare, contract_name: MasterChef
accConcurPerShare_3(uint256) := ϕ(['accConcurPerShare_1', 'accConcurPerShare_2'])
Phi

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: accConcurPerShare Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance


END==================================
Source address: u
[i]Type for accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] TMP_48 cleared
[i] TMP_49 cleared
[i] TMP_50 cleared
[i] concurReward cleared
Propogating parameters and globals to SSA variables...
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Ssa_name: concurPerBlock_3, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_6, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_3, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_6, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurReward, Num: 1
Globalname: concurReward, contract_name: MasterChef
End popogation
TMP_48(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_3'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_48

Name: TMP_48 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: pendingConcur_pool_allocPoint
OUT KEY: pendingConcur_pool_allocPoint
FTT: None
No field found
[i]Type for REF_24

Name: REF_24 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositToken, lastRewardBlock, allocPoint
Finance Type: undef
Fieldf: 
Name: allocPoint Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_24 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_49(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_48', 'REF_24'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_49

Name: TMP_49 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_49', 'totalAllocPoint_6'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_50

Name: TMP_50 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurReward_1(uint256) := TMP_50(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for concurReward

Name: concurReward Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_54 cleared
[i] TMP_55 cleared
[i] TMP_56 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: accConcurPerShare_3, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _concurShareMultiplier_3, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _concurShareMultiplier_3, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: accConcurPerShare_3, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
End popogation
REF_29(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: pendingConcur_user_amount
OUT KEY: pendingConcur_user_amount
FTT: None
No field found
[i]Type for REF_29

Name: REF_29 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_29 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(uint128) = REF_29 (c)* accConcurPerShare_3
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_54

Name: TMP_54 Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_55(uint128) = TMP_54 (c)/ _concurShareMultiplier_3
A: u B: u
lnorm: u rnorm: u
Source address: u
A: u B: u
lnorm: u rnorm: u
-1
3
[i]Type for TMP_55

Name: TMP_55 Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
REF_30(uint128) -> user_1 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: pendingConcur_user_rewardDebt
OUT KEY: pendingConcur_user_rewardDebt
FTT: None
No field found
[i]Type for REF_30

Name: REF_30 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: pendingConcur
Num: -996
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_30 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_56(uint128) = TMP_55 (c)- REF_30
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_56

Name: TMP_56 Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_56
RETURN

Name: TMP_56 Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i] TMP_51 cleared
[i] TMP_52 cleared
[i] TMP_53 cleared
[i] accConcurPerShare cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: accConcurPerShare_1, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 1
Globalname: accConcurPerShare, contract_name: MasterChef
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_3, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: pendingConcur
Num: 3
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: accConcurPerShare_1, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 1
Globalname: accConcurPerShare, contract_name: MasterChef
Ssa_name: _concurShareMultiplier_3, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: accConcurPerShare_2, name: accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: accConcurPerShare, Num: 2
Globalname: accConcurPerShare, contract_name: MasterChef
End popogation
TMP_51(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_3'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_51

Name: TMP_51 Function: pendingConcur
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_51', 'lpSupply_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_52

Name: TMP_52 Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_53(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['accConcurPerShare_1', 'TMP_52'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_53

Name: TMP_53 Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
accConcurPerShare_2(uint256) := TMP_53(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for accConcurPerShare

Name: accConcurPerShare Function: pendingConcur
Num: -1
Den: 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Reading Function: massUpdatePools
Checking funcion...



massUpdatePools
Function name: massUpdatePools
New param cache []
FIND RETURN
ENTRY_POINT
massUpdatePools()


poolInfo_11(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
REF_31 -> LENGTH poolInfo_11
length_1(uint256) := REF_31(uint256)
_pid_1(uint256) := 0(uint256)
_pid_2(uint256) := ϕ(['_pid_3', '_pid_1'])
TMP_57(bool) = _pid_2 < length_1
CONDITION TMP_57
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_2)
_pid_3(uint256) = _pid_2 (c)+ 1


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_11, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 11
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
poolInfo_11(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] length cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_11, name: poolInfo

Name: poolInfo Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_11, name: poolInfo

Name: poolInfo Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: length_1, name: length

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: length, Num: 1
Globalname: length, contract_name: MasterChef
End popogation
REF_31 -> LENGTH poolInfo_11
[i]Type for REF_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
length_1(uint256) := REF_31(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for length

Name: length Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] _pid cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
End popogation
_pid_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _pid

Name: _pid Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] _pid cleared
[i] TMP_57 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: length_1, name: length

Name: length Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: length, Num: 1
Globalname: length, contract_name: MasterChef
Ssa_name: _pid_2, name: _pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
Ssa_name: length_1, name: length

Name: length Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: length, Num: 1
Globalname: length, contract_name: MasterChef
Ssa_name: _pid_2, name: _pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_2, name: _pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
End popogation
Ssa_name: _pid_2, name: _pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
_pid_2(uint256) := ϕ(['_pid_3', '_pid_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _pid Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_57(bool) = _pid_2 < length_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_57

Name: TMP_57 Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
End popogation
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_2)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _pid Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
updatePool(uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE pool = poolInfo[_pid]
Propogating All
_pid_1
Ssa_name: _pid_1, name: _pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
IF block.number <= pool.lastRewardBlock
Propogating All
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
RETURN
Propogating All
NEW VARIABLE lpSupply = pool.depositToken.balanceOf(address(this))
Propogating All
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
IF lpSupply == 0 || pool.allocPoint == 0
Propogating All
lpSupply_1
Ssa_name: lpSupply_1, name: lpSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
Propogating All
IF block.number >= endBlock
Propogating All
EXPRESSION pool.lastRewardBlock = block.number
Propogating All
END_IF
Propogating All
NEW VARIABLE multiplier = getMultiplier(pool.lastRewardBlock,block.number)
Propogating All
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN
Propogating All
EXPRESSION pool.lastRewardBlock = block.number
Propogating All
NEW VARIABLE concurReward = multiplier.mul(concurPerBlock).mul(pool.allocPoint).div(totalAllocPoint)
Propogating All
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
multiplier_1
Ssa_name: multiplier_1, name: multiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN
Propogating All
EXPRESSION pool.accConcurPerShare = pool.accConcurPerShare.add(concurReward.mul(_concurShareMultiplier).div(lpSupply))
Propogating All
lpSupply_1
Ssa_name: lpSupply_1, name: lpSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
concurReward_1
Ssa_name: concurReward_1, name: concurReward

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION pool.lastRewardBlock = block.number
Propogating All
[i] _pid cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 12
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: concurPerBlock_4, name: concurPerBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurPerBlock, Num: 4
Globalname: concurPerBlock, contract_name: MasterChef
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalAllocPoint_7, name: totalAllocPoint

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalAllocPoint, Num: 7
Globalname: totalAllocPoint, contract_name: MasterChef
global...

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: endBlock_2, name: endBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: endBlock, Num: 2
Globalname: endBlock, contract_name: MasterChef
global...

Name: endBlock Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _concurShareMultiplier_4, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 4
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
_pid_1(uint256) := ϕ(['_pid_1', '_pid_2', '_pid_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_12(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurPerBlock_4(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_7(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_2(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_0'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_4(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_32(MasterChef.PoolInfo) -> poolInfo_12[_pid_1]
INDEX
[i]Type for REF_32

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_32(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_59 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_33(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_33

Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_59(bool) = block.number <= REF_33
[i]Type for TMP_59

Name: TMP_59 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_60 cleared
[i] TMP_61 cleared
[i] lpSupply cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lpSupply, Num: 1
Globalname: lpSupply, contract_name: MasterChef
End popogation
Ssa_name: concurPerBlock_5, name: concurPerBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurPerBlock, Num: 5
Globalname: concurPerBlock, contract_name: MasterChef
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalAllocPoint_8, name: totalAllocPoint

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalAllocPoint, Num: 8
Globalname: totalAllocPoint, contract_name: MasterChef
global...

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: endBlock_3, name: endBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: endBlock, Num: 3
Globalname: endBlock, contract_name: MasterChef
global...

Name: endBlock Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _concurShareMultiplier_5, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 5
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
REF_34(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
MEMBER
OUT KEY: updatePool_pool_depositToken
OUT KEY: updatePool_pool_depositToken
FTT: None
No field found
[i]Type for REF_34

Name: REF_34 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositToken
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock
Finance Type: undef
Fieldf: 
Name: depositToken Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_34 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_60 = CONVERT this to address
Converting this
2
[i]Type for TMP_60

Name: TMP_60 Function: updatePool
Num: -1
Den: -1
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:REF_34(IERC20), function:balanceOf, arguments:['TMP_60']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
global assignment: 4
4
[i]Type for TMP_61

Name: TMP_61 Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concurPerBlock_5(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_6', 'concurPerBlock_4', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_8(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_7', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_3(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_2'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_5(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_4', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_1(uint256) := TMP_61(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] TMP_62 cleared
[i] TMP_63 cleared
[i] TMP_64 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken
Finance Type: undef
End popogation
TMP_62(bool) = lpSupply_1 == 0
[i]Type for TMP_62

Name: TMP_62 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_36(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_36

Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken
Finance Type: undef
Fieldf: 
Name: allocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_63(bool) = REF_36 == 0
[i]Type for TMP_63

Name: TMP_63 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64(bool) = TMP_62 || TMP_63
[i]Type for TMP_64

Name: TMP_64 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_65 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_65(bool) = block.number >= endBlock_3
[i]Type for TMP_65

Name: TMP_65 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_16, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 16
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_16, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_37(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
pool_5 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
XXXX
REF_37 (->pool_5 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_16(MasterChef.PoolInfo[]) := ϕ(["pool_5 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_66 cleared
[i] multiplier cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: multiplier, Num: 1
Globalname: multiplier, contract_name: MasterChef
End popogation
REF_39(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_39

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_39,block.number)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
getMultiplier(uint256,uint256)
ENTRY_POINT
Propogating All
RETURN _to.sub(_from)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_66

Name: TMP_66 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
multiplier_1(uint256) := TMP_66(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 13
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_38(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
pool_2 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
XXXX
REF_38 (->pool_2 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_13(MasterChef.PoolInfo[]) := ϕ(["pool_2 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] TMP_67 cleared
[i] TMP_68 cleared
[i] TMP_69 cleared
[i] concurReward cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurPerBlock, Num: 6
Globalname: concurPerBlock, contract_name: MasterChef
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: totalAllocPoint, Num: 9
Globalname: totalAllocPoint, contract_name: MasterChef
global...

Name: totalAllocPoint Function: add
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurReward_1, name: concurReward

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurReward, Num: 1
Globalname: concurReward, contract_name: MasterChef
End popogation
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_67

Name: TMP_67 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_42(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_42

Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Fieldf: 
Name: allocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_67', 'REF_42'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_68

Name: TMP_68 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_68', 'totalAllocPoint_9'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_69

Name: TMP_69 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurReward_1(uint256) := TMP_69(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_70 cleared
[i] TMP_71 cleared
[i] TMP_72 cleared
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 6
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_14, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 14
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_14, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
REF_45(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_45

Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_70

Name: TMP_70 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_70', 'lpSupply_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_71

Name: TMP_71 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_45', 'TMP_71'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_72

Name: TMP_72 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
pool_3 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_44 (->pool_3 (-> ['poolInfo'])) := TMP_72(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
poolInfo_14(MasterChef.PoolInfo[]) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_15, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 15
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_15, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_49(uint256) -> pool_3 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
pool_4 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_49 (->pool_4 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_15(MasterChef.PoolInfo[]) := ϕ(["pool_4 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] _pid cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_4, name: concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_7, name: totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_2, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_4, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pid_1(uint256) := ϕ(['_pid_1', '_pid_2', '_pid_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_12(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurPerBlock_4(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_7(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_2(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_0'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_4(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_32(MasterChef.PoolInfo) -> poolInfo_12[_pid_1]
INDEX
[i]Type for REF_32

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_32(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
[i] TMP_59 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
End popogation
REF_33(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_33

Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(bool) = block.number <= REF_33
[i]Type for TMP_59

Name: TMP_59 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_60 cleared
[i] TMP_61 cleared
[i] lpSupply cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lpSupply, Num: 1
Globalname: lpSupply, contract_name: MasterChef
End popogation
Ssa_name: concurPerBlock_5, name: concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_8, name: totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_5, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_34(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
MEMBER
OUT KEY: updatePool_pool_depositToken
OUT KEY: updatePool_pool_depositToken
FTT: None
No field found
[i]Type for REF_34

Name: REF_34 Function: updatePool
Num: 
Den: 
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositToken
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: depositToken Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_34 Function: updatePool
Num: 
Den: 
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: 4
Finance type key: (-1, -1)
Added to member...

Name: depositToken Function: updatePool
Num: -1
Den: -1
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_60 = CONVERT this to address
Converting this
2
[i]Type for TMP_60

Name: TMP_60 Function: updatePool
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:REF_34(IERC20), function:balanceOf, arguments:['TMP_60']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
4
[i]Type for TMP_61

Name: TMP_61 Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concurPerBlock_5(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_6', 'concurPerBlock_4', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_8(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_7', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_3(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_2'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_5(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_4', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_1(uint256) := TMP_61(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] TMP_62 cleared
[i] TMP_63 cleared
[i] TMP_64 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
End popogation
TMP_62(bool) = lpSupply_1 == 0
[i]Type for TMP_62

Name: TMP_62 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_36(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_36

Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(bool) = REF_36 == 0
[i]Type for TMP_63

Name: TMP_63 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64(bool) = TMP_62 || TMP_63
[i]Type for TMP_64

Name: TMP_64 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_65 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_65(bool) = block.number >= endBlock_3
[i]Type for TMP_65

Name: TMP_65 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_16, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_16, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_37(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_5 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_37 (->pool_5 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_16(MasterChef.PoolInfo[]) := ϕ(["pool_5 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_66 cleared
[i] multiplier cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: multiplier, Num: 1
Globalname: multiplier, contract_name: MasterChef
End popogation
REF_39(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_39

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_39,block.number)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
getMultiplier(uint256,uint256)
ENTRY_POINT
Propogating All
RETURN _to.sub(_from)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_66

Name: TMP_66 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
multiplier_1(uint256) := TMP_66(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_38(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_2 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_38 (->pool_2 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_13(MasterChef.PoolInfo[]) := ϕ(["pool_2 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] TMP_67 cleared
[i] TMP_68 cleared
[i] TMP_69 cleared
[i] concurReward cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurReward, Num: 1
Globalname: concurReward, contract_name: MasterChef
End popogation
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_67

Name: TMP_67 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_42(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_42

Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: allocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_67', 'REF_42'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_68

Name: TMP_68 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_68', 'totalAllocPoint_9'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_69

Name: TMP_69 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurReward_1(uint256) := TMP_69(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_70 cleared
[i] TMP_71 cleared
[i] TMP_72 cleared
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_14, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_14, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4, 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
REF_45(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_45

Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_70

Name: TMP_70 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_70', 'lpSupply_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_71

Name: TMP_71 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_45', 'TMP_71'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_72

Name: TMP_72 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
pool_3 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_44 (->pool_3 (-> ['poolInfo'])) := TMP_72(uint256)
asgn
-1
4
Finance type key: (0, -1)
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
poolInfo_14(MasterChef.PoolInfo[]) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_15, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_15, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_49(uint256) -> pool_3 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_4 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_49 (->pool_4 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_15(MasterChef.PoolInfo[]) := ϕ(["pool_4 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
[i] _pid cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_3, name: _pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 3
Globalname: _pid, contract_name: MasterChef
End popogation
_pid_3(uint256) = _pid_2 (c)+ 1
A: u B: 0
lnorm: u rnorm: 0
Source address: u
[i]Type for _pid

Name: _pid Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX


poolInfo_11(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
REF_31 -> LENGTH poolInfo_11
length_1(uint256) := REF_31(uint256)
_pid_1(uint256) := 0(uint256)
_pid_2(uint256) := ϕ(['_pid_3', '_pid_1'])
TMP_57(bool) = _pid_2 < length_1
CONDITION TMP_57
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_2)
_pid_3(uint256) = _pid_2 (c)+ 1


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_11, name: poolInfo

Name: poolInfo Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolInfo_11(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] length cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_11, name: poolInfo

Name: poolInfo Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_11, name: poolInfo

Name: poolInfo Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: length_1, name: length

Name: length Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: length, Num: 1
Globalname: length, contract_name: MasterChef
End popogation
REF_31 -> LENGTH poolInfo_11
[i]Type for REF_31

Name: REF_31 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
length_1(uint256) := REF_31(uint256)
asgn
Finance type key: (-1, -1)
[i]Type for length

Name: length Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] _pid cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
End popogation
_pid_1(uint256) := 0(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _pid

Name: _pid Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] _pid cleared
[i] TMP_57 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: length_1, name: length

Name: length Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: length, Num: 1
Globalname: length, contract_name: MasterChef
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
Ssa_name: length_1, name: length

Name: length Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: length, Num: 1
Globalname: length, contract_name: MasterChef
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
End popogation
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
_pid_2(uint256) := ϕ(['_pid_3', '_pid_1'])
Phi

Name: _pid Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: _pid Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef


END==================================
[i]Type for _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_57(bool) = _pid_2 < length_1
A: 0 B: u
lnorm: 0 rnorm: u
[i]Type for TMP_57

Name: TMP_57 Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
End popogation
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_2)
New param cache [[[], [], 0, None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
[[], [], 0, None, [], -1, 'u', 'u']

Name: _pid Function: None
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
updatePool(uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE pool = poolInfo[_pid]
Propogating All
_pid_1
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
IF block.number <= pool.lastRewardBlock
Propogating All
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
END_IF
Propogating All
RETURN
Propogating All
NEW VARIABLE lpSupply = pool.depositToken.balanceOf(address(this))
Propogating All
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
IF lpSupply == 0 || pool.allocPoint == 0
Propogating All
lpSupply_1
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
END_IF
Propogating All
IF block.number >= endBlock
Propogating All
EXPRESSION pool.lastRewardBlock = block.number
Propogating All
END_IF
Propogating All
NEW VARIABLE multiplier = getMultiplier(pool.lastRewardBlock,block.number)
Propogating All
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
RETURN
Propogating All
EXPRESSION pool.lastRewardBlock = block.number
Propogating All
NEW VARIABLE concurReward = multiplier.mul(concurPerBlock).mul(pool.allocPoint).div(totalAllocPoint)
Propogating All
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
multiplier_1
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
RETURN
Propogating All
EXPRESSION pool.accConcurPerShare = pool.accConcurPerShare.add(concurReward.mul(_concurShareMultiplier).div(lpSupply))
Propogating All
lpSupply_1
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
concurReward_1
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
pool_1 (-> ['poolInfo'])
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
EXPRESSION pool.lastRewardBlock = block.number
Propogating All
[i] _pid cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_4, name: concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_7, name: totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_2, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_4, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pid_1(uint256) := ϕ(['_pid_1', '_pid_2', '_pid_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_12(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurPerBlock_4(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_7(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_2(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_0'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_4(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_32(MasterChef.PoolInfo) -> poolInfo_12[_pid_1]
INDEX
[i]Type for REF_32

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_32(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
[i] TMP_59 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
End popogation
REF_33(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_33

Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(bool) = block.number <= REF_33
[i]Type for TMP_59

Name: TMP_59 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_60 cleared
[i] TMP_61 cleared
[i] lpSupply cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lpSupply, Num: 1
Globalname: lpSupply, contract_name: MasterChef
End popogation
Ssa_name: concurPerBlock_5, name: concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_8, name: totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_5, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_34(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
MEMBER
OUT KEY: updatePool_pool_depositToken
OUT KEY: updatePool_pool_depositToken
FTT: None
No field found
[i]Type for REF_34

Name: REF_34 Function: updatePool
Num: 
Den: 
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositToken
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: depositToken Function: updatePool
Num: -1
Den: -1
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_34 Function: updatePool
Num: 
Den: 
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: 4
Finance type key: (-1, -1)
Added to member...

Name: depositToken Function: updatePool
Num: -1
Den: -1
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_60 = CONVERT this to address
Converting this
2
[i]Type for TMP_60

Name: TMP_60 Function: updatePool
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:REF_34(IERC20), function:balanceOf, arguments:['TMP_60']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
4
[i]Type for TMP_61

Name: TMP_61 Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concurPerBlock_5(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_6', 'concurPerBlock_4', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_8(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_7', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_3(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_2'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_5(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_4', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_1(uint256) := TMP_61(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] TMP_62 cleared
[i] TMP_63 cleared
[i] TMP_64 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
End popogation
TMP_62(bool) = lpSupply_1 == 0
[i]Type for TMP_62

Name: TMP_62 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_36(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_36

Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(bool) = REF_36 == 0
[i]Type for TMP_63

Name: TMP_63 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64(bool) = TMP_62 || TMP_63
[i]Type for TMP_64

Name: TMP_64 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_65 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_65(bool) = block.number >= endBlock_3
[i]Type for TMP_65

Name: TMP_65 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_16, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_16, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_37(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_5 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_37 (->pool_5 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_16(MasterChef.PoolInfo[]) := ϕ(["pool_5 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_66 cleared
[i] multiplier cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: multiplier, Num: 1
Globalname: multiplier, contract_name: MasterChef
End popogation
REF_39(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_39

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_39,block.number)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
getMultiplier(uint256,uint256)
ENTRY_POINT
Propogating All
RETURN _to.sub(_from)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_66

Name: TMP_66 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
multiplier_1(uint256) := TMP_66(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_38(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_2 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_38 (->pool_2 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_13(MasterChef.PoolInfo[]) := ϕ(["pool_2 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] TMP_67 cleared
[i] TMP_68 cleared
[i] TMP_69 cleared
[i] concurReward cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurReward, Num: 1
Globalname: concurReward, contract_name: MasterChef
End popogation
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_67

Name: TMP_67 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_42(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_42

Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: allocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_67', 'REF_42'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_68

Name: TMP_68 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_68', 'totalAllocPoint_9'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_69

Name: TMP_69 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurReward_1(uint256) := TMP_69(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_70 cleared
[i] TMP_71 cleared
[i] TMP_72 cleared
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_14, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_14, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4, 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
REF_45(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_45

Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_70

Name: TMP_70 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_70', 'lpSupply_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_71

Name: TMP_71 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_45', 'TMP_71'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_72

Name: TMP_72 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
pool_3 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_44 (->pool_3 (-> ['poolInfo'])) := TMP_72(uint256)
asgn
-1
4
Finance type key: (0, -1)
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
poolInfo_14(MasterChef.PoolInfo[]) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_15, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_15, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_49(uint256) -> pool_3 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_4 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_49 (->pool_4 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_15(MasterChef.PoolInfo[]) := ϕ(["pool_4 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] _pid cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_4, name: concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_7, name: totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_2, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_4, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pid_1(uint256) := ϕ(['_pid_1', '_pid_2', '_pid_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_12(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurPerBlock_4(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_7(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_2(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_0'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_4(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_32(MasterChef.PoolInfo) -> poolInfo_12[_pid_1]
INDEX
[i]Type for REF_32

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_32(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
[i] TMP_59 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
End popogation
REF_33(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_33

Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(bool) = block.number <= REF_33
[i]Type for TMP_59

Name: TMP_59 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_60 cleared
[i] TMP_61 cleared
[i] lpSupply cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lpSupply, Num: 1
Globalname: lpSupply, contract_name: MasterChef
End popogation
Ssa_name: concurPerBlock_5, name: concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_8, name: totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_5, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_34(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
MEMBER
OUT KEY: updatePool_pool_depositToken
OUT KEY: updatePool_pool_depositToken
FTT: None
No field found
[i]Type for REF_34

Name: REF_34 Function: updatePool
Num: 
Den: 
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositToken
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: depositToken Function: updatePool
Num: -1
Den: -1
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_34 Function: updatePool
Num: 
Den: 
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: 4
Finance type key: (-1, -1)
Added to member...

Name: depositToken Function: updatePool
Num: -1
Den: -1
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_60 = CONVERT this to address
Converting this
2
[i]Type for TMP_60

Name: TMP_60 Function: updatePool
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:REF_34(IERC20), function:balanceOf, arguments:['TMP_60']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
4
[i]Type for TMP_61

Name: TMP_61 Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concurPerBlock_5(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_6', 'concurPerBlock_4', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_8(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_7', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_3(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_2'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_5(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_4', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_1(uint256) := TMP_61(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] TMP_62 cleared
[i] TMP_63 cleared
[i] TMP_64 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
End popogation
TMP_62(bool) = lpSupply_1 == 0
[i]Type for TMP_62

Name: TMP_62 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_36(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_36

Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(bool) = REF_36 == 0
[i]Type for TMP_63

Name: TMP_63 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64(bool) = TMP_62 || TMP_63
[i]Type for TMP_64

Name: TMP_64 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_65 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_65(bool) = block.number >= endBlock_3
[i]Type for TMP_65

Name: TMP_65 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_16, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_16, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_37(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_5 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_37 (->pool_5 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_16(MasterChef.PoolInfo[]) := ϕ(["pool_5 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_66 cleared
[i] multiplier cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: multiplier, Num: 1
Globalname: multiplier, contract_name: MasterChef
End popogation
REF_39(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_39

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_39,block.number)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
getMultiplier(uint256,uint256)
ENTRY_POINT
Propogating All
RETURN _to.sub(_from)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_66

Name: TMP_66 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
multiplier_1(uint256) := TMP_66(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_38(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_2 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_38 (->pool_2 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_13(MasterChef.PoolInfo[]) := ϕ(["pool_2 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] TMP_67 cleared
[i] TMP_68 cleared
[i] TMP_69 cleared
[i] concurReward cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurReward, Num: 1
Globalname: concurReward, contract_name: MasterChef
End popogation
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_67

Name: TMP_67 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_42(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_42

Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: allocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_67', 'REF_42'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_68

Name: TMP_68 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_68', 'totalAllocPoint_9'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_69

Name: TMP_69 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurReward_1(uint256) := TMP_69(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_70 cleared
[i] TMP_71 cleared
[i] TMP_72 cleared
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_14, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_14, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4, 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
REF_45(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_45

Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_70

Name: TMP_70 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_70', 'lpSupply_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_71

Name: TMP_71 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_45', 'TMP_71'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_72

Name: TMP_72 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
pool_3 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_44 (->pool_3 (-> ['poolInfo'])) := TMP_72(uint256)
asgn
-1
4
Finance type key: (0, -1)
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
poolInfo_14(MasterChef.PoolInfo[]) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_15, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_15, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_49(uint256) -> pool_3 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_4 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_49 (->pool_4 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_15(MasterChef.PoolInfo[]) := ϕ(["pool_4 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
[i] _pid cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_2, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _pid, Num: 2
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_3, name: _pid

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef
Name: _pid, Num: 3
Globalname: _pid, contract_name: MasterChef
End popogation
_pid_3(uint256) = _pid_2 (c)+ 1
A: 0 B: 0
lnorm: 0 rnorm: 0
Source address: u
[i]Type for _pid

Name: _pid Function: massUpdatePools
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: undef
XXXX
Reading Function: updatePool
Checking funcion...



updatePool
Function name: updatePool
Finding type for _pid(uint256 ... )
Value: u
New param cache [[[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
FIND RETURN
ENTRY_POINT
updatePool(uint256)


_pid_1(uint256) := ϕ(['_pid_1', '_pid_2', '_pid_1'])
poolInfo_12(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
concurPerBlock_4(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
totalAllocPoint_7(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
endBlock_2(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_0'])
_concurShareMultiplier_4(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
REF_32(MasterChef.PoolInfo) -> poolInfo_12[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_32(MasterChef.PoolInfo)
REF_33(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
TMP_59(bool) = block.number <= REF_33
CONDITION TMP_59
REF_34(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
TMP_60 = CONVERT this to address
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:REF_34(IERC20), function:balanceOf, arguments:['TMP_60']  
concurPerBlock_5(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_6', 'concurPerBlock_4', 'concurPerBlock_2'])
totalAllocPoint_8(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_7', 'totalAllocPoint_9'])
endBlock_3(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_2'])
_concurShareMultiplier_5(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_4', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
lpSupply_1(uint256) := TMP_61(uint256)
TMP_62(bool) = lpSupply_1 == 0
REF_36(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
TMP_63(bool) = REF_36 == 0
TMP_64(bool) = TMP_62 || TMP_63
CONDITION TMP_64
TMP_65(bool) = block.number >= endBlock_3
CONDITION TMP_65
REF_37(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
pool_5 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
REF_37 (->pool_5 (-> ['poolInfo'])) := block.number(uint256)
poolInfo_16(MasterChef.PoolInfo[]) := ϕ(["pool_5 (-> ['poolInfo'])"])
REF_39(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
TMP_66(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_39,block.number)
multiplier_1(uint256) := TMP_66(uint256)
REF_38(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
pool_2 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
REF_38 (->pool_2 (-> ['poolInfo'])) := block.number(uint256)
poolInfo_13(MasterChef.PoolInfo[]) := ϕ(["pool_2 (-> ['poolInfo'])"])
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_6'] 
REF_42(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_67', 'REF_42'] 
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_68', 'totalAllocPoint_9'] 
concurReward_1(uint256) := TMP_69(uint256)
REF_44(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
REF_45(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_6'] 
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_70', 'lpSupply_1'] 
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_45', 'TMP_71'] 
pool_3 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
REF_44 (->pool_3 (-> ['poolInfo'])) := TMP_72(uint256)
poolInfo_14(MasterChef.PoolInfo[]) := ϕ(["pool_3 (-> ['poolInfo'])"])
REF_49(uint256) -> pool_3 (-> ['poolInfo']).lastRewardBlock
pool_4 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_3 (-> ['poolInfo'])"])
REF_49 (->pool_4 (-> ['poolInfo'])) := block.number(uint256)
poolInfo_15(MasterChef.PoolInfo[]) := ϕ(["pool_4 (-> ['poolInfo'])"])


[i] _pid cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_4, name: concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_7, name: totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_2, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_4, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pid_1(uint256) := ϕ(['_pid_1', '_pid_2', '_pid_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_12(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurPerBlock_4(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_7(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_2(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_0'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_4(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_32(MasterChef.PoolInfo) -> poolInfo_12[_pid_1]
INDEX
[i]Type for REF_32

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_32(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
[i] TMP_59 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
End popogation
REF_33(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_33

Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(bool) = block.number <= REF_33
[i]Type for TMP_59

Name: TMP_59 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_60 cleared
[i] TMP_61 cleared
[i] lpSupply cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lpSupply, Num: 1
Globalname: lpSupply, contract_name: MasterChef
End popogation
Ssa_name: concurPerBlock_5, name: concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_8, name: totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_5, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_34(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
MEMBER
OUT KEY: updatePool_pool_depositToken
OUT KEY: updatePool_pool_depositToken
FTT: None
No field found
[i]Type for REF_34

Name: REF_34 Function: updatePool
Num: 
Den: 
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositToken
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: depositToken Function: updatePool
Num: -1
Den: -1
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_34 Function: updatePool
Num: 
Den: 
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: 4
Finance type key: (-1, -1)
Added to member...

Name: depositToken Function: updatePool
Num: -1
Den: -1
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_60 = CONVERT this to address
Converting this
2
[i]Type for TMP_60

Name: TMP_60 Function: updatePool
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:REF_34(IERC20), function:balanceOf, arguments:['TMP_60']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
4
[i]Type for TMP_61

Name: TMP_61 Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concurPerBlock_5(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_6', 'concurPerBlock_4', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_8(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_7', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_3(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_2'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_5(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_4', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_1(uint256) := TMP_61(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] TMP_62 cleared
[i] TMP_63 cleared
[i] TMP_64 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
End popogation
TMP_62(bool) = lpSupply_1 == 0
[i]Type for TMP_62

Name: TMP_62 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_36(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_36

Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(bool) = REF_36 == 0
[i]Type for TMP_63

Name: TMP_63 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64(bool) = TMP_62 || TMP_63
[i]Type for TMP_64

Name: TMP_64 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_65 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_65(bool) = block.number >= endBlock_3
[i]Type for TMP_65

Name: TMP_65 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_16, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_16, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_37(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_5 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_37 (->pool_5 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_16(MasterChef.PoolInfo[]) := ϕ(["pool_5 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_66 cleared
[i] multiplier cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: multiplier, Num: 1
Globalname: multiplier, contract_name: MasterChef
End popogation
REF_39(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_39

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_39,block.number)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
getMultiplier(uint256,uint256)
ENTRY_POINT
Propogating All
RETURN _to.sub(_from)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_66

Name: TMP_66 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
multiplier_1(uint256) := TMP_66(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_38(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_2 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_38 (->pool_2 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_13(MasterChef.PoolInfo[]) := ϕ(["pool_2 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] TMP_67 cleared
[i] TMP_68 cleared
[i] TMP_69 cleared
[i] concurReward cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurReward, Num: 1
Globalname: concurReward, contract_name: MasterChef
End popogation
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_67

Name: TMP_67 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_42(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_42

Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: allocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_67', 'REF_42'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_68

Name: TMP_68 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_68', 'totalAllocPoint_9'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_69

Name: TMP_69 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurReward_1(uint256) := TMP_69(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_70 cleared
[i] TMP_71 cleared
[i] TMP_72 cleared
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_14, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_14, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4, 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
REF_45(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_45

Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_70

Name: TMP_70 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_70', 'lpSupply_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_71

Name: TMP_71 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_45', 'TMP_71'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_72

Name: TMP_72 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
pool_3 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_44 (->pool_3 (-> ['poolInfo'])) := TMP_72(uint256)
asgn
-1
4
Finance type key: (0, -1)
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
poolInfo_14(MasterChef.PoolInfo[]) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_15, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_15, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_49(uint256) -> pool_3 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_4 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_49 (->pool_4 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_15(MasterChef.PoolInfo[]) := ϕ(["pool_4 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u


_pid_1(uint256) := ϕ(['_pid_1', '_pid_2', '_pid_1'])
poolInfo_12(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
concurPerBlock_4(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
totalAllocPoint_7(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
endBlock_2(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_0'])
_concurShareMultiplier_4(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
REF_32(MasterChef.PoolInfo) -> poolInfo_12[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_32(MasterChef.PoolInfo)
REF_33(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
TMP_59(bool) = block.number <= REF_33
CONDITION TMP_59
REF_34(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
TMP_60 = CONVERT this to address
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:REF_34(IERC20), function:balanceOf, arguments:['TMP_60']  
concurPerBlock_5(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_6', 'concurPerBlock_4', 'concurPerBlock_2'])
totalAllocPoint_8(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_7', 'totalAllocPoint_9'])
endBlock_3(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_2'])
_concurShareMultiplier_5(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_4', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
lpSupply_1(uint256) := TMP_61(uint256)
TMP_62(bool) = lpSupply_1 == 0
REF_36(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
TMP_63(bool) = REF_36 == 0
TMP_64(bool) = TMP_62 || TMP_63
CONDITION TMP_64
TMP_65(bool) = block.number >= endBlock_3
CONDITION TMP_65
REF_37(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
pool_5 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
REF_37 (->pool_5 (-> ['poolInfo'])) := block.number(uint256)
poolInfo_16(MasterChef.PoolInfo[]) := ϕ(["pool_5 (-> ['poolInfo'])"])
REF_39(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
TMP_66(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_39,block.number)
multiplier_1(uint256) := TMP_66(uint256)
REF_38(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
pool_2 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
REF_38 (->pool_2 (-> ['poolInfo'])) := block.number(uint256)
poolInfo_13(MasterChef.PoolInfo[]) := ϕ(["pool_2 (-> ['poolInfo'])"])
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_6'] 
REF_42(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_67', 'REF_42'] 
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_68', 'totalAllocPoint_9'] 
concurReward_1(uint256) := TMP_69(uint256)
REF_44(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
REF_45(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_6'] 
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_70', 'lpSupply_1'] 
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_45', 'TMP_71'] 
pool_3 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
REF_44 (->pool_3 (-> ['poolInfo'])) := TMP_72(uint256)
poolInfo_14(MasterChef.PoolInfo[]) := ϕ(["pool_3 (-> ['poolInfo'])"])
REF_49(uint256) -> pool_3 (-> ['poolInfo']).lastRewardBlock
pool_4 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_3 (-> ['poolInfo'])"])
REF_49 (->pool_4 (-> ['poolInfo'])) := block.number(uint256)
poolInfo_15(MasterChef.PoolInfo[]) := ϕ(["pool_4 (-> ['poolInfo'])"])


[i] _pid cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_4, name: concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_7, name: totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_2, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_4, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_pid_1(uint256) := ϕ(['_pid_1', '_pid_2', '_pid_1'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _pid Function: massUpdatePools
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_12(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurPerBlock_4(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_0', 'concurPerBlock_6', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_7(uint256) := ϕ(['totalAllocPoint_0', 'totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_2(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_0'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_4(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid Function: updatePool
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_12, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_32(MasterChef.PoolInfo) -> poolInfo_12[_pid_1]
INDEX
[i]Type for REF_32

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_32(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
[i] TMP_59 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
End popogation
REF_33(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_33

Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_33 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(bool) = block.number <= REF_33
[i]Type for TMP_59

Name: TMP_59 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_60 cleared
[i] TMP_61 cleared
[i] lpSupply cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: lpSupply, Num: 1
Globalname: lpSupply, contract_name: MasterChef
End popogation
Ssa_name: concurPerBlock_5, name: concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_8, name: totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_5, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_34(IERC20) -> pool_1 (-> ['poolInfo']).depositToken
MEMBER
OUT KEY: updatePool_pool_depositToken
OUT KEY: updatePool_pool_depositToken
FTT: None
No field found
[i]Type for REF_34

Name: REF_34 Function: updatePool
Num: 
Den: 
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositToken
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: depositToken Function: updatePool
Num: -1
Den: -1
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_34 Function: updatePool
Num: 
Den: 
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: 4
Finance type key: (-1, -1)
Added to member...

Name: depositToken Function: updatePool
Num: -1
Den: -1
Address: 4
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_60 = CONVERT this to address
Converting this
2
[i]Type for TMP_60

Name: TMP_60 Function: updatePool
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(uint256) = HIGH_LEVEL_CALL, dest:REF_34(IERC20), function:balanceOf, arguments:['TMP_60']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
4
[i]Type for TMP_61

Name: TMP_61 Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concurPerBlock_5(uint256) := ϕ(['concurPerBlock_5', 'concurPerBlock_6', 'concurPerBlock_4', 'concurPerBlock_2'])
Phi
[i]Type for concurPerBlock

Name: concurPerBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
totalAllocPoint_8(uint256) := ϕ(['totalAllocPoint_8', 'totalAllocPoint_3', 'totalAllocPoint_5', 'totalAllocPoint_7', 'totalAllocPoint_9'])
Phi
[i]Type for totalAllocPoint

Name: totalAllocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
endBlock_3(uint256) := ϕ(['endBlock_1', 'endBlock_3', 'endBlock_2'])
Phi
[i]Type for endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_5(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_4', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_1(uint256) := TMP_61(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] TMP_62 cleared
[i] TMP_63 cleared
[i] TMP_64 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
End popogation
TMP_62(bool) = lpSupply_1 == 0
[i]Type for TMP_62

Name: TMP_62 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_36(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_36

Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_36 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(bool) = REF_36 == 0
[i]Type for TMP_63

Name: TMP_63 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64(bool) = TMP_62 || TMP_63
[i]Type for TMP_64

Name: TMP_64 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_65 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: endBlock_3, name: endBlock

Name: endBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_65(bool) = block.number >= endBlock_3
[i]Type for TMP_65

Name: TMP_65 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_16, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_5 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 5 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_16, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_37(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_5 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_37 (->pool_5 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_37

Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_37 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_16(MasterChef.PoolInfo[]) := ϕ(["pool_5 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_66 cleared
[i] multiplier cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: multiplier, Num: 1
Globalname: multiplier, contract_name: MasterChef
End popogation
REF_39(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_39

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_66(uint256) = INTERNAL_CALL, MasterChef.getMultiplier(uint256,uint256)(REF_39,block.number)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[-1], [-1], 'u', None, [], -1, 'u'], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
getMultiplier(uint256,uint256)
ENTRY_POINT
Propogating All
RETURN _to.sub(_from)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i] _from cleared
[i] _to cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _to_1 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
_from_1(uint256) := ϕ(['REF_21', 'REF_39'])
Phi

Name: REF_21 Function: pendingConcur
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_39 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_to_1(uint256) := ϕ(['block.number'])
Phi
[i]Type for _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_41 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
Ssa_name: _to_1, name: _to

Name: _to Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _from_1, name: _from

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _from_1 Function: getMultiplier
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _from, Num: 1
Globalname: _from, contract_name: MasterChef
End popogation
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_to_1', '_from_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_41

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_41
RETURN

Name: TMP_41 Function: getMultiplier
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_66

Name: TMP_66 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
multiplier_1(uint256) := TMP_66(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: pool_2 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 2 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_13, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_38(uint256) -> pool_1 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_2 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_38 (->pool_2 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_38

Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_38 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_13(MasterChef.PoolInfo[]) := ϕ(["pool_2 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] TMP_67 cleared
[i] TMP_68 cleared
[i] TMP_69 cleared
[i] concurReward cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurPerBlock_6, name: concurPerBlock

Name: concurPerBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: totalAllocPoint_9, name: totalAllocPoint

Name: totalAllocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: multiplier_1, name: multiplier

Name: multiplier Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurReward, Num: 1
Globalname: concurReward, contract_name: MasterChef
End popogation
TMP_67(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['multiplier_1', 'concurPerBlock_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_67

Name: TMP_67 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_42(uint256) -> pool_1 (-> ['poolInfo']).allocPoint
MEMBER
OUT KEY: updatePool_pool_allocPoint
OUT KEY: updatePool_pool_allocPoint
FTT: None
No field found
[i]Type for REF_42

Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: allocPoint
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: allocPoint Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_42 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocPoint Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_68(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_67', 'REF_42'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_68

Name: TMP_68 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_68', 'totalAllocPoint_9'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_69

Name: TMP_69 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurReward_1(uint256) := TMP_69(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_70 cleared
[i] TMP_71 cleared
[i] TMP_72 cleared
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: lpSupply_1, name: lpSupply

Name: lpSupply Function: updatePool
Num: 4
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concurReward_1, name: concurReward

Name: concurReward Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_6, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_14, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_3 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 3 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_14, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_44(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4, 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
REF_45(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: updatePool_pool_accConcurPerShare
OUT KEY: updatePool_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_45

Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_45 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['concurReward_1', '_concurShareMultiplier_6'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_70

Name: TMP_70 Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_70', 'lpSupply_1'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_71

Name: TMP_71 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_45', 'TMP_71'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_72

Name: TMP_72 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
pool_3 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_1 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_44 (->pool_3 (-> ['poolInfo'])) := TMP_72(uint256)
asgn
-1
4
Finance type key: (0, -1)
[i]Type for REF_44

Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_44 Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Added: True
Source address: u
Finance type key: (0, -1)
Added to member...

Name: accConcurPerShare Function: updatePool
Num: -1
Den: 4
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
poolInfo_14(MasterChef.PoolInfo[]) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: poolInfo_15, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
Ssa_name: pool_4 (-> ['poolInfo']), name: pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Name: pool, Num: 4 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
Ssa_name: poolInfo_15, name: poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_49(uint256) -> pool_3 (-> ['poolInfo']).lastRewardBlock
MEMBER
OUT KEY: updatePool_pool_lastRewardBlock
OUT KEY: updatePool_pool_lastRewardBlock
FTT: None
No field found
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pool_4 (-> ['poolInfo'])(MasterChef.PoolInfo) := ϕ(["pool_3 (-> ['poolInfo'])"])
Phi

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef


END==================================
[i]Type for pool

Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
XXXX
REF_49 (->pool_4 (-> ['poolInfo'])) := block.number(uint256)
asgn
[i]Type for REF_49

Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_3 (-> ['poolInfo']), Field: lastRewardBlock
#################
Member: 
Name: pool Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastRewardBlock, depositToken, allocPoint, accConcurPerShare
Finance Type: undef
Fieldf: 
Name: lastRewardBlock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_49 Function: updatePool
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: lastRewardBlock Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
poolInfo_15(MasterChef.PoolInfo[]) := ϕ(["pool_4 (-> ['poolInfo'])"])
Phi
[i]Type for poolInfo

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied poolInfo
Source address: u
Reading Function: deposit
Checking funcion...



deposit
Function name: deposit
Finding type for _recipient(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Finding type for _pid(uint256 ... )
Value: u
Finding type for _amount(uint256 ... )
Value: u
New param cache [[[], [], 0, '_recipient', [], -1, -995, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
deposit(address,uint256,uint256)


poolInfo_17(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
userInfo_2(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
_concurShareMultiplier_7(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
_perMille_1(uint256) := ϕ(['_perMille_6', '_perMille_0', '_perMille_5'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, MasterChef.onlyDepositor()()
REF_50(MasterChef.PoolInfo) -> poolInfo_19[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_50(MasterChef.PoolInfo)
REF_51(mapping(address => MasterChef.UserInfo)) -> userInfo_4[_pid_1]
TMP_73(address) = INTERNAL_CALL, Context._msgSender()()
REF_52(MasterChef.UserInfo) -> REF_51[TMP_73]
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_52(MasterChef.UserInfo)
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
_concurShareMultiplier_11(uint256) := ϕ(['_concurShareMultiplier_5'])
REF_53(uint128) -> user_1 (-> ['userInfo']).amount
TMP_75(bool) = REF_53 > 0
CONDITION TMP_75
REF_54(uint128) -> user_1 (-> ['userInfo']).amount
REF_55(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_76(uint128) = REF_54 (c)* REF_55
TMP_77(uint128) = TMP_76 (c)/ _concurShareMultiplier_11
REF_56(uint128) -> user_1 (-> ['userInfo']).rewardDebt
TMP_78(uint128) = TMP_77 (c)- REF_56
pending_1(uint256) := TMP_78(uint128)
TMP_79(bool) = pending_1 > 0
CONDITION TMP_79
TMP_81(bool) = _amount_1 > 0
CONDITION TMP_81
REF_57(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
TMP_82(bool) = REF_57 > 0
CONDITION TMP_82
REF_59(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', 'REF_59'] 
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_83', '_perMille_6'] 
depositFee_1(uint256) := TMP_84(uint256)
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
REF_67(uint128) -> user_4 (-> []).rewardDebt
REF_69(uint128) -> user_4 (-> []).amount
REF_70(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_90(uint128) = REF_69 (c)* REF_70
TMP_91(uint128) = TMP_90 (c)/ _concurShareMultiplier_12
TMP_92(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_91'] 
user_5 (-> [])(MasterChef.UserInfo) := ϕ(['user_4 (-> [])'])
REF_67 (->user_5 (-> [])) := TMP_92(uint128)
REF_64(uint128) -> user_1 (-> ['userInfo']).amount
REF_66(uint128) -> user_1 (-> ['userInfo']).amount
TMP_88(uint128) = REF_66 (c)+ _amount_1
TMP_89(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_88'] 
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_64 (->user_3 (-> ['userInfo'])) := TMP_89(uint128)
userInfo_7(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_3 (-> ['userInfo'])"])
REF_61(uint128) -> user_1 (-> ['userInfo']).amount
REF_63(uint128) -> user_1 (-> ['userInfo']).amount
TMP_85(uint128) = REF_63 (c)+ _amount_1
TMP_86(uint128) = TMP_85 (c)- depositFee_1
TMP_87(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_86'] 
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_61 (->user_2 (-> ['userInfo'])) := TMP_87(uint128)
userInfo_6(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
user_4 (-> [])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_3 (-> ['userInfo'])"])
Emit Deposit(_recipient_1,_pid_1,_amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_17, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 17
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: userInfo_2, name: userInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: userInfo, Num: 2
Globalname: userInfo, contract_name: MasterChef
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _concurShareMultiplier_7, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 7
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _perMille_1, name: _perMille

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _perMille, Num: 1
Globalname: _perMille, contract_name: MasterChef
global...

Name: PIC_12 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
poolInfo_17(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userInfo_2(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_7(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_perMille_1(uint256) := ϕ(['_perMille_6', '_perMille_0', '_perMille_5'])
Phi
[i]Type for _perMille

Name: _perMille Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
FIND RETURN
ENTRY_POINT
nonReentrant()
ENTRY_POINT
Propogating All
EXPRESSION _nonReentrantBefore()
Propogating All
_
Propogating All
EXPRESSION _nonReentrantAfter()
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ReentrancyGuard._nonReentrantBefore()()
New param cache []
FIND RETURN
ENTRY_POINT
_nonReentrantBefore()
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(_status != _ENTERED,ReentrancyGuard: reentrant call)
Propogating All
EXPRESSION _status = _ENTERED
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _ENTERED_1, name: _ENTERED

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _ENTERED, Num: 1
Globalname: _ENTERED, contract_name: MasterChef
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _status_2, name: _status

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _status, Num: 2
Globalname: _status, contract_name: MasterChef
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
_ENTERED_1(uint256) := ϕ(['_ENTERED_0'])
Phi
[i]Type for _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_status_2(uint256) := ϕ(['_status_1', '_status_4', '_status_0', '_status_3'])
Phi
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _status_2, name: _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_2, name: _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_0(bool) = _status_2 != _ENTERED_1
[i]Type for TMP_0

Name: TMP_0 Function: _nonReentrantBefore
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,ReentrancyGuard: reentrant call)
[i]Type for TMP_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_3, name: _status

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _status, Num: 3
Globalname: _status, contract_name: MasterChef
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_status_3(uint256) := _ENTERED_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _status
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_2, name: _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_ENTERED_1(uint256) := ϕ(['_ENTERED_0'])
Phi
[i]Type for _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_status_2(uint256) := ϕ(['_status_1', '_status_4', '_status_0', '_status_3'])
Phi
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_0 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _status_2, name: _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_2, name: _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_0(bool) = _status_2 != _ENTERED_1
[i]Type for TMP_0

Name: TMP_0 Function: _nonReentrantBefore
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,ReentrancyGuard: reentrant call)
[i]Type for TMP_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _ENTERED_1, name: _ENTERED

Name: _ENTERED Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_3, name: _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
_status_3(uint256) := _ENTERED_1(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _status
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ReentrancyGuard._nonReentrantAfter()()
New param cache []
FIND RETURN
ENTRY_POINT
_nonReentrantAfter()
ENTRY_POINT
Propogating All
EXPRESSION _status = _NOT_ENTERED
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _NOT_ENTERED, Num: 2
Globalname: _NOT_ENTERED, contract_name: MasterChef
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
_NOT_ENTERED_2(uint256) := ϕ(['_NOT_ENTERED_0'])
Phi
[i]Type for _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_4, name: _status

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _status, Num: 4
Globalname: _status, contract_name: MasterChef
global...

Name: _status Function: _nonReentrantBefore
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
_status_4(uint256) := _NOT_ENTERED_2(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _status
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_NOT_ENTERED_2(uint256) := ϕ(['_NOT_ENTERED_0'])
Phi
[i]Type for _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _NOT_ENTERED_2, name: _NOT_ENTERED

Name: _NOT_ENTERED Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _status_4, name: _status

Name: _status Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
_status_4(uint256) := _NOT_ENTERED_2(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for _status

Name: _status Function: _nonReentrantAfter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied _status
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ReentrancyGuard._nonReentrantBefore()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, ReentrancyGuard._nonReentrantAfter()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, MasterChef.onlyDepositor()()
New param cache []
FIND RETURN
ENTRY_POINT
onlyDepositor()
ENTRY_POINT
Propogating All
EXPRESSION require(bool,string)(isDepositor[msg.sender],!depositor)
Propogating All
_
Propogating All
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: isDepositor_3, name: isDepositor

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: isDepositor, Num: 3
Globalname: isDepositor, contract_name: MasterChef
global...

Name: PIC_13 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
isDepositor_3(mapping(address => bool)) := ϕ(['isDepositor_1', 'isDepositor_3', 'isDepositor_0', 'isDepositor_2'])
Phi
[i]Type for isDepositor

Name: isDepositor Function: onlyDepositor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: isDepositor_3, name: isDepositor

Name: isDepositor Function: onlyDepositor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: isDepositor_3, name: isDepositor

Name: isDepositor Function: onlyDepositor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_89(bool) -> isDepositor_3[msg.sender]
INDEX
[i]Type for REF_89

Name: isDepositor Function: onlyDepositor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_125(None) = SOLIDITY_CALL require(bool,string)(REF_89,!depositor)
[i]Type for TMP_125

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: isDepositor_3, name: isDepositor

Name: isDepositor Function: onlyDepositor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
isDepositor_3(mapping(address => bool)) := ϕ(['isDepositor_1', 'isDepositor_3', 'isDepositor_0', 'isDepositor_2'])
Phi
[i]Type for isDepositor

Name: isDepositor Function: onlyDepositor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: isDepositor_3, name: isDepositor

Name: isDepositor Function: onlyDepositor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: isDepositor_3, name: isDepositor

Name: isDepositor Function: onlyDepositor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_89(bool) -> isDepositor_3[msg.sender]
INDEX
[i]Type for REF_89

Name: isDepositor Function: onlyDepositor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_125(None) = SOLIDITY_CALL require(bool,string)(REF_89,!depositor)
[i]Type for TMP_125

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_19, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 19
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_19, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_50(MasterChef.PoolInfo) -> poolInfo_19[_pid_1]
INDEX
[i]Type for REF_50

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_50(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_73 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_4, name: userInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: userInfo, Num: 4
Globalname: userInfo, contract_name: MasterChef
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: userInfo_4, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 1 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
REF_51(mapping(address => MasterChef.UserInfo)) -> userInfo_4[_pid_1]
INDEX
[i]Type for REF_51

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_73(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_73

Name: TMP_73 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_52(MasterChef.UserInfo) -> REF_51[TMP_73]
INDEX
[i]Type for REF_52

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_52(MasterChef.UserInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
End popogation
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 11
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
_concurShareMultiplier_11(uint256) := ϕ(['_concurShareMultiplier_5'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_75 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_53(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_53

Name: REF_53 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_53 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_75(bool) = REF_53 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_75

Name: TMP_75 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_76 cleared
[i] TMP_77 cleared
[i] TMP_78 cleared
[i] pending cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pending, Num: 1
Globalname: pending, contract_name: MasterChef
End popogation
REF_54(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_54

Name: REF_54 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_54 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_55(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: deposit_pool_accConcurPerShare
OUT KEY: deposit_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_55

Name: REF_55 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_55 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_76(uint128) = REF_54 (c)* REF_55
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_76

Name: TMP_76 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77(uint128) = TMP_76 (c)/ _concurShareMultiplier_11
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_77

Name: TMP_77 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_56(uint128) -> user_1 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: deposit_user_rewardDebt
OUT KEY: deposit_user_rewardDebt
FTT: None
No field found
[i]Type for REF_56

Name: REF_56 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_56 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_78(uint128) = TMP_77 (c)- REF_56
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_78

Name: TMP_78 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pending_1(uint256) := TMP_78(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_79 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_79(bool) = pending_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_79

Name: TMP_79 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_81 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _amount_1, name: _amount

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _amount, Num: 1
Globalname: _amount, contract_name: MasterChef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _amount, Num: 1
Globalname: _amount, contract_name: MasterChef
End popogation
TMP_81(bool) = _amount_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_81

Name: TMP_81 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_82 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
End popogation
REF_57(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
MEMBER
OUT KEY: deposit_pool_depositFeeBP
OUT KEY: deposit_pool_depositFeeBP
FTT: None
No field found
[i]Type for REF_57

Name: REF_57 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositFeeBP
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Fieldf: 
Name: depositFeeBP Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_57 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_82(bool) = REF_57 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_82

Name: TMP_82 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_83 cleared
[i] TMP_84 cleared
[i] depositFee cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _perMille_6, name: _perMille

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _perMille, Num: 6
Globalname: _perMille, contract_name: MasterChef
global...

Name: PIC_12 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _perMille_6, name: _perMille

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: depositFee, Num: 1
Globalname: depositFee, contract_name: MasterChef
End popogation
REF_59(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
MEMBER
OUT KEY: deposit_pool_depositFeeBP
OUT KEY: deposit_pool_depositFeeBP
FTT: None
No field found
[i]Type for REF_59

Name: REF_59 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositFeeBP
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: depositFeeBP Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_59 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: depositFeeBP Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', 'REF_59'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_83

Name: TMP_83 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_83', '_perMille_6'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_84

Name: TMP_84 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
depositFee_1(uint256) := TMP_84(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -995

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
New param cache [[[], [], 0, '_recipient', [], -1, -995, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
[[], [], 0, '_recipient', [], -1, -995, 'u']

Name: _to Function: None
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
safeConcurTransfer(address,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE concurBalance = concur.balanceOf(address(this))
Propogating All
NEW VARIABLE transferSuccess = false
Propogating All
IF _amount > concurBalance
Propogating All
concurBalance_1
Ssa_name: concurBalance_1, name: concurBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_amount_1
Ssa_name: _amount_1, name: _amount

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION transferSuccess = concur.transfer(_to,_amount)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -995

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
_amount_1
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
END_IF
Propogating All
EXPRESSION require(bool,string)(transferSuccess,safeConcurTransfer: transfer failed)
Propogating All
transferSuccess_4
Ssa_name: transferSuccess_4, name: transferSuccess

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION transferSuccess = concur.transfer(_to,concurBalance)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -995

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
concurBalance_1
Ssa_name: concurBalance_1, name: concurBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
END_IF
[i] _to cleared
[i] _amount cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _to_1, name: _to

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -995

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: concur_2, name: concur

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concur, Num: 2
Globalname: concur, contract_name: MasterChef
global...

Name: concur Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
_to_1(address) := ϕ(['_recipient_1', '_recipient_1'])
Phi
[i]Type for _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
XXXX
_amount_1(uint256) := ϕ(['pending_1', 'pending_1'])
Phi
[i]Type for _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_2(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_0'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_116 cleared
[i] TMP_117 cleared
[i] concurBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurBalance, Num: 1
Globalname: concurBalance, contract_name: MasterChef
End popogation
Ssa_name: concur_3, name: concur

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concur, Num: 3
Globalname: concur, contract_name: MasterChef
global...

Name: concur Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_116 = CONVERT this to address
Converting this
2
[i]Type for TMP_116

Name: TMP_116 Function: safeConcurTransfer
Num: -1
Den: -1
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:concur_2(IERC20), function:balanceOf, arguments:['TMP_116']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
u
prev address? u
global assignment: 5
5
[i]Type for TMP_117

Name: TMP_117 Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concur_3(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_2'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurBalance_1(uint256) := TMP_117(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_1, name: transferSuccess

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 1
Globalname: transferSuccess, contract_name: MasterChef
End popogation
transferSuccess_1(bool) := False(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
[i] TMP_118 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_118(bool) = _amount_1 > concurBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_120 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_3, name: transferSuccess

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 3
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_5, name: concur

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concur, Num: 5
Globalname: concur, contract_name: MasterChef
global...

Name: concur Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_120(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', '_amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_120

Name: TMP_120 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_5(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_3(bool) := TMP_120(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: transferSuccess_4, name: transferSuccess

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
transferSuccess_4(bool) := ϕ(['transferSuccess_2', 'transferSuccess_3'])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
End popogation
TMP_121(None) = SOLIDITY_CALL require(bool,string)(transferSuccess_4,safeConcurTransfer: transfer failed)
[i]Type for TMP_121

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_119 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_2, name: transferSuccess

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 2
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_4, name: concur

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concur, Num: 4
Globalname: concur, contract_name: MasterChef
global...

Name: concur Function: constructor
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
TMP_119(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', 'concurBalance_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_119

Name: TMP_119 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_4(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_3', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_2(bool) := TMP_119(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] _to cleared
[i] _amount cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -995

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['_recipient_1', '_recipient_1'])
Phi
[i]Type for _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
XXXX
_amount_1(uint256) := ϕ(['pending_1', 'pending_1'])
Phi
[i]Type for _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_2(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_0'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_116 cleared
[i] TMP_117 cleared
[i] concurBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurBalance, Num: 1
Globalname: concurBalance, contract_name: MasterChef
End popogation
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = CONVERT this to address
Converting this
2
[i]Type for TMP_116

Name: TMP_116 Function: safeConcurTransfer
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:concur_2(IERC20), function:balanceOf, arguments:['TMP_116']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_117

Name: TMP_117 Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concur_3(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_2'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurBalance_1(uint256) := TMP_117(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_1, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 1
Globalname: transferSuccess, contract_name: MasterChef
End popogation
transferSuccess_1(bool) := False(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
[i] TMP_118 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_118(bool) = _amount_1 > concurBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_120 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_3, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 3
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_5, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', '_amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_120

Name: TMP_120 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_5(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_3(bool) := TMP_120(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
transferSuccess_4(bool) := ϕ(['transferSuccess_2', 'transferSuccess_3'])
Phi

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
End popogation
TMP_121(None) = SOLIDITY_CALL require(bool,string)(transferSuccess_4,safeConcurTransfer: transfer failed)
[i]Type for TMP_121

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_119 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_2, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 2
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_4, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_119(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', 'concurBalance_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_119

Name: TMP_119 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_4(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_3', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_2(bool) := TMP_119(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_90 cleared
[i] TMP_91 cleared
[i] TMP_92 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_4 (-> []), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _concurShareMultiplier_12, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 12
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: user_4 (-> []), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _concurShareMultiplier_12, name: _concurShareMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_5 (-> []), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 5 (-> [])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_5 (-> []), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 5 (-> [])
Globalname: user, contract_name: MasterChef
REF_67(uint128) -> user_4 (-> []).rewardDebt
MEMBER
OUT KEY: deposit_user_rewardDebt
OUT KEY: deposit_user_rewardDebt
FTT: None
No field found
[i]Type for REF_67

Name: REF_67 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: rewardDebt
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_67 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
REF_69(uint128) -> user_4 (-> []).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_69

Name: REF_69 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_69 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
REF_70(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: deposit_pool_accConcurPerShare
OUT KEY: deposit_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_70

Name: REF_70 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_70 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_90(uint128) = REF_69 (c)* REF_70
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_90

Name: TMP_90 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_91(uint128) = TMP_90 (c)/ _concurShareMultiplier_12
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_91

Name: TMP_91 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_92(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_91'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_91
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_91
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_92

Name: TMP_92 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_5 (-> [])(MasterChef.UserInfo) := ϕ(['user_4 (-> [])'])
Phi

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: rewardDebt, amount
Finance Type: undef
XXXX
REF_67 (->user_5 (-> [])) := TMP_92(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_67

Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: rewardDebt, amount
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i] TMP_88 cleared
[i] TMP_89 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_7, name: userInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: userInfo, Num: 7
Globalname: userInfo, contract_name: MasterChef
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_7, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_64(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_64

Name: REF_64 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_64 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
REF_66(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_66

Name: REF_66 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_66 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88(uint128) = REF_66 (c)+ _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_88

Name: TMP_88 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_89(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_88'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_88
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_88
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_89

Name: TMP_89 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_64 (->user_3 (-> ['userInfo'])) := TMP_89(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_64

Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_7(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_3 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
[i] TMP_85 cleared
[i] TMP_86 cleared
[i] TMP_87 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_6, name: userInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: userInfo, Num: 6
Globalname: userInfo, contract_name: MasterChef
global...

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_6, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_61(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_61

Name: REF_61 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_61 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
REF_63(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_63

Name: REF_63 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_63 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_85(uint128) = REF_63 (c)+ _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_85

Name: TMP_85 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_86(uint128) = TMP_85 (c)- depositFee_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_86

Name: TMP_86 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_87(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_86'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_86
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_86
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_87

Name: TMP_87 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_61 (->user_2 (-> ['userInfo'])) := TMP_87(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_61

Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_6(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
[i] user cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: user_4 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
user_4 (-> [])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_3 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


poolInfo_17(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
userInfo_2(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
_concurShareMultiplier_7(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
_perMille_1(uint256) := ϕ(['_perMille_6', '_perMille_0', '_perMille_5'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, MasterChef.onlyDepositor()()
REF_50(MasterChef.PoolInfo) -> poolInfo_19[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_50(MasterChef.PoolInfo)
REF_51(mapping(address => MasterChef.UserInfo)) -> userInfo_4[_pid_1]
TMP_73(address) = INTERNAL_CALL, Context._msgSender()()
REF_52(MasterChef.UserInfo) -> REF_51[TMP_73]
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_52(MasterChef.UserInfo)
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
_concurShareMultiplier_11(uint256) := ϕ(['_concurShareMultiplier_5'])
REF_53(uint128) -> user_1 (-> ['userInfo']).amount
TMP_75(bool) = REF_53 > 0
CONDITION TMP_75
REF_54(uint128) -> user_1 (-> ['userInfo']).amount
REF_55(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_76(uint128) = REF_54 (c)* REF_55
TMP_77(uint128) = TMP_76 (c)/ _concurShareMultiplier_11
REF_56(uint128) -> user_1 (-> ['userInfo']).rewardDebt
TMP_78(uint128) = TMP_77 (c)- REF_56
pending_1(uint256) := TMP_78(uint128)
TMP_79(bool) = pending_1 > 0
CONDITION TMP_79
TMP_81(bool) = _amount_1 > 0
CONDITION TMP_81
REF_57(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
TMP_82(bool) = REF_57 > 0
CONDITION TMP_82
REF_59(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', 'REF_59'] 
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_83', '_perMille_6'] 
depositFee_1(uint256) := TMP_84(uint256)
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
REF_67(uint128) -> user_4 (-> []).rewardDebt
REF_69(uint128) -> user_4 (-> []).amount
REF_70(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_90(uint128) = REF_69 (c)* REF_70
TMP_91(uint128) = TMP_90 (c)/ _concurShareMultiplier_12
TMP_92(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_91'] 
user_5 (-> [])(MasterChef.UserInfo) := ϕ(['user_4 (-> [])'])
REF_67 (->user_5 (-> [])) := TMP_92(uint128)
REF_64(uint128) -> user_1 (-> ['userInfo']).amount
REF_66(uint128) -> user_1 (-> ['userInfo']).amount
TMP_88(uint128) = REF_66 (c)+ _amount_1
TMP_89(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_88'] 
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_64 (->user_3 (-> ['userInfo'])) := TMP_89(uint128)
userInfo_7(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_3 (-> ['userInfo'])"])
REF_61(uint128) -> user_1 (-> ['userInfo']).amount
REF_63(uint128) -> user_1 (-> ['userInfo']).amount
TMP_85(uint128) = REF_63 (c)+ _amount_1
TMP_86(uint128) = TMP_85 (c)- depositFee_1
TMP_87(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_86'] 
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_61 (->user_2 (-> ['userInfo'])) := TMP_87(uint128)
userInfo_6(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
user_4 (-> [])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_3 (-> ['userInfo'])"])
Emit Deposit(_recipient_1,_pid_1,_amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_17, name: poolInfo

Name: poolInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_2, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_7, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _perMille_1, name: _perMille

Name: _perMille Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolInfo_17(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userInfo_2(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_7(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_perMille_1(uint256) := ϕ(['_perMille_6', '_perMille_0', '_perMille_5'])
Phi
[i]Type for _perMille

Name: _perMille Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, MasterChef.onlyDepositor()()
New param cache []
Old param cache: []
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_19, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_19, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_50(MasterChef.PoolInfo) -> poolInfo_19[_pid_1]
INDEX
[i]Type for REF_50

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_50(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
XXXX
[i] TMP_73 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_4, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_4, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 1 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
REF_51(mapping(address => MasterChef.UserInfo)) -> userInfo_4[_pid_1]
INDEX
[i]Type for REF_51

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_73(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_73

Name: TMP_73 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_52(MasterChef.UserInfo) -> REF_51[TMP_73]
INDEX
[i]Type for REF_52

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_52(MasterChef.UserInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
End popogation
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
_concurShareMultiplier_11(uint256) := ϕ(['_concurShareMultiplier_5'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_75 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
End popogation
REF_53(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_53

Name: REF_53 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_53 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(bool) = REF_53 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_75

Name: TMP_75 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_76 cleared
[i] TMP_77 cleared
[i] TMP_78 cleared
[i] pending cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pending, Num: 1
Globalname: pending, contract_name: MasterChef
End popogation
REF_54(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_54

Name: REF_54 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_54 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_55(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: deposit_pool_accConcurPerShare
OUT KEY: deposit_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_55

Name: REF_55 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_55 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(uint128) = REF_54 (c)* REF_55
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_76

Name: TMP_76 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77(uint128) = TMP_76 (c)/ _concurShareMultiplier_11
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_77

Name: TMP_77 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_56(uint128) -> user_1 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: deposit_user_rewardDebt
OUT KEY: deposit_user_rewardDebt
FTT: None
No field found
[i]Type for REF_56

Name: REF_56 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_56 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_78(uint128) = TMP_77 (c)- REF_56
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_78

Name: TMP_78 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pending_1(uint256) := TMP_78(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_79 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_79(bool) = pending_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_79

Name: TMP_79 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_81 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_81(bool) = _amount_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_81

Name: TMP_81 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_82 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
End popogation
REF_57(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
MEMBER
OUT KEY: deposit_pool_depositFeeBP
OUT KEY: deposit_pool_depositFeeBP
FTT: None
No field found
[i]Type for REF_57

Name: REF_57 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositFeeBP
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: depositFeeBP Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_57 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: depositFeeBP Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(bool) = REF_57 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_82

Name: TMP_82 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_83 cleared
[i] TMP_84 cleared
[i] depositFee cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _perMille_6, name: _perMille

Name: _perMille Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _perMille_6, name: _perMille

Name: _perMille Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: depositFee, Num: 1
Globalname: depositFee, contract_name: MasterChef
End popogation
REF_59(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
MEMBER
OUT KEY: deposit_pool_depositFeeBP
OUT KEY: deposit_pool_depositFeeBP
FTT: None
No field found
[i]Type for REF_59

Name: REF_59 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositFeeBP
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: depositFeeBP Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_59 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: depositFeeBP Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', 'REF_59'] 
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_83

Name: TMP_83 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_83', '_perMille_6'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_84

Name: TMP_84 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
depositFee_1(uint256) := TMP_84(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
New param cache [[[], [], 0, '_recipient', [], -1, -995, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 0, '_recipient', [], -1, -995], [[-1], [-1], 'u', None, [], -1, 'u']]
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_90 cleared
[i] TMP_91 cleared
[i] TMP_92 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_4 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _concurShareMultiplier_12, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_4 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _concurShareMultiplier_12, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_5 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: rewardDebt, amount
Finance Type: undef
Name: user, Num: 5 (-> [])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_5 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: rewardDebt, amount
Finance Type: undef
Name: user, Num: 5 (-> [])
Globalname: user, contract_name: MasterChef
REF_67(uint128) -> user_4 (-> []).rewardDebt
MEMBER
OUT KEY: deposit_user_rewardDebt
OUT KEY: deposit_user_rewardDebt
FTT: None
No field found
[i]Type for REF_67

Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: rewardDebt, amount
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_69(uint128) -> user_4 (-> []).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_69

Name: REF_69 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_69 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_70(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: deposit_pool_accConcurPerShare
OUT KEY: deposit_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_70

Name: REF_70 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_70 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_90(uint128) = REF_69 (c)* REF_70
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_90

Name: TMP_90 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_91(uint128) = TMP_90 (c)/ _concurShareMultiplier_12
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_91

Name: TMP_91 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_92(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_91'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_91
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_91
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_92

Name: TMP_92 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_5 (-> [])(MasterChef.UserInfo) := ϕ(['user_4 (-> [])'])
Phi

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_67 (->user_5 (-> [])) := TMP_92(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_67

Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
[i] TMP_88 cleared
[i] TMP_89 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_7, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_7, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_64(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_64

Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_66(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_66

Name: REF_66 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_66 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88(uint128) = REF_66 (c)+ _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_88

Name: TMP_88 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_89(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_88'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_88
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_88
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_89

Name: TMP_89 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_64 (->user_3 (-> ['userInfo'])) := TMP_89(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_64

Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_7(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_3 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
[i] TMP_85 cleared
[i] TMP_86 cleared
[i] TMP_87 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_6, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_6, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_61(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_61

Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_63(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_63

Name: REF_63 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_63 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_85(uint128) = REF_63 (c)+ _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_85

Name: TMP_85 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_86(uint128) = TMP_85 (c)- depositFee_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_86

Name: TMP_86 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_87(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_86'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_86
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_86
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_87

Name: TMP_87 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_61 (->user_2 (-> ['userInfo'])) := TMP_87(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_61

Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_6(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
[i] user cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: user_4 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
user_4 (-> [])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_3 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


poolInfo_17(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
userInfo_2(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
_concurShareMultiplier_7(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
_perMille_1(uint256) := ϕ(['_perMille_6', '_perMille_0', '_perMille_5'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, MasterChef.onlyDepositor()()
REF_50(MasterChef.PoolInfo) -> poolInfo_19[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_50(MasterChef.PoolInfo)
REF_51(mapping(address => MasterChef.UserInfo)) -> userInfo_4[_pid_1]
TMP_73(address) = INTERNAL_CALL, Context._msgSender()()
REF_52(MasterChef.UserInfo) -> REF_51[TMP_73]
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_52(MasterChef.UserInfo)
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
_concurShareMultiplier_11(uint256) := ϕ(['_concurShareMultiplier_5'])
REF_53(uint128) -> user_1 (-> ['userInfo']).amount
TMP_75(bool) = REF_53 > 0
CONDITION TMP_75
REF_54(uint128) -> user_1 (-> ['userInfo']).amount
REF_55(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_76(uint128) = REF_54 (c)* REF_55
TMP_77(uint128) = TMP_76 (c)/ _concurShareMultiplier_11
REF_56(uint128) -> user_1 (-> ['userInfo']).rewardDebt
TMP_78(uint128) = TMP_77 (c)- REF_56
pending_1(uint256) := TMP_78(uint128)
TMP_79(bool) = pending_1 > 0
CONDITION TMP_79
TMP_81(bool) = _amount_1 > 0
CONDITION TMP_81
REF_57(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
TMP_82(bool) = REF_57 > 0
CONDITION TMP_82
REF_59(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', 'REF_59'] 
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_83', '_perMille_6'] 
depositFee_1(uint256) := TMP_84(uint256)
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
REF_67(uint128) -> user_4 (-> []).rewardDebt
REF_69(uint128) -> user_4 (-> []).amount
REF_70(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_90(uint128) = REF_69 (c)* REF_70
TMP_91(uint128) = TMP_90 (c)/ _concurShareMultiplier_12
TMP_92(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_91'] 
user_5 (-> [])(MasterChef.UserInfo) := ϕ(['user_4 (-> [])'])
REF_67 (->user_5 (-> [])) := TMP_92(uint128)
REF_64(uint128) -> user_1 (-> ['userInfo']).amount
REF_66(uint128) -> user_1 (-> ['userInfo']).amount
TMP_88(uint128) = REF_66 (c)+ _amount_1
TMP_89(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_88'] 
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_64 (->user_3 (-> ['userInfo'])) := TMP_89(uint128)
userInfo_7(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_3 (-> ['userInfo'])"])
REF_61(uint128) -> user_1 (-> ['userInfo']).amount
REF_63(uint128) -> user_1 (-> ['userInfo']).amount
TMP_85(uint128) = REF_63 (c)+ _amount_1
TMP_86(uint128) = TMP_85 (c)- depositFee_1
TMP_87(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_86'] 
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_61 (->user_2 (-> ['userInfo'])) := TMP_87(uint128)
userInfo_6(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
user_4 (-> [])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_3 (-> ['userInfo'])"])
Emit Deposit(_recipient_1,_pid_1,_amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_17, name: poolInfo

Name: poolInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_2, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_7, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _perMille_1, name: _perMille

Name: _perMille Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolInfo_17(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userInfo_2(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_7(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_perMille_1(uint256) := ϕ(['_perMille_6', '_perMille_0', '_perMille_5'])
Phi
[i]Type for _perMille

Name: _perMille Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, MasterChef.onlyDepositor()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_19, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_19, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
End popogation
REF_50(MasterChef.PoolInfo) -> poolInfo_19[_pid_1]
INDEX
[i]Type for REF_50

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_50(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_4, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_4, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
End popogation
REF_51(mapping(address => MasterChef.UserInfo)) -> userInfo_4[_pid_1]
INDEX
[i]Type for REF_51

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_73(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_73

Name: TMP_73 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_52(MasterChef.UserInfo) -> REF_51[TMP_73]
INDEX
[i]Type for REF_52

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_52(MasterChef.UserInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
End popogation
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
_concurShareMultiplier_11(uint256) := ϕ(['_concurShareMultiplier_5'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
End popogation
REF_53(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_53

Name: REF_53 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_53 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(bool) = REF_53 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_75

Name: TMP_75 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_54(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_54

Name: REF_54 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_54 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_55(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: deposit_pool_accConcurPerShare
OUT KEY: deposit_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_55

Name: REF_55 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_55 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(uint128) = REF_54 (c)* REF_55
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_76

Name: TMP_76 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77(uint128) = TMP_76 (c)/ _concurShareMultiplier_11
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_77

Name: TMP_77 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_56(uint128) -> user_1 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: deposit_user_rewardDebt
OUT KEY: deposit_user_rewardDebt
FTT: None
No field found
[i]Type for REF_56

Name: REF_56 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_56 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_78(uint128) = TMP_77 (c)- REF_56
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_78

Name: TMP_78 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pending_1(uint256) := TMP_78(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_79(bool) = pending_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_79

Name: TMP_79 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_81(bool) = _amount_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_81

Name: TMP_81 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
End popogation
REF_57(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
MEMBER
OUT KEY: deposit_pool_depositFeeBP
OUT KEY: deposit_pool_depositFeeBP
FTT: None
No field found
[i]Type for REF_57

Name: REF_57 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositFeeBP
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: depositFeeBP Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_57 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: depositFeeBP Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(bool) = REF_57 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_82

Name: TMP_82 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _perMille_6, name: _perMille

Name: _perMille Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _perMille_6, name: _perMille

Name: _perMille Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_59(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
MEMBER
OUT KEY: deposit_pool_depositFeeBP
OUT KEY: deposit_pool_depositFeeBP
FTT: None
No field found
[i]Type for REF_59

Name: REF_59 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositFeeBP
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: depositFeeBP Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_59 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: depositFeeBP Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', 'REF_59'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_83

Name: TMP_83 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_83', '_perMille_6'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_84

Name: TMP_84 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
depositFee_1(uint256) := TMP_84(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
New param cache [[[], [], 0, '_recipient', [], -1, -995, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 0, '_recipient', [], -1, -995], [[-1], [-1], 'u', None, [], -1, 'u']]
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: user_4 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _concurShareMultiplier_12, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_4 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _concurShareMultiplier_12, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_5 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 5 (-> [])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_5 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 5 (-> [])
Globalname: user, contract_name: MasterChef
REF_67(uint128) -> user_4 (-> []).rewardDebt
MEMBER
OUT KEY: deposit_user_rewardDebt
OUT KEY: deposit_user_rewardDebt
FTT: None
No field found
[i]Type for REF_67

Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_69(uint128) -> user_4 (-> []).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_69

Name: REF_69 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_69 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_70(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: deposit_pool_accConcurPerShare
OUT KEY: deposit_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_70

Name: REF_70 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_70 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_90(uint128) = REF_69 (c)* REF_70
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_90

Name: TMP_90 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_91(uint128) = TMP_90 (c)/ _concurShareMultiplier_12
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_91

Name: TMP_91 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_92(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_91'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_91
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_91
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_92

Name: TMP_92 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_5 (-> [])(MasterChef.UserInfo) := ϕ(['user_4 (-> [])'])
Phi

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_67 (->user_5 (-> [])) := TMP_92(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_67

Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_7, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_7, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_64(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_64

Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_66(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_66

Name: REF_66 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_66 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88(uint128) = REF_66 (c)+ _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_88

Name: TMP_88 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_89(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_88'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_88
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_88
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_89

Name: TMP_89 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_64 (->user_3 (-> ['userInfo'])) := TMP_89(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_64

Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_7(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_3 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_6, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_6, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_61(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_61

Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_63(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_63

Name: REF_63 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_63 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_85(uint128) = REF_63 (c)+ _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_85

Name: TMP_85 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_86(uint128) = TMP_85 (c)- depositFee_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_86

Name: TMP_86 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_87(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_86'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_86
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_86
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_87

Name: TMP_87 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_61 (->user_2 (-> ['userInfo'])) := TMP_87(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_61

Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_6(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: user_4 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
user_4 (-> [])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_3 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


poolInfo_17(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
userInfo_2(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
_concurShareMultiplier_7(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
_perMille_1(uint256) := ϕ(['_perMille_6', '_perMille_0', '_perMille_5'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, MasterChef.onlyDepositor()()
REF_50(MasterChef.PoolInfo) -> poolInfo_19[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_50(MasterChef.PoolInfo)
REF_51(mapping(address => MasterChef.UserInfo)) -> userInfo_4[_pid_1]
TMP_73(address) = INTERNAL_CALL, Context._msgSender()()
REF_52(MasterChef.UserInfo) -> REF_51[TMP_73]
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_52(MasterChef.UserInfo)
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
_concurShareMultiplier_11(uint256) := ϕ(['_concurShareMultiplier_5'])
REF_53(uint128) -> user_1 (-> ['userInfo']).amount
TMP_75(bool) = REF_53 > 0
CONDITION TMP_75
REF_54(uint128) -> user_1 (-> ['userInfo']).amount
REF_55(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_76(uint128) = REF_54 (c)* REF_55
TMP_77(uint128) = TMP_76 (c)/ _concurShareMultiplier_11
REF_56(uint128) -> user_1 (-> ['userInfo']).rewardDebt
TMP_78(uint128) = TMP_77 (c)- REF_56
pending_1(uint256) := TMP_78(uint128)
TMP_79(bool) = pending_1 > 0
CONDITION TMP_79
TMP_81(bool) = _amount_1 > 0
CONDITION TMP_81
REF_57(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
TMP_82(bool) = REF_57 > 0
CONDITION TMP_82
REF_59(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', 'REF_59'] 
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_83', '_perMille_6'] 
depositFee_1(uint256) := TMP_84(uint256)
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
REF_67(uint128) -> user_4 (-> []).rewardDebt
REF_69(uint128) -> user_4 (-> []).amount
REF_70(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_90(uint128) = REF_69 (c)* REF_70
TMP_91(uint128) = TMP_90 (c)/ _concurShareMultiplier_12
TMP_92(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_91'] 
user_5 (-> [])(MasterChef.UserInfo) := ϕ(['user_4 (-> [])'])
REF_67 (->user_5 (-> [])) := TMP_92(uint128)
REF_64(uint128) -> user_1 (-> ['userInfo']).amount
REF_66(uint128) -> user_1 (-> ['userInfo']).amount
TMP_88(uint128) = REF_66 (c)+ _amount_1
TMP_89(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_88'] 
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_64 (->user_3 (-> ['userInfo'])) := TMP_89(uint128)
userInfo_7(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_3 (-> ['userInfo'])"])
REF_61(uint128) -> user_1 (-> ['userInfo']).amount
REF_63(uint128) -> user_1 (-> ['userInfo']).amount
TMP_85(uint128) = REF_63 (c)+ _amount_1
TMP_86(uint128) = TMP_85 (c)- depositFee_1
TMP_87(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_86'] 
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_61 (->user_2 (-> ['userInfo'])) := TMP_87(uint128)
userInfo_6(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
user_4 (-> [])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_3 (-> ['userInfo'])"])
Emit Deposit(_recipient_1,_pid_1,_amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_17, name: poolInfo

Name: poolInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_2, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_7, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _perMille_1, name: _perMille

Name: _perMille Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolInfo_17(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userInfo_2(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_7(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_perMille_1(uint256) := ϕ(['_perMille_6', '_perMille_0', '_perMille_5'])
Phi
[i]Type for _perMille

Name: _perMille Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, MasterChef.onlyDepositor()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_19, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_19, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
End popogation
REF_50(MasterChef.PoolInfo) -> poolInfo_19[_pid_1]
INDEX
[i]Type for REF_50

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_50(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_4, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_4, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
End popogation
REF_51(mapping(address => MasterChef.UserInfo)) -> userInfo_4[_pid_1]
INDEX
[i]Type for REF_51

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_73(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_73

Name: TMP_73 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_52(MasterChef.UserInfo) -> REF_51[TMP_73]
INDEX
[i]Type for REF_52

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_52(MasterChef.UserInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
End popogation
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
_concurShareMultiplier_11(uint256) := ϕ(['_concurShareMultiplier_5'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
End popogation
REF_53(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_53

Name: REF_53 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_53 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(bool) = REF_53 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_75

Name: TMP_75 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_11, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_54(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_54

Name: REF_54 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_54 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_55(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: deposit_pool_accConcurPerShare
OUT KEY: deposit_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_55

Name: REF_55 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_55 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_76(uint128) = REF_54 (c)* REF_55
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_76

Name: TMP_76 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77(uint128) = TMP_76 (c)/ _concurShareMultiplier_11
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_77

Name: TMP_77 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_56(uint128) -> user_1 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: deposit_user_rewardDebt
OUT KEY: deposit_user_rewardDebt
FTT: None
No field found
[i]Type for REF_56

Name: REF_56 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_56 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_78(uint128) = TMP_77 (c)- REF_56
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_78

Name: TMP_78 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pending_1(uint256) := TMP_78(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_79(bool) = pending_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_79

Name: TMP_79 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_81(bool) = _amount_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_81

Name: TMP_81 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
End popogation
REF_57(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
MEMBER
OUT KEY: deposit_pool_depositFeeBP
OUT KEY: deposit_pool_depositFeeBP
FTT: None
No field found
[i]Type for REF_57

Name: REF_57 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositFeeBP
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: depositFeeBP Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_57 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: depositFeeBP Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_82(bool) = REF_57 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_82

Name: TMP_82 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _perMille_6, name: _perMille

Name: _perMille Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _perMille_6, name: _perMille

Name: _perMille Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_59(uint16) -> pool_1 (-> ['poolInfo']).depositFeeBP
MEMBER
OUT KEY: deposit_pool_depositFeeBP
OUT KEY: deposit_pool_depositFeeBP
FTT: None
No field found
[i]Type for REF_59

Name: REF_59 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: depositFeeBP
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: depositFeeBP Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_59 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: depositFeeBP Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_83(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_amount_1', 'REF_59'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_83

Name: TMP_83 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_83', '_perMille_6'] 
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_84

Name: TMP_84 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
depositFee_1(uint256) := TMP_84(uint256)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
New param cache [[[], [], 0, '_recipient', [], -1, -995, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 0, '_recipient', [], -1, -995], [[-1], [-1], 'u', None, [], -1, 'u']]
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: user_4 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _concurShareMultiplier_12, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_4 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Ssa_name: _concurShareMultiplier_12, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_5 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 5 (-> [])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_5 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 5 (-> [])
Globalname: user, contract_name: MasterChef
REF_67(uint128) -> user_4 (-> []).rewardDebt
MEMBER
OUT KEY: deposit_user_rewardDebt
OUT KEY: deposit_user_rewardDebt
FTT: None
No field found
[i]Type for REF_67

Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_69(uint128) -> user_4 (-> []).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_69

Name: REF_69 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_69 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_70(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: deposit_pool_accConcurPerShare
OUT KEY: deposit_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_70

Name: REF_70 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare, depositFeeBP
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_70 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_90(uint128) = REF_69 (c)* REF_70
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_90

Name: TMP_90 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_91(uint128) = TMP_90 (c)/ _concurShareMultiplier_12
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_91

Name: TMP_91 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_92(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_91'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_91
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_91
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_92

Name: TMP_92 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_5 (-> [])(MasterChef.UserInfo) := ϕ(['user_4 (-> [])'])
Phi

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_67 (->user_5 (-> [])) := TMP_92(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_67

Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_4 (-> []), Field: rewardDebt
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_67 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_7, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_7, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_64(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_64

Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_66(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_66

Name: REF_66 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_66 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_88(uint128) = REF_66 (c)+ _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_88

Name: TMP_88 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_89(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_88'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_88
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_88
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_89

Name: TMP_89 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_64 (->user_3 (-> ['userInfo'])) := TMP_89(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_64

Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_64 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_7(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_3 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: depositFee_1, name: depositFee

Name: depositFee Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_6, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_6, name: userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_61(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_61

Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_63(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: deposit_user_amount
OUT KEY: deposit_user_amount
FTT: None
No field found
[i]Type for REF_63

Name: REF_63 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_63 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_85(uint128) = REF_63 (c)+ _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_85

Name: TMP_85 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_86(uint128) = TMP_85 (c)- depositFee_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_86

Name: TMP_86 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_87(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_86'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_86
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_86
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_87

Name: TMP_87 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_61 (->user_2 (-> ['userInfo'])) := TMP_87(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_61

Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_61 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_6(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: user_4 (-> []), name: user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> [])
Globalname: user, contract_name: MasterChef
user_4 (-> [])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_3 (-> ['userInfo'])"])
Phi

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: deposit
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: deposit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Reading Function: withdraw
Checking funcion...



withdraw
Function name: withdraw
Finding type for _recipient(address ... )
prev address? u
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Finding type for _pid(uint256 ... )
Value: u
Finding type for _amount(uint256 ... )
Value: u
New param cache [[[], [], 0, '_recipient', [], -1, -994, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
FIND RETURN
ENTRY_POINT
withdraw(address,uint256,uint256)


poolInfo_20(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
userInfo_8(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
_concurShareMultiplier_13(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, MasterChef.onlyDepositor()()
REF_71(MasterChef.PoolInfo) -> poolInfo_22[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_71(MasterChef.PoolInfo)
REF_72(mapping(address => MasterChef.UserInfo)) -> userInfo_10[_pid_1]
TMP_96(address) = INTERNAL_CALL, Context._msgSender()()
REF_73(MasterChef.UserInfo) -> REF_72[TMP_96]
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_73(MasterChef.UserInfo)
REF_74(uint128) -> user_1 (-> ['userInfo']).amount
TMP_97(bool) = REF_74 > 0
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,MasterChef: nothing to withdraw)
REF_75(uint128) -> user_1 (-> ['userInfo']).amount
TMP_99(bool) = REF_75 >= _amount_1
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,MasterChef: withdraw not allowed)
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
_concurShareMultiplier_17(uint256) := ϕ(['_concurShareMultiplier_5'])
REF_76(uint128) -> user_1 (-> ['userInfo']).amount
REF_77(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_102(uint128) = REF_76 (c)* REF_77
TMP_103(uint128) = TMP_102 (c)/ _concurShareMultiplier_17
REF_78(uint128) -> user_1 (-> ['userInfo']).rewardDebt
TMP_104(uint128) = TMP_103 (c)- REF_78
pending_1(uint256) := TMP_104(uint128)
TMP_105(bool) = pending_1 > 0
CONDITION TMP_105
TMP_107(bool) = _amount_1 > 0
CONDITION TMP_107
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_1 (-> ['userInfo'])"])
REF_82(uint128) -> user_3 (-> ['userInfo']).rewardDebt
REF_84(uint128) -> user_3 (-> ['userInfo']).amount
REF_85(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_110(uint128) = REF_84 (c)* REF_85
TMP_111(uint128) = TMP_110 (c)/ _concurShareMultiplier_18
TMP_112(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_111'] 
user_4 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_3 (-> ['userInfo'])"])
REF_82 (->user_4 (-> ['userInfo'])) := TMP_112(uint128)
userInfo_13(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_4 (-> ['userInfo'])"])
REF_79(uint128) -> user_1 (-> ['userInfo']).amount
REF_81(uint128) -> user_1 (-> ['userInfo']).amount
TMP_108(uint128) = REF_81 (c)- _amount_1
TMP_109(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_108'] 
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_79 (->user_2 (-> ['userInfo'])) := TMP_109(uint128)
userInfo_12(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Emit Withdraw(_recipient_1,_pid_1,_amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_20, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 20
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: userInfo_8, name: userInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: userInfo, Num: 8
Globalname: userInfo, contract_name: MasterChef
global...

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _concurShareMultiplier_13, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 13
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
poolInfo_20(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userInfo_8(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_13(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, MasterChef.onlyDepositor()()
New param cache []
Old param cache: []
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_22, name: poolInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: poolInfo, Num: 22
Globalname: poolInfo, contract_name: MasterChef
global...

Name: poolInfo Function: updatePool
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: poolInfo_22, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_71(MasterChef.PoolInfo) -> poolInfo_22[_pid_1]
INDEX
[i]Type for REF_71

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_71(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_96 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_10, name: userInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: userInfo, Num: 10
Globalname: userInfo, contract_name: MasterChef
global...

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_10, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 1 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
REF_72(mapping(address => MasterChef.UserInfo)) -> userInfo_10[_pid_1]
INDEX
[i]Type for REF_72

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_96(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_96

Name: TMP_96 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_73(MasterChef.UserInfo) -> REF_72[TMP_96]
INDEX
[i]Type for REF_73

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_73(MasterChef.UserInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_97 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_74(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_74

Name: REF_74 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_74 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_97(bool) = REF_74 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_97

Name: TMP_97 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,MasterChef: nothing to withdraw)
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_99 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _amount, Num: 1
Globalname: _amount, contract_name: MasterChef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _amount, Num: 1
Globalname: _amount, contract_name: MasterChef
End popogation
REF_75(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_75

Name: REF_75 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_75 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = REF_75 >= _amount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_99

Name: TMP_99 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,MasterChef: withdraw not allowed)
[i]Type for TMP_100

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
End popogation
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 17
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
_concurShareMultiplier_17(uint256) := ϕ(['_concurShareMultiplier_5'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_102 cleared
[i] TMP_103 cleared
[i] TMP_104 cleared
[i] pending cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pending, Num: 1
Globalname: pending, contract_name: MasterChef
End popogation
REF_76(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_76

Name: REF_76 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_76 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_77(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: withdraw_pool_accConcurPerShare
OUT KEY: withdraw_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_77

Name: REF_77 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_77 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_102(uint128) = REF_76 (c)* REF_77
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_102

Name: TMP_102 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint128) = TMP_102 (c)/ _concurShareMultiplier_17
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_103

Name: TMP_103 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_78(uint128) -> user_1 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: withdraw_user_rewardDebt
OUT KEY: withdraw_user_rewardDebt
FTT: None
No field found
[i]Type for REF_78

Name: REF_78 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_78 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_104(uint128) = TMP_103 (c)- REF_78
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_104

Name: TMP_104 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pending_1(uint256) := TMP_104(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_105 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_105(bool) = pending_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_105

Name: TMP_105 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_107 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _amount, Num: 1
Globalname: _amount, contract_name: MasterChef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _amount, Num: 1
Globalname: _amount, contract_name: MasterChef
End popogation
TMP_107(bool) = _amount_1 > 0
A: u B: 0
lnorm: u rnorm: 0
Source address: u
Source address: u
[i]Type for TMP_107

Name: TMP_107 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
New param cache [[[], [], 0, '_recipient', [], -1, -994, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 0, '_recipient', [], -1, -995], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 0, '_recipient', [], -1, -994, 'u']

Name: _to Function: None
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
safeConcurTransfer(address,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE concurBalance = concur.balanceOf(address(this))
Propogating All
NEW VARIABLE transferSuccess = false
Propogating All
IF _amount > concurBalance
Propogating All
concurBalance_1
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
_amount_1
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION transferSuccess = concur.transfer(_to,_amount)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -995
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
_amount_1
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
END_IF
Propogating All
EXPRESSION require(bool,string)(transferSuccess,safeConcurTransfer: transfer failed)
Propogating All
transferSuccess_4
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION transferSuccess = concur.transfer(_to,concurBalance)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
concurBalance_1
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
END_IF
[i] _to cleared
[i] _amount cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _to_1, name: _to

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['_recipient_1', '_recipient_1'])
Phi
[i]Type for _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
XXXX
_amount_1(uint256) := ϕ(['pending_1', 'pending_1'])
Phi
[i]Type for _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_2(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_0'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_116 cleared
[i] TMP_117 cleared
[i] concurBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurBalance, Num: 1
Globalname: concurBalance, contract_name: MasterChef
End popogation
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = CONVERT this to address
Converting this
2
[i]Type for TMP_116

Name: TMP_116 Function: safeConcurTransfer
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:concur_2(IERC20), function:balanceOf, arguments:['TMP_116']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_117

Name: TMP_117 Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concur_3(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_2'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurBalance_1(uint256) := TMP_117(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_1, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 1
Globalname: transferSuccess, contract_name: MasterChef
End popogation
transferSuccess_1(bool) := False(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
[i] TMP_118 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_118(bool) = _amount_1 > concurBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_120 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_3, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 3
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_5, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', '_amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_120

Name: TMP_120 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_5(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_3(bool) := TMP_120(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
transferSuccess_4(bool) := ϕ(['transferSuccess_2', 'transferSuccess_3'])
Phi

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
End popogation
TMP_121(None) = SOLIDITY_CALL require(bool,string)(transferSuccess_4,safeConcurTransfer: transfer failed)
[i]Type for TMP_121

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_119 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_2, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 2
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_4, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_119(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', 'concurBalance_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_119

Name: TMP_119 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_4(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_3', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_2(bool) := TMP_119(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] _to cleared
[i] _amount cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['_recipient_1', '_recipient_1'])
Phi
[i]Type for _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
XXXX
_amount_1(uint256) := ϕ(['pending_1', 'pending_1'])
Phi
[i]Type for _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_2(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_0'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_116 cleared
[i] TMP_117 cleared
[i] concurBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurBalance, Num: 1
Globalname: concurBalance, contract_name: MasterChef
End popogation
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = CONVERT this to address
Converting this
2
[i]Type for TMP_116

Name: TMP_116 Function: safeConcurTransfer
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:concur_2(IERC20), function:balanceOf, arguments:['TMP_116']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_117

Name: TMP_117 Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concur_3(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_2'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurBalance_1(uint256) := TMP_117(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_1, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 1
Globalname: transferSuccess, contract_name: MasterChef
End popogation
transferSuccess_1(bool) := False(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
[i] TMP_118 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_118(bool) = _amount_1 > concurBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_120 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_3, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 3
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_5, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', '_amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_120

Name: TMP_120 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_5(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_3(bool) := TMP_120(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
transferSuccess_4(bool) := ϕ(['transferSuccess_2', 'transferSuccess_3'])
Phi

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
End popogation
TMP_121(None) = SOLIDITY_CALL require(bool,string)(transferSuccess_4,safeConcurTransfer: transfer failed)
[i]Type for TMP_121

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_119 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_2, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 2
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_4, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_119(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', 'concurBalance_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_119

Name: TMP_119 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_4(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_3', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_2(bool) := TMP_119(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] user cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_1 (-> ['userInfo'])"])
Phi

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
[i] TMP_110 cleared
[i] TMP_111 cleared
[i] TMP_112 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: _concurShareMultiplier_18, name: _concurShareMultiplier

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: _concurShareMultiplier, Num: 18
Globalname: _concurShareMultiplier, contract_name: MasterChef
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: _concurShareMultiplier_18, name: _concurShareMultiplier

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_13, name: userInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: userInfo, Num: 13
Globalname: userInfo, contract_name: MasterChef
global...

Name: userInfo Function: deposit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Ssa_name: user_4 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 4 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_4 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 4 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_13, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_82(uint128) -> user_3 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: withdraw_user_rewardDebt
OUT KEY: withdraw_user_rewardDebt
FTT: None
No field found
[i]Type for REF_82

Name: REF_82 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_82 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
REF_84(uint128) -> user_3 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_84

Name: REF_84 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_84 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_85(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: withdraw_pool_accConcurPerShare
OUT KEY: withdraw_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_85

Name: REF_85 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_85 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(uint128) = REF_84 (c)* REF_85
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_110

Name: TMP_110 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint128) = TMP_110 (c)/ _concurShareMultiplier_18
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_111

Name: TMP_111 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_112(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_111'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_111
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_111
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_112

Name: TMP_112 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_4 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_3 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_82 (->user_4 (-> ['userInfo'])) := TMP_112(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_82

Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_13(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_4 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
[i] TMP_108 cleared
[i] TMP_109 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_12, name: userInfo

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: userInfo, Num: 12
Globalname: userInfo, contract_name: MasterChef
global...

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_12, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_79(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_79

Name: REF_79 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_79 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
REF_81(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_81

Name: REF_81 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_81 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_108(uint128) = REF_81 (c)- _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_108

Name: TMP_108 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_109(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_108'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_108
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_108
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_109

Name: TMP_109 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_79 (->user_2 (-> ['userInfo'])) := TMP_109(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_79

Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_12(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


poolInfo_20(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
userInfo_8(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
_concurShareMultiplier_13(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, MasterChef.onlyDepositor()()
REF_71(MasterChef.PoolInfo) -> poolInfo_22[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_71(MasterChef.PoolInfo)
REF_72(mapping(address => MasterChef.UserInfo)) -> userInfo_10[_pid_1]
TMP_96(address) = INTERNAL_CALL, Context._msgSender()()
REF_73(MasterChef.UserInfo) -> REF_72[TMP_96]
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_73(MasterChef.UserInfo)
REF_74(uint128) -> user_1 (-> ['userInfo']).amount
TMP_97(bool) = REF_74 > 0
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,MasterChef: nothing to withdraw)
REF_75(uint128) -> user_1 (-> ['userInfo']).amount
TMP_99(bool) = REF_75 >= _amount_1
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,MasterChef: withdraw not allowed)
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
_concurShareMultiplier_17(uint256) := ϕ(['_concurShareMultiplier_5'])
REF_76(uint128) -> user_1 (-> ['userInfo']).amount
REF_77(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_102(uint128) = REF_76 (c)* REF_77
TMP_103(uint128) = TMP_102 (c)/ _concurShareMultiplier_17
REF_78(uint128) -> user_1 (-> ['userInfo']).rewardDebt
TMP_104(uint128) = TMP_103 (c)- REF_78
pending_1(uint256) := TMP_104(uint128)
TMP_105(bool) = pending_1 > 0
CONDITION TMP_105
TMP_107(bool) = _amount_1 > 0
CONDITION TMP_107
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_1 (-> ['userInfo'])"])
REF_82(uint128) -> user_3 (-> ['userInfo']).rewardDebt
REF_84(uint128) -> user_3 (-> ['userInfo']).amount
REF_85(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_110(uint128) = REF_84 (c)* REF_85
TMP_111(uint128) = TMP_110 (c)/ _concurShareMultiplier_18
TMP_112(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_111'] 
user_4 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_3 (-> ['userInfo'])"])
REF_82 (->user_4 (-> ['userInfo'])) := TMP_112(uint128)
userInfo_13(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_4 (-> ['userInfo'])"])
REF_79(uint128) -> user_1 (-> ['userInfo']).amount
REF_81(uint128) -> user_1 (-> ['userInfo']).amount
TMP_108(uint128) = REF_81 (c)- _amount_1
TMP_109(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_108'] 
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_79 (->user_2 (-> ['userInfo'])) := TMP_109(uint128)
userInfo_12(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Emit Withdraw(_recipient_1,_pid_1,_amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_20, name: poolInfo

Name: poolInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_8, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_13, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolInfo_20(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userInfo_8(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_13(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, MasterChef.onlyDepositor()()
New param cache []
Old param cache: []
[i] pool cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_22, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_22, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Name: pool, Num: 1 (-> ['poolInfo'])
Globalname: pool, contract_name: MasterChef
End popogation
REF_71(MasterChef.PoolInfo) -> poolInfo_22[_pid_1]
INDEX
[i]Type for REF_71

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_71(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
XXXX
[i] TMP_96 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_10, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_10, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 1 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
REF_72(mapping(address => MasterChef.UserInfo)) -> userInfo_10[_pid_1]
INDEX
[i]Type for REF_72

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_96(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_96

Name: TMP_96 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_73(MasterChef.UserInfo) -> REF_72[TMP_96]
INDEX
[i]Type for REF_73

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_73(MasterChef.UserInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
[i] TMP_97 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
End popogation
REF_74(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_74

Name: REF_74 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_74 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97(bool) = REF_74 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_97

Name: TMP_97 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,MasterChef: nothing to withdraw)
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_99 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_75(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_75

Name: REF_75 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_75 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = REF_75 >= _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
Source address: u
[i]Type for TMP_99

Name: TMP_99 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,MasterChef: withdraw not allowed)
[i]Type for TMP_100

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
End popogation
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
_concurShareMultiplier_17(uint256) := ϕ(['_concurShareMultiplier_5'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_102 cleared
[i] TMP_103 cleared
[i] TMP_104 cleared
[i] pending cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: pending, Num: 1
Globalname: pending, contract_name: MasterChef
End popogation
REF_76(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_76

Name: REF_76 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_76 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_77(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: withdraw_pool_accConcurPerShare
OUT KEY: withdraw_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_77

Name: REF_77 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_77 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_102(uint128) = REF_76 (c)* REF_77
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_102

Name: TMP_102 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint128) = TMP_102 (c)/ _concurShareMultiplier_17
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_103

Name: TMP_103 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_78(uint128) -> user_1 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: withdraw_user_rewardDebt
OUT KEY: withdraw_user_rewardDebt
FTT: None
No field found
[i]Type for REF_78

Name: REF_78 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_78 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_104(uint128) = TMP_103 (c)- REF_78
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_104

Name: TMP_104 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pending_1(uint256) := TMP_104(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_105 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_105(bool) = pending_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_105

Name: TMP_105 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
[i] TMP_107 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_107(bool) = _amount_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_107

Name: TMP_107 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
New param cache [[[], [], 0, '_recipient', [], -1, -994, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 0, '_recipient', [], -1, -995], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 0, '_recipient', [], -1, -994, 'u']

Name: _to Function: None
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
safeConcurTransfer(address,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE concurBalance = concur.balanceOf(address(this))
Propogating All
NEW VARIABLE transferSuccess = false
Propogating All
IF _amount > concurBalance
Propogating All
concurBalance_1
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
_amount_1
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION transferSuccess = concur.transfer(_to,_amount)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
_amount_1
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
END_IF
Propogating All
EXPRESSION require(bool,string)(transferSuccess,safeConcurTransfer: transfer failed)
Propogating All
transferSuccess_4
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION transferSuccess = concur.transfer(_to,concurBalance)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
concurBalance_1
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
END_IF
[i] _to cleared
[i] _amount cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _to_1, name: _to

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['_recipient_1', '_recipient_1'])
Phi
[i]Type for _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
XXXX
_amount_1(uint256) := ϕ(['pending_1', 'pending_1'])
Phi
[i]Type for _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_2(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_0'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_116 cleared
[i] TMP_117 cleared
[i] concurBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurBalance, Num: 1
Globalname: concurBalance, contract_name: MasterChef
End popogation
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = CONVERT this to address
Converting this
2
[i]Type for TMP_116

Name: TMP_116 Function: safeConcurTransfer
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:concur_2(IERC20), function:balanceOf, arguments:['TMP_116']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_117

Name: TMP_117 Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concur_3(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_2'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurBalance_1(uint256) := TMP_117(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_1, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 1
Globalname: transferSuccess, contract_name: MasterChef
End popogation
transferSuccess_1(bool) := False(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
[i] TMP_118 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_118(bool) = _amount_1 > concurBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_120 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_3, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 3
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_5, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', '_amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_120

Name: TMP_120 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_5(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_3(bool) := TMP_120(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
transferSuccess_4(bool) := ϕ(['transferSuccess_2', 'transferSuccess_3'])
Phi

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
End popogation
TMP_121(None) = SOLIDITY_CALL require(bool,string)(transferSuccess_4,safeConcurTransfer: transfer failed)
[i]Type for TMP_121

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_119 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_2, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 2
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_4, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_119(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', 'concurBalance_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_119

Name: TMP_119 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_4(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_3', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_2(bool) := TMP_119(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] _to cleared
[i] _amount cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['_recipient_1', '_recipient_1'])
Phi
[i]Type for _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
XXXX
_amount_1(uint256) := ϕ(['pending_1', 'pending_1'])
Phi
[i]Type for _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_2(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_0'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_116 cleared
[i] TMP_117 cleared
[i] concurBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurBalance, Num: 1
Globalname: concurBalance, contract_name: MasterChef
End popogation
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = CONVERT this to address
Converting this
2
[i]Type for TMP_116

Name: TMP_116 Function: safeConcurTransfer
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:concur_2(IERC20), function:balanceOf, arguments:['TMP_116']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_117

Name: TMP_117 Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concur_3(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_2'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurBalance_1(uint256) := TMP_117(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_1, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 1
Globalname: transferSuccess, contract_name: MasterChef
End popogation
transferSuccess_1(bool) := False(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
[i] TMP_118 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_118(bool) = _amount_1 > concurBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_120 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_3, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 3
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_5, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', '_amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_120

Name: TMP_120 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_5(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_3(bool) := TMP_120(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
transferSuccess_4(bool) := ϕ(['transferSuccess_2', 'transferSuccess_3'])
Phi

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
End popogation
TMP_121(None) = SOLIDITY_CALL require(bool,string)(transferSuccess_4,safeConcurTransfer: transfer failed)
[i]Type for TMP_121

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_119 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_2, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 2
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_4, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_119(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', 'concurBalance_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_119

Name: TMP_119 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_4(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_3', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_2(bool) := TMP_119(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] user cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_1 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
[i] TMP_110 cleared
[i] TMP_111 cleared
[i] TMP_112 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: _concurShareMultiplier_18, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_18, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_13, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_4 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_4 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_13, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_82(uint128) -> user_3 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: withdraw_user_rewardDebt
OUT KEY: withdraw_user_rewardDebt
FTT: None
No field found
[i]Type for REF_82

Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_84(uint128) -> user_3 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_84

Name: REF_84 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_84 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_85(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: withdraw_pool_accConcurPerShare
OUT KEY: withdraw_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_85

Name: REF_85 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_85 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(uint128) = REF_84 (c)* REF_85
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_110

Name: TMP_110 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint128) = TMP_110 (c)/ _concurShareMultiplier_18
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_111

Name: TMP_111 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_112(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_111'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_111
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_111
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_112

Name: TMP_112 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_4 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_3 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_82 (->user_4 (-> ['userInfo'])) := TMP_112(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_82

Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_13(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_4 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
[i] TMP_108 cleared
[i] TMP_109 cleared
[i] user cleared
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_12, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_12, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_79(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_79

Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_81(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_81

Name: REF_81 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_81 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_108(uint128) = REF_81 (c)- _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_108

Name: TMP_108 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_109(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_108'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_108
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_108
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_109

Name: TMP_109 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_79 (->user_2 (-> ['userInfo'])) := TMP_109(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_79

Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_12(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


poolInfo_20(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
userInfo_8(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
_concurShareMultiplier_13(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, MasterChef.onlyDepositor()()
REF_71(MasterChef.PoolInfo) -> poolInfo_22[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_71(MasterChef.PoolInfo)
REF_72(mapping(address => MasterChef.UserInfo)) -> userInfo_10[_pid_1]
TMP_96(address) = INTERNAL_CALL, Context._msgSender()()
REF_73(MasterChef.UserInfo) -> REF_72[TMP_96]
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_73(MasterChef.UserInfo)
REF_74(uint128) -> user_1 (-> ['userInfo']).amount
TMP_97(bool) = REF_74 > 0
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,MasterChef: nothing to withdraw)
REF_75(uint128) -> user_1 (-> ['userInfo']).amount
TMP_99(bool) = REF_75 >= _amount_1
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,MasterChef: withdraw not allowed)
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
_concurShareMultiplier_17(uint256) := ϕ(['_concurShareMultiplier_5'])
REF_76(uint128) -> user_1 (-> ['userInfo']).amount
REF_77(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_102(uint128) = REF_76 (c)* REF_77
TMP_103(uint128) = TMP_102 (c)/ _concurShareMultiplier_17
REF_78(uint128) -> user_1 (-> ['userInfo']).rewardDebt
TMP_104(uint128) = TMP_103 (c)- REF_78
pending_1(uint256) := TMP_104(uint128)
TMP_105(bool) = pending_1 > 0
CONDITION TMP_105
TMP_107(bool) = _amount_1 > 0
CONDITION TMP_107
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_1 (-> ['userInfo'])"])
REF_82(uint128) -> user_3 (-> ['userInfo']).rewardDebt
REF_84(uint128) -> user_3 (-> ['userInfo']).amount
REF_85(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_110(uint128) = REF_84 (c)* REF_85
TMP_111(uint128) = TMP_110 (c)/ _concurShareMultiplier_18
TMP_112(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_111'] 
user_4 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_3 (-> ['userInfo'])"])
REF_82 (->user_4 (-> ['userInfo'])) := TMP_112(uint128)
userInfo_13(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_4 (-> ['userInfo'])"])
REF_79(uint128) -> user_1 (-> ['userInfo']).amount
REF_81(uint128) -> user_1 (-> ['userInfo']).amount
TMP_108(uint128) = REF_81 (c)- _amount_1
TMP_109(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_108'] 
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_79 (->user_2 (-> ['userInfo'])) := TMP_109(uint128)
userInfo_12(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Emit Withdraw(_recipient_1,_pid_1,_amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_20, name: poolInfo

Name: poolInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_8, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_13, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolInfo_20(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userInfo_8(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_13(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, MasterChef.onlyDepositor()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_22, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_22, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
End popogation
REF_71(MasterChef.PoolInfo) -> poolInfo_22[_pid_1]
INDEX
[i]Type for REF_71

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_71(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_10, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_10, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
End popogation
REF_72(mapping(address => MasterChef.UserInfo)) -> userInfo_10[_pid_1]
INDEX
[i]Type for REF_72

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_96(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_96

Name: TMP_96 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_73(MasterChef.UserInfo) -> REF_72[TMP_96]
INDEX
[i]Type for REF_73

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_73(MasterChef.UserInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
End popogation
REF_74(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_74

Name: REF_74 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_74 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97(bool) = REF_74 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_97

Name: TMP_97 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,MasterChef: nothing to withdraw)
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_75(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_75

Name: REF_75 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_75 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = REF_75 >= _amount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_99

Name: TMP_99 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,MasterChef: withdraw not allowed)
[i]Type for TMP_100

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
End popogation
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
_concurShareMultiplier_17(uint256) := ϕ(['_concurShareMultiplier_5'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_76(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_76

Name: REF_76 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_76 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_77(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: withdraw_pool_accConcurPerShare
OUT KEY: withdraw_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_77

Name: REF_77 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_77 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_102(uint128) = REF_76 (c)* REF_77
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_102

Name: TMP_102 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint128) = TMP_102 (c)/ _concurShareMultiplier_17
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_103

Name: TMP_103 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_78(uint128) -> user_1 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: withdraw_user_rewardDebt
OUT KEY: withdraw_user_rewardDebt
FTT: None
No field found
[i]Type for REF_78

Name: REF_78 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_78 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_104(uint128) = TMP_103 (c)- REF_78
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_104

Name: TMP_104 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pending_1(uint256) := TMP_104(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_105(bool) = pending_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_105

Name: TMP_105 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_107(bool) = _amount_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_107

Name: TMP_107 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
New param cache [[[], [], 0, '_recipient', [], -1, -994, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 0, '_recipient', [], -1, -995], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 0, '_recipient', [], -1, -994, 'u']

Name: _to Function: None
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
safeConcurTransfer(address,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE concurBalance = concur.balanceOf(address(this))
Propogating All
NEW VARIABLE transferSuccess = false
Propogating All
IF _amount > concurBalance
Propogating All
concurBalance_1
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
_amount_1
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION transferSuccess = concur.transfer(_to,_amount)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
_amount_1
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
END_IF
Propogating All
EXPRESSION require(bool,string)(transferSuccess,safeConcurTransfer: transfer failed)
Propogating All
transferSuccess_4
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION transferSuccess = concur.transfer(_to,concurBalance)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
concurBalance_1
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
END_IF
[i] _to cleared
[i] _amount cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _to_1, name: _to

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['_recipient_1', '_recipient_1'])
Phi
[i]Type for _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
XXXX
_amount_1(uint256) := ϕ(['pending_1', 'pending_1'])
Phi
[i]Type for _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_2(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_0'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_116 cleared
[i] TMP_117 cleared
[i] concurBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurBalance, Num: 1
Globalname: concurBalance, contract_name: MasterChef
End popogation
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = CONVERT this to address
Converting this
2
[i]Type for TMP_116

Name: TMP_116 Function: safeConcurTransfer
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:concur_2(IERC20), function:balanceOf, arguments:['TMP_116']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_117

Name: TMP_117 Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concur_3(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_2'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurBalance_1(uint256) := TMP_117(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_1, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 1
Globalname: transferSuccess, contract_name: MasterChef
End popogation
transferSuccess_1(bool) := False(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
[i] TMP_118 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_118(bool) = _amount_1 > concurBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_120 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_3, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 3
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_5, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', '_amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_120

Name: TMP_120 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_5(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_3(bool) := TMP_120(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
transferSuccess_4(bool) := ϕ(['transferSuccess_2', 'transferSuccess_3'])
Phi

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
End popogation
TMP_121(None) = SOLIDITY_CALL require(bool,string)(transferSuccess_4,safeConcurTransfer: transfer failed)
[i]Type for TMP_121

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_119 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_2, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 2
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_4, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_119(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', 'concurBalance_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_119

Name: TMP_119 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_4(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_3', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_2(bool) := TMP_119(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] _to cleared
[i] _amount cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['_recipient_1', '_recipient_1'])
Phi
[i]Type for _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
XXXX
_amount_1(uint256) := ϕ(['pending_1', 'pending_1'])
Phi
[i]Type for _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_2(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_0'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_116 cleared
[i] TMP_117 cleared
[i] concurBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurBalance, Num: 1
Globalname: concurBalance, contract_name: MasterChef
End popogation
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = CONVERT this to address
Converting this
2
[i]Type for TMP_116

Name: TMP_116 Function: safeConcurTransfer
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:concur_2(IERC20), function:balanceOf, arguments:['TMP_116']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_117

Name: TMP_117 Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concur_3(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_2'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurBalance_1(uint256) := TMP_117(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_1, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 1
Globalname: transferSuccess, contract_name: MasterChef
End popogation
transferSuccess_1(bool) := False(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
[i] TMP_118 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_118(bool) = _amount_1 > concurBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_120 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_3, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 3
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_5, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', '_amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_120

Name: TMP_120 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_5(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_3(bool) := TMP_120(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
transferSuccess_4(bool) := ϕ(['transferSuccess_2', 'transferSuccess_3'])
Phi

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
End popogation
TMP_121(None) = SOLIDITY_CALL require(bool,string)(transferSuccess_4,safeConcurTransfer: transfer failed)
[i]Type for TMP_121

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_119 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_2, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 2
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_4, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_119(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', 'concurBalance_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_119

Name: TMP_119 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_4(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_3', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_2(bool) := TMP_119(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_1 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: _concurShareMultiplier_18, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_18, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_13, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_4 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_4 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_13, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_82(uint128) -> user_3 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: withdraw_user_rewardDebt
OUT KEY: withdraw_user_rewardDebt
FTT: None
No field found
[i]Type for REF_82

Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_84(uint128) -> user_3 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_84

Name: REF_84 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_84 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_85(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: withdraw_pool_accConcurPerShare
OUT KEY: withdraw_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_85

Name: REF_85 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_85 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(uint128) = REF_84 (c)* REF_85
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_110

Name: TMP_110 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint128) = TMP_110 (c)/ _concurShareMultiplier_18
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_111

Name: TMP_111 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_112(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_111'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_111
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_111
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_112

Name: TMP_112 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_4 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_3 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_82 (->user_4 (-> ['userInfo'])) := TMP_112(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_82

Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_13(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_4 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_12, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_12, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_79(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_79

Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_81(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_81

Name: REF_81 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_81 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_108(uint128) = REF_81 (c)- _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_108

Name: TMP_108 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_109(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_108'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_108
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_108
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_109

Name: TMP_109 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_79 (->user_2 (-> ['userInfo'])) := TMP_109(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_79

Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_12(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation


poolInfo_20(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
userInfo_8(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
_concurShareMultiplier_13(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
MODIFIER_CALL, MasterChef.onlyDepositor()()
REF_71(MasterChef.PoolInfo) -> poolInfo_22[_pid_1]
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_71(MasterChef.PoolInfo)
REF_72(mapping(address => MasterChef.UserInfo)) -> userInfo_10[_pid_1]
TMP_96(address) = INTERNAL_CALL, Context._msgSender()()
REF_73(MasterChef.UserInfo) -> REF_72[TMP_96]
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_73(MasterChef.UserInfo)
REF_74(uint128) -> user_1 (-> ['userInfo']).amount
TMP_97(bool) = REF_74 > 0
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,MasterChef: nothing to withdraw)
REF_75(uint128) -> user_1 (-> ['userInfo']).amount
TMP_99(bool) = REF_75 >= _amount_1
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,MasterChef: withdraw not allowed)
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
_concurShareMultiplier_17(uint256) := ϕ(['_concurShareMultiplier_5'])
REF_76(uint128) -> user_1 (-> ['userInfo']).amount
REF_77(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_102(uint128) = REF_76 (c)* REF_77
TMP_103(uint128) = TMP_102 (c)/ _concurShareMultiplier_17
REF_78(uint128) -> user_1 (-> ['userInfo']).rewardDebt
TMP_104(uint128) = TMP_103 (c)- REF_78
pending_1(uint256) := TMP_104(uint128)
TMP_105(bool) = pending_1 > 0
CONDITION TMP_105
TMP_107(bool) = _amount_1 > 0
CONDITION TMP_107
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_1 (-> ['userInfo'])"])
REF_82(uint128) -> user_3 (-> ['userInfo']).rewardDebt
REF_84(uint128) -> user_3 (-> ['userInfo']).amount
REF_85(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
TMP_110(uint128) = REF_84 (c)* REF_85
TMP_111(uint128) = TMP_110 (c)/ _concurShareMultiplier_18
TMP_112(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_111'] 
user_4 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_3 (-> ['userInfo'])"])
REF_82 (->user_4 (-> ['userInfo'])) := TMP_112(uint128)
userInfo_13(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_4 (-> ['userInfo'])"])
REF_79(uint128) -> user_1 (-> ['userInfo']).amount
REF_81(uint128) -> user_1 (-> ['userInfo']).amount
TMP_108(uint128) = REF_81 (c)- _amount_1
TMP_109(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_108'] 
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
REF_79 (->user_2 (-> ['userInfo'])) := TMP_109(uint128)
userInfo_12(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Emit Withdraw(_recipient_1,_pid_1,_amount_1)


Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: poolInfo_20, name: poolInfo

Name: poolInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: userInfo_8, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_13, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
poolInfo_20(MasterChef.PoolInfo[]) := ϕ(['poolInfo_16', 'poolInfo_9', 'poolInfo_0', 'poolInfo_15', 'poolInfo_8', 'poolInfo_13', 'poolInfo_11', 'poolInfo_19', 'poolInfo_22', 'poolInfo_4', 'poolInfo_12', 'poolInfo_10'])
Phi
[i]Type for poolInfo

Name: poolInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userInfo_8(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(['userInfo_1', 'userInfo_4', 'userInfo_13', 'userInfo_0'])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_concurShareMultiplier_13(uint256) := ϕ(['_concurShareMultiplier_2', '_concurShareMultiplier_5', '_concurShareMultiplier_11', '_concurShareMultiplier_6', '_concurShareMultiplier_17', '_concurShareMultiplier_0', '_concurShareMultiplier_18', '_concurShareMultiplier_12'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, MasterChef.onlyDepositor()()
New param cache []
Old param cache: []
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: poolInfo_22, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: poolInfo_22, name: poolInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
End popogation
REF_71(MasterChef.PoolInfo) -> poolInfo_22[_pid_1]
INDEX
[i]Type for REF_71

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
pool_1 (-> ['poolInfo'])(MasterChef.PoolInfo) := REF_71(MasterChef.PoolInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_10, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: userInfo_10, name: userInfo

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
End popogation
REF_72(mapping(address => MasterChef.UserInfo)) -> userInfo_10[_pid_1]
INDEX
[i]Type for REF_72

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_96(address) = INTERNAL_CALL, Context._msgSender()()
New param cache []
Old param cache: []
Source address: u
[i]Type for TMP_96

Name: TMP_96 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_73(MasterChef.UserInfo) -> REF_72[TMP_96]
INDEX
[i]Type for REF_73

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['userInfo'])(MasterChef.UserInfo) := REF_73(MasterChef.UserInfo)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
End popogation
REF_74(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_74

Name: REF_74 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_74 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97(bool) = REF_74 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_97

Name: TMP_97 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(None) = SOLIDITY_CALL require(bool,string)(TMP_97,MasterChef: nothing to withdraw)
[i]Type for TMP_98

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_75(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_75

Name: REF_75 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_75 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = REF_75 >= _amount_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_99

Name: TMP_99 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,MasterChef: withdraw not allowed)
[i]Type for TMP_100

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
End popogation
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
INTERNAL_CALL, MasterChef.updatePool(uint256)(_pid_1)
New param cache [[[], [], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 'u', None, [], -1, 'u']]
_concurShareMultiplier_17(uint256) := ϕ(['_concurShareMultiplier_5'])
Phi
[i]Type for _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_17, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_76(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_76

Name: REF_76 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_76 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_77(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: withdraw_pool_accConcurPerShare
OUT KEY: withdraw_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_77

Name: REF_77 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_77 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_102(uint128) = REF_76 (c)* REF_77
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_102

Name: TMP_102 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(uint128) = TMP_102 (c)/ _concurShareMultiplier_17
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_103

Name: TMP_103 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_78(uint128) -> user_1 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: withdraw_user_rewardDebt
OUT KEY: withdraw_user_rewardDebt
FTT: None
No field found
[i]Type for REF_78

Name: REF_78 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_78 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_104(uint128) = TMP_103 (c)- REF_78
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_104

Name: TMP_104 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pending_1(uint256) := TMP_104(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_105(bool) = pending_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_105

Name: TMP_105 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_107(bool) = _amount_1 > 0
A: u B: 0
lnorm: u rnorm: 0
[i]Type for TMP_107

Name: TMP_107 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: pending_1, name: pending

Name: pending Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
INTERNAL_CALL, MasterChef.safeConcurTransfer(address,uint256)(_recipient_1,pending_1)
New param cache [[[], [], 0, '_recipient', [], -1, -994, 'u'], [[-1], [-1], 'u', None, [], -1, 'u', 'u']]
Old param cache: [[[], [], 0, '_recipient', [], -1, -995], [[-1], [-1], 'u', None, [], -1, 'u']]
[[], [], 0, '_recipient', [], -1, -994, 'u']

Name: _to Function: None
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
FIND RETURN
ENTRY_POINT
safeConcurTransfer(address,uint256)
ENTRY_POINT
Propogating All
NEW VARIABLE concurBalance = concur.balanceOf(address(this))
Propogating All
NEW VARIABLE transferSuccess = false
Propogating All
IF _amount > concurBalance
Propogating All
concurBalance_1
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
_amount_1
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
EXPRESSION transferSuccess = concur.transfer(_to,_amount)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
_amount_1
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
END_IF
Propogating All
EXPRESSION require(bool,string)(transferSuccess,safeConcurTransfer: transfer failed)
Propogating All
transferSuccess_4
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
EXPRESSION transferSuccess = concur.transfer(_to,concurBalance)
Propogating All
_to_1
Ssa_name: _to_1, name: _to

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
concurBalance_1
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
END_IF
[i] _to cleared
[i] _amount cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _to_1, name: _to

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['_recipient_1', '_recipient_1'])
Phi
[i]Type for _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
XXXX
_amount_1(uint256) := ϕ(['pending_1', 'pending_1'])
Phi
[i]Type for _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_2(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_0'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_116 cleared
[i] TMP_117 cleared
[i] concurBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurBalance, Num: 1
Globalname: concurBalance, contract_name: MasterChef
End popogation
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = CONVERT this to address
Converting this
2
[i]Type for TMP_116

Name: TMP_116 Function: safeConcurTransfer
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:concur_2(IERC20), function:balanceOf, arguments:['TMP_116']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_117

Name: TMP_117 Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concur_3(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_2'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurBalance_1(uint256) := TMP_117(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_1, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 1
Globalname: transferSuccess, contract_name: MasterChef
End popogation
transferSuccess_1(bool) := False(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
[i] TMP_118 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_118(bool) = _amount_1 > concurBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_120 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_3, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 3
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_5, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', '_amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_120

Name: TMP_120 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_5(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_3(bool) := TMP_120(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
transferSuccess_4(bool) := ϕ(['transferSuccess_2', 'transferSuccess_3'])
Phi

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
End popogation
TMP_121(None) = SOLIDITY_CALL require(bool,string)(transferSuccess_4,safeConcurTransfer: transfer failed)
[i]Type for TMP_121

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_119 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_2, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 2
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_4, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_119(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', 'concurBalance_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_119

Name: TMP_119 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_4(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_3', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_2(bool) := TMP_119(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] _to cleared
[i] _amount cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Source address: -994

Name: _to_1 Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _amount_1 Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
_to_1(address) := ϕ(['_recipient_1', '_recipient_1'])
Phi
[i]Type for _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
XXXX
_amount_1(uint256) := ϕ(['pending_1', 'pending_1'])
Phi
[i]Type for _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_2(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_0'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_116 cleared
[i] TMP_117 cleared
[i] concurBalance cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_2, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: 5
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: concurBalance, Num: 1
Globalname: concurBalance, contract_name: MasterChef
End popogation
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_116 = CONVERT this to address
Converting this
2
[i]Type for TMP_116

Name: TMP_116 Function: safeConcurTransfer
Num: 
Den: 
Address: 2
Norm: u
LF: MasterChef
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_117(uint256) = HIGH_LEVEL_CALL, dest:concur_2(IERC20), function:balanceOf, arguments:['TMP_116']  
High Call: balanceOf
Running querryfc
Found: None
Written func info: IERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_117

Name: TMP_117 Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
concur_3(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4', 'concur_2'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concurBalance_1(uint256) := TMP_117(uint256)
asgn
Source address: u
Finance type key: (0, -1)
[i]Type for concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_1, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 1
Globalname: transferSuccess, contract_name: MasterChef
End popogation
transferSuccess_1(bool) := False(bool)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
XXXX
[i] TMP_118 cleared
Propogating parameters and globals to SSA variables...
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_118(bool) = _amount_1 > concurBalance_1
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_118

Name: TMP_118 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_120 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_3, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 3
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_5, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_120(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', '_amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_120

Name: TMP_120 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_5(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_3(bool) := TMP_120(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
transferSuccess_4(bool) := ϕ(['transferSuccess_2', 'transferSuccess_3'])
Phi

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


END==================================
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
Ssa_name: transferSuccess_4, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 4
Globalname: transferSuccess, contract_name: MasterChef
End popogation
TMP_121(None) = SOLIDITY_CALL require(bool,string)(transferSuccess_4,safeConcurTransfer: transfer failed)
[i]Type for TMP_121

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i] TMP_119 cleared
[i] transferSuccess cleared
Propogating parameters and globals to SSA variables...
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _to_1, name: _to

Name: _to Function: safeConcurTransfer
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: concurBalance_1, name: concurBalance

Name: concurBalance Function: safeConcurTransfer
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Ssa_name: concur_3, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: transferSuccess_2, name: transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: transferSuccess, Num: 2
Globalname: transferSuccess, contract_name: MasterChef
End popogation
Ssa_name: concur_4, name: concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
TMP_119(bool) = HIGH_LEVEL_CALL, dest:concur_3(IERC20), function:transfer, arguments:['_to_1', 'concurBalance_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_119

Name: TMP_119 Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
concur_4(IERC20) := ϕ(['concur_1', 'concur_5', 'concur_3', 'concur_4'])
Phi
[i]Type for concur

Name: concur Function: safeConcurTransfer
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferSuccess_2(bool) := TMP_119(bool)
asgn
Finance type key: (-1, -1)
[i]Type for transferSuccess

Name: transferSuccess Function: safeConcurTransfer
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
user_3 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_2 (-> ['userInfo'])", "user_1 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: _concurShareMultiplier_18, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _concurShareMultiplier_18, name: _concurShareMultiplier

Name: _concurShareMultiplier Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: pool_1 (-> ['poolInfo']), name: pool

Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Ssa_name: user_3 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 3 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_13, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_4 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
End popogation
Ssa_name: user_4 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 4 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_13, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_82(uint128) -> user_3 (-> ['userInfo']).rewardDebt
MEMBER
OUT KEY: withdraw_user_rewardDebt
OUT KEY: withdraw_user_rewardDebt
FTT: None
No field found
[i]Type for REF_82

Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_84(uint128) -> user_3 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_84

Name: REF_84 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_84 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_85(uint256) -> pool_1 (-> ['poolInfo']).accConcurPerShare
MEMBER
OUT KEY: withdraw_pool_accConcurPerShare
OUT KEY: withdraw_pool_accConcurPerShare
FTT: None
No field found
[i]Type for REF_85

Name: REF_85 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: pool_1 (-> ['poolInfo']), Field: accConcurPerShare
#################
Member: 
Name: pool Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: accConcurPerShare
Finance Type: undef
Fieldf: 
Name: accConcurPerShare Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_85 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: accConcurPerShare Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(uint128) = REF_84 (c)* REF_85
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_110

Name: TMP_110 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint128) = TMP_110 (c)/ _concurShareMultiplier_18
A: u B: u
lnorm: u rnorm: u
A: u B: u
lnorm: u rnorm: u
[i]Type for TMP_111

Name: TMP_111 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_112(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_111'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_111
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_111
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_112

Name: TMP_112 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_4 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_3 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_82 (->user_4 (-> ['userInfo'])) := TMP_112(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_82

Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_3 (-> ['userInfo']), Field: rewardDebt
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: rewardDebt Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_82 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: rewardDebt Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_13(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_4 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
Propogating parameters and globals to SSA variables...
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_1 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_12, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Ssa_name: user_2 (-> ['userInfo']), name: user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Name: user, Num: 2 (-> ['userInfo'])
Globalname: user, contract_name: MasterChef
Ssa_name: userInfo_12, name: userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
REF_79(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_79

Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
REF_81(uint128) -> user_1 (-> ['userInfo']).amount
MEMBER
OUT KEY: withdraw_user_amount
OUT KEY: withdraw_user_amount
FTT: None
No field found
[i]Type for REF_81

Name: REF_81 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_81 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_108(uint128) = REF_81 (c)- _amount_1
A: u B: u
lnorm: u rnorm: u
Source address: u
[i]Type for TMP_108

Name: TMP_108 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_109(uint128) = LIBRARY_CALL, dest:SafeCast, function:SafeCast.toUint128(uint256), arguments:['TMP_108'] 
Found: None
Written func info: SafeCast, toUint128
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_108
hers norm: u
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
TMP_108
hers norm: u
([-1], [-1, -1], 'u', "'u'", 'u', -1)
[i]Type for TMP_109

Name: TMP_109 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['userInfo'])(MasterChef.UserInfo) := ϕ(["user_1 (-> ['userInfo'])"])
Phi

Name: user Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef


END==================================
[i]Type for user

Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
XXXX
REF_79 (->user_2 (-> ['userInfo'])) := TMP_109(uint128)
asgn
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_79

Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Root: user_1 (-> ['userInfo']), Field: amount
#################
Member: 
Name: user Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: amount, rewardDebt
Finance Type: undef
Fieldf: 
Name: amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_79 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: amount Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
userInfo_12(mapping(uint256 => mapping(address => MasterChef.UserInfo))) := ϕ(["user_2 (-> ['userInfo'])"])
Phi
[i]Type for userInfo

Name: userInfo Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Copied userInfo
Source address: u
Propogating parameters and globals to SSA variables...
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Ssa_name: _pid_1, name: _pid

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: _pid_1 Function: withdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copied ftype
Name: _pid, Num: 1
Globalname: _pid, contract_name: MasterChef
Ssa_name: _recipient_1, name: _recipient

Name: _recipient_1 Function: withdraw
Num: 
Den: 
Address: -994
Norm: 0
LF: _recipient
Value: u
Fields: 
Finance Type: undef
Ssa_name: _amount_1, name: _amount

Name: _amount_1 Function: withdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Reading Function: safeConcurTransfer
Function safeConcurTransfer not marked
Reading Function: slitherConstructorVariables
Function slitherConstructorVariables not marked
Address: 1, Label: global:_owner
Address: -999, Label: addDepositor:_depositor
Address: -998, Label: removeDepositor:_depositor
Address: -997, Label: add:_token
Address: -996, Label: pendingConcur:_user
Address: -995, Label: deposit:_recipient
Address: -994, Label: withdraw:_recipient
Address: 2, Label: pendingConcur:TMP_42
Address: 2, Label: global:this
Address: 3, Label: pendingConcur:REF_18
Address: 4, Label: updatePool:REF_34
Address: 5, Label: safeConcurTransfer:concur
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Head Addr: -999
    Norm: u
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: u
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 6
    Set: {-997}
    Fin: NULL
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Head Addr: 2
    Norm: u
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: u
    Set: {3}
    Fin: NULL
Head Addr: 4
    Norm: u
    Set: {4}
    Fin: NULL
Head Addr: 5
    Norm: u
    Set: {5}
    Fin: NULL
Function count: 34
Time elapsed: 0.5436253547668457
Executing Group 24
[*] Tested 0 warnings for Concur Finance
Group 24 complete
Elapsed time: 11.430237728 seconds
Testing complete
