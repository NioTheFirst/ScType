Switched global version to 0.6.12
Checking CDP
Checking FixedPointMath
Checking IDetailedERC20
Checking Math
Checking SafeMath
Checking IERC20
Checking SafeERC20
Checking Address



update
Finding type for _self(CDP.Data ... )
update
_self
totalDeposited
OUT KEY: update__self_totalDeposited
update
_self
totalDebt
OUT KEY: update__self_totalDebt
update
_self
totalCredit
OUT KEY: update__self_totalCredit
update
_self
lastDeposit
OUT KEY: update__self_lastDeposit
update
_self
lastAccumulatedYieldWeight
OUT KEY: update__self_lastAccumulatedYieldWeight
Finding type for _ctx(CDP.Context ... )
update
_ctx
collateralizationLimit
OUT KEY: update__ctx_collateralizationLimit
update
_ctx
accumulatedYieldWeight
OUT KEY: update__ctx_accumulatedYieldWeight
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


TMP_0(uint256) = LIBRARY_CALL, dest:CDP, function:CDP.getEarnedYield(CDP.Data,CDP.Context), arguments:['_self_1 (-> [])', '_ctx_1 (-> [])'] 
_earnedYield_1(uint256) := TMP_0(uint256)
REF_1(uint256) -> _self_1 (-> []).totalDebt
TMP_1(bool) = _earnedYield_1 > REF_1
CONDITION TMP_1
REF_2(uint256) -> _self_1 (-> []).totalDebt
_currentTotalDebt_1(uint256) := REF_2(uint256)
REF_6(uint256) -> _self_1 (-> []).totalDebt
REF_7(uint256) -> _self_1 (-> []).totalDebt
TMP_3(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_7', '_earnedYield_1'] 
_self_2 (-> [])(CDP.Data) := ϕ(['_self_1 (-> [])'])
REF_6 (->_self_2 (-> [])) := TMP_3(uint256)
REF_3(uint256) -> _self_1 (-> []).totalDebt
_self_3 (-> [])(CDP.Data) := ϕ(['_self_1 (-> [])'])
REF_3 (->_self_3 (-> [])) := 0(uint256)
_self_5 (-> [])(CDP.Data) := ϕ(['_self_2 (-> [])', '_self_4 (-> [])'])
REF_9(FixedPointMath.FixedDecimal) -> _self_5 (-> []).lastAccumulatedYieldWeight
REF_10(FixedPointMath.FixedDecimal) -> _ctx_1 (-> []).accumulatedYieldWeight
_self_6 (-> [])(CDP.Data) := ϕ(['_self_5 (-> [])'])
REF_9 (->_self_6 (-> [])) := REF_10(FixedPointMath.FixedDecimal)
REF_4(uint256) -> _self_3 (-> []).totalCredit
TMP_2(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_earnedYield_1', '_currentTotalDebt_1'] 
_self_4 (-> [])(CDP.Data) := ϕ(['_self_3 (-> [])'])
REF_4 (->_self_4 (-> [])) := TMP_2(uint256)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _self, Num: 1 (-> [])
Globalname: _self
Name: _ctx, Num: 1 (-> [])
Globalname: _ctx
Name: _earnedYield, Num: 1
Globalname: _earnedYield
End popogation
TMP_0(uint256) = LIBRARY_CALL, dest:CDP, function:CDP.getEarnedYield(CDP.Data,CDP.Context), arguments:['_self_1 (-> [])', '_ctx_1 (-> [])'] 
Written func info: CDP, getEarnedYield
Retvar: ('c', ['global:token'], ['-1'], 0, "'u'", None)
{}
Add to address_to_label {'global:global:token': 1}
([1], [-1], 0, "'u'", None, -1)
[i]Type for TMP_0

Name: TMP_0 Function: update
Num: 1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_earnedYield_1(uint256) := TMP_0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _earnedYield

Name: _earnedYield Function: update
Num: 1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _self, Num: 1 (-> [])
Globalname: _self
End popogation
REF_1(uint256) -> _self_1 (-> []).totalDebt
MEMBER
init
end
init
end
No field found
[i]Type for REF_1

Name: _self.totalDebt Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
TMP_1(bool) = _earnedYield_1 > REF_1
init
end
init
end
lnorm: 0 rnorm: u
[i]Type for TMP_1

Name: TMP_1 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _self, Num: 1 (-> [])
Globalname: _self
Name: _currentTotalDebt, Num: 1
Globalname: _currentTotalDebt
End popogation
REF_2(uint256) -> _self_1 (-> []).totalDebt
MEMBER
init
end
init
end
[i]Type for REF_2

Name: _self.totalDebt Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
_currentTotalDebt_1(uint256) := REF_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _currentTotalDebt

Name: _currentTotalDebt Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _self, Num: 1 (-> [])
Globalname: _self
Name: _self, Num: 2 (-> [])
Globalname: _self
End popogation
Name: _self, Num: 2 (-> [])
Globalname: _self

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_6(uint256) -> _self_1 (-> []).totalDebt
MEMBER
init
end
init
end
[i]Type for REF_6

Name: _self.totalDebt Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
REF_7(uint256) -> _self_1 (-> []).totalDebt
MEMBER
init
end
init
end
[i]Type for REF_7

Name: _self.totalDebt Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
TMP_3(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_7', '_earnedYield_1'] 
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_3

Name: TMP_3 Function: update
Num: 1
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_self_2 (-> [])(CDP.Data) := ϕ(['_self_1 (-> [])'])
Phi
[i]Type for _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalDebt
Finance Type: undef
XXXX
REF_6 (->_self_2 (-> [])) := TMP_3(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_6

Name: REF_6 Function: update
Num: 1
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
Propogating parameters and globals to SSA variables...
Name: _self, Num: 3 (-> [])
Globalname: _self
End popogation
Name: _self, Num: 3 (-> [])
Globalname: _self

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_3(uint256) -> _self_1 (-> []).totalDebt
MEMBER
init
end
init
end
[i]Type for REF_3

Name: _self.totalDebt Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
_self_3 (-> [])(CDP.Data) := ϕ(['_self_1 (-> [])'])
Phi
[i]Type for _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalDebt
Finance Type: undef
XXXX
REF_3 (->_self_3 (-> [])) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_3

Name: REF_3 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: _self, Num: 5 (-> [])
Globalname: _self

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_self_5 (-> [])(CDP.Data) := ϕ(['_self_2 (-> [])', '_self_4 (-> [])'])
Phi
[i]Type for _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _ctx, Num: 1 (-> [])
Globalname: _ctx
Name: _self, Num: 6 (-> [])
Globalname: _self
End popogation
Name: _self, Num: 6 (-> [])
Globalname: _self

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_9(FixedPointMath.FixedDecimal) -> _self_5 (-> []).lastAccumulatedYieldWeight
MEMBER
init
end
init
end
OUT KEY: update__self_lastAccumulatedYieldWeight
OUT KEY: update__lastAccumulatedYieldWeight
No field found
[i]Type for REF_9

Name: _self.lastAccumulatedYieldWeight Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_5 (-> []), Field: lastAccumulatedYieldWeight
init
end
Finance type key: (-1, -1)
XXXX
REF_10(FixedPointMath.FixedDecimal) -> _ctx_1 (-> []).accumulatedYieldWeight
MEMBER
init
end
init
end
No field found
[i]Type for REF_10

Name: _ctx.accumulatedYieldWeight Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _ctx_1 (-> []), Field: accumulatedYieldWeight
init
end
Finance type key: (-1, -1)
XXXX
_self_6 (-> [])(CDP.Data) := ϕ(['_self_5 (-> [])'])
Phi
[i]Type for _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastAccumulatedYieldWeight
Finance Type: undef
XXXX
REF_9 (->_self_6 (-> [])) := REF_10(FixedPointMath.FixedDecimal)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_9

Name: REF_9 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_5 (-> []), Field: lastAccumulatedYieldWeight
init
end
Finance type key: (-1, -1)
XXXX
Propogating parameters and globals to SSA variables...
Name: _self, Num: 4 (-> [])
Globalname: _self
End popogation
Name: _self, Num: 4 (-> [])
Globalname: _self

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_4(uint256) -> _self_3 (-> []).totalCredit
MEMBER
init
end
init
end
OUT KEY: update__self_totalCredit
OUT KEY: update__totalCredit
No field found
[i]Type for REF_4

Name: _self.totalCredit Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_3 (-> []), Field: totalCredit
init
end
Finance type key: (-1, -1)
XXXX
TMP_2(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_earnedYield_1', '_currentTotalDebt_1'] 
init
end
init
end
lnorm: 0 rnorm: u
init
end
[i]Type for TMP_2

Name: TMP_2 Function: update
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_self_4 (-> [])(CDP.Data) := ϕ(['_self_3 (-> [])'])
Phi
[i]Type for _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalCredit
Finance Type: undef
XXXX
REF_4 (->_self_4 (-> [])) := TMP_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_4

Name: REF_4 Function: update
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_3 (-> []), Field: totalCredit
init
end
Finance type key: (-1, -1)
XXXX


TMP_0(uint256) = LIBRARY_CALL, dest:CDP, function:CDP.getEarnedYield(CDP.Data,CDP.Context), arguments:['_self_1 (-> [])', '_ctx_1 (-> [])'] 
_earnedYield_1(uint256) := TMP_0(uint256)
REF_1(uint256) -> _self_1 (-> []).totalDebt
TMP_1(bool) = _earnedYield_1 > REF_1
CONDITION TMP_1
REF_2(uint256) -> _self_1 (-> []).totalDebt
_currentTotalDebt_1(uint256) := REF_2(uint256)
REF_6(uint256) -> _self_1 (-> []).totalDebt
REF_7(uint256) -> _self_1 (-> []).totalDebt
TMP_3(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_7', '_earnedYield_1'] 
_self_2 (-> [])(CDP.Data) := ϕ(['_self_1 (-> [])'])
REF_6 (->_self_2 (-> [])) := TMP_3(uint256)
REF_3(uint256) -> _self_1 (-> []).totalDebt
_self_3 (-> [])(CDP.Data) := ϕ(['_self_1 (-> [])'])
REF_3 (->_self_3 (-> [])) := 0(uint256)
_self_5 (-> [])(CDP.Data) := ϕ(['_self_2 (-> [])', '_self_4 (-> [])'])
REF_9(FixedPointMath.FixedDecimal) -> _self_5 (-> []).lastAccumulatedYieldWeight
REF_10(FixedPointMath.FixedDecimal) -> _ctx_1 (-> []).accumulatedYieldWeight
_self_6 (-> [])(CDP.Data) := ϕ(['_self_5 (-> [])'])
REF_9 (->_self_6 (-> [])) := REF_10(FixedPointMath.FixedDecimal)
REF_4(uint256) -> _self_3 (-> []).totalCredit
TMP_2(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_earnedYield_1', '_currentTotalDebt_1'] 
_self_4 (-> [])(CDP.Data) := ϕ(['_self_3 (-> [])'])
REF_4 (->_self_4 (-> [])) := TMP_2(uint256)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _self, Num: 1 (-> [])
Globalname: _self
Name: _ctx, Num: 1 (-> [])
Globalname: _ctx
Name: _earnedYield, Num: 1
Globalname: _earnedYield
End popogation
TMP_0(uint256) = LIBRARY_CALL, dest:CDP, function:CDP.getEarnedYield(CDP.Data,CDP.Context), arguments:['_self_1 (-> [])', '_ctx_1 (-> [])'] 
Written func info: CDP, getEarnedYield
Retvar: ('c', ['global:token'], ['-1'], 0, "'u'", None)
{'global:global:token': 1}
([1], [-1], 0, "'u'", None, -1)
[i]Type for TMP_0

Name: TMP_0 Function: update
Num: 1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
_earnedYield_1(uint256) := TMP_0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _earnedYield

Name: _earnedYield Function: update
Num: 1
Den: -1
Address: None
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _self, Num: 1 (-> [])
Globalname: _self
End popogation
REF_1(uint256) -> _self_1 (-> []).totalDebt
MEMBER
init
end
init
end
init
end
[i]Type for REF_1

Name: _self.totalDebt Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
TMP_1(bool) = _earnedYield_1 > REF_1
init
end
init
end
lnorm: 0 rnorm: u
[i]Type for TMP_1

Name: TMP_1 Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _self, Num: 1 (-> [])
Globalname: _self
Name: _currentTotalDebt, Num: 1
Globalname: _currentTotalDebt
End popogation
REF_2(uint256) -> _self_1 (-> []).totalDebt
MEMBER
init
end
init
end
init
end
[i]Type for REF_2

Name: _self.totalDebt Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
_currentTotalDebt_1(uint256) := REF_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for _currentTotalDebt

Name: _currentTotalDebt Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _self, Num: 1 (-> [])
Globalname: _self
Name: _self, Num: 2 (-> [])
Globalname: _self
End popogation
Name: _self, Num: 2 (-> [])
Globalname: _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalDebt
Finance Type: undef
Phid
REF_6(uint256) -> _self_1 (-> []).totalDebt
MEMBER
init
end
init
end
init
end
[i]Type for REF_6

Name: _self.totalDebt Function: update
Num: 1
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
REF_7(uint256) -> _self_1 (-> []).totalDebt
MEMBER
init
end
init
end
init
end
[i]Type for REF_7

Name: _self.totalDebt Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
TMP_3(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_7', '_earnedYield_1'] 
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_3

Name: TMP_3 Function: update
Num: 1
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_self_2 (-> [])(CDP.Data) := ϕ(['_self_1 (-> [])'])
Phi
[i]Type for _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalDebt
Finance Type: undef
XXXX
REF_6 (->_self_2 (-> [])) := TMP_3(uint256)
asgn
init
end
1
-1
Finance type key: (-1, -1)
[i]Type for REF_6

Name: REF_6 Function: update
Num: 1
Den: -1
Address: None
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
Propogating parameters and globals to SSA variables...
Name: _self, Num: 3 (-> [])
Globalname: _self
End popogation
Name: _self, Num: 3 (-> [])
Globalname: _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalDebt
Finance Type: undef
Phid
REF_3(uint256) -> _self_1 (-> []).totalDebt
MEMBER
init
end
init
end
init
end
[i]Type for REF_3

Name: _self.totalDebt Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
_self_3 (-> [])(CDP.Data) := ϕ(['_self_1 (-> [])'])
Phi
[i]Type for _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalDebt
Finance Type: undef
XXXX
REF_3 (->_self_3 (-> [])) := 0(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_3

Name: REF_3 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: _self_1 (-> []), Field: totalDebt
init
end
Finance type key: (-1, -1)
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: _self, Num: 5 (-> [])
Globalname: _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_self_5 (-> [])(CDP.Data) := ϕ(['_self_2 (-> [])', '_self_4 (-> [])'])
Phi
[i]Type for _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _ctx, Num: 1 (-> [])
Globalname: _ctx
Name: _self, Num: 6 (-> [])
Globalname: _self
End popogation
Name: _self, Num: 6 (-> [])
Globalname: _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastAccumulatedYieldWeight
Finance Type: undef
Phid
REF_9(FixedPointMath.FixedDecimal) -> _self_5 (-> []).lastAccumulatedYieldWeight
MEMBER
init
end
init
end
[i]Type for REF_9

Name: _self.lastAccumulatedYieldWeight Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_5 (-> []), Field: lastAccumulatedYieldWeight
init
end
Finance type key: (-1, -1)
XXXX
REF_10(FixedPointMath.FixedDecimal) -> _ctx_1 (-> []).accumulatedYieldWeight
MEMBER
init
end
init
end
init
end
[i]Type for REF_10

Name: _ctx.accumulatedYieldWeight Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _ctx_1 (-> []), Field: accumulatedYieldWeight
init
end
Finance type key: (-1, -1)
XXXX
_self_6 (-> [])(CDP.Data) := ϕ(['_self_5 (-> [])'])
Phi
[i]Type for _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lastAccumulatedYieldWeight
Finance Type: undef
XXXX
REF_9 (->_self_6 (-> [])) := REF_10(FixedPointMath.FixedDecimal)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_9

Name: REF_9 Function: update
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_5 (-> []), Field: lastAccumulatedYieldWeight
init
end
Finance type key: (-1, -1)
XXXX
Propogating parameters and globals to SSA variables...
Name: _self, Num: 4 (-> [])
Globalname: _self
End popogation
Name: _self, Num: 4 (-> [])
Globalname: _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalCredit
Finance Type: undef
Phid
REF_4(uint256) -> _self_3 (-> []).totalCredit
MEMBER
init
end
init
end
[i]Type for REF_4

Name: _self.totalCredit Function: update
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_3 (-> []), Field: totalCredit
init
end
Finance type key: (-1, -1)
XXXX
TMP_2(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_earnedYield_1', '_currentTotalDebt_1'] 
init
end
init
end
lnorm: 0 rnorm: u
init
end
[i]Type for TMP_2

Name: TMP_2 Function: update
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_self_4 (-> [])(CDP.Data) := ϕ(['_self_3 (-> [])'])
Phi
[i]Type for _self

Name: _self Function: update
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: totalCredit
Finance Type: undef
XXXX
REF_4 (->_self_4 (-> [])) := TMP_2(uint256)
asgn
init
end
Finance type key: (-1, -1)
[i]Type for REF_4

Name: REF_4 Function: update
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Root: _self_3 (-> []), Field: totalCredit
init
end
Finance type key: (-1, -1)
XXXX



checkHealth



isHealthy



getUpdatedTotalDebt



getUpdatedTotalCredit



getEarnedYield



getCollateralizationRatio
Address: 1, Label: global:global:token
Head Addr: 1
    Norm: *
    Set: {1}
    Fin: NULL
Function count: 1
Executing Group 16
[*] Tested 0 warnings for yAxis p2
Group 16 complete
Testing complete
