Switched global version to 0.6.12
Checking BoringERC20
Checking BoringMath
Checking BoringMath128
Checking BoringMath64
Checking BoringMath32
Checking BoringOwnableData
Checking BoringOwnable
Checking Domain
Checking ERC20Data
Checking ERC20
Checking ERC20WithSupply
Checking IERC20
Checking IsYETIRouter
Checking IYETIToken
Checking sYETIToken
Add to address_to_label {'global:owner': 1}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995, 'increaseAllowance:spender': -994}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995, 'increaseAllowance:spender': -994, 'permit:owner_': -993}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995, 'increaseAllowance:spender': -994, 'permit:owner_': -993, 'permit:spender': -992}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995, 'increaseAllowance:spender': -994, 'permit:owner_': -993, 'permit:spender': -992, 'burn:to': -991}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995, 'increaseAllowance:spender': -994, 'permit:owner_': -993, 'permit:spender': -992, 'burn:to': -991, 'burnFrom:from': -990}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995, 'increaseAllowance:spender': -994, 'permit:owner_': -993, 'permit:spender': -992, 'burn:to': -991, 'burnFrom:from': -990, 'burnFrom:to': -989}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995, 'increaseAllowance:spender': -994, 'permit:owner_': -993, 'permit:spender': -992, 'burn:to': -991, 'burnFrom:from': -990, 'burnFrom:to': -989, 'buyBack:_routerAddress': -988}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995, 'increaseAllowance:spender': -994, 'permit:owner_': -993, 'permit:spender': -992, 'burn:to': -991, 'burnFrom:from': -990, 'burnFrom:to': -989, 'buyBack:_routerAddress': -988, 'publicBuyBack:_routerAddress': -987}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995, 'increaseAllowance:spender': -994, 'permit:owner_': -993, 'permit:spender': -992, 'burn:to': -991, 'burnFrom:from': -990, 'burnFrom:to': -989, 'buyBack:_routerAddress': -988, 'publicBuyBack:_routerAddress': -987, 'addValidRouter:_routerAddress': -986}
Add to address_to_label {'global:owner': 1, 'global:pendingOwner': 2, 'balanceOf:user': -999, 'transfer:to': -998, 'transferFrom:from': -997, 'transferFrom:to': -996, 'approve:spender': -995, 'increaseAllowance:spender': -994, 'permit:owner_': -993, 'permit:spender': -992, 'burn:to': -991, 'burnFrom:from': -990, 'burnFrom:to': -989, 'buyBack:_routerAddress': -988, 'publicBuyBack:_routerAddress': -987, 'addValidRouter:_routerAddress': -986, 'removeValidRouter:_routerAddress': -985}
State_var: validRouters
Finding type for validRouters(mapping(address => bool) ... )
querrying!!!
State_var: yusdToken
Finding type for yusdToken(IERC20 ... )
querrying!!!
State_var: LOCK_TIME
Finding type for LOCK_TIME(uint256 ... )
querrying!!!
State_var: effectiveYetiTokenBalance
Finding type for effectiveYetiTokenBalance(uint256 ... )
querrying!!!
State_var: totalSupply
Finding type for totalSupply(uint256 ... )
querrying!!!
State_var: users
Finding type for users(mapping(address => sYETIToken.User) ... )
global
users
balance
OUT KEY: global_users_balance
global
users
lockedUntil
OUT KEY: global_users_lockedUntil
querrying!!!
State_var: yetiToken
Finding type for yetiToken(IYETIToken ... )
querrying!!!
State_var: allowance
Finding type for allowance(mapping(address => mapping(address => uint256)) ... )
querrying!!!
State_var: addressesSet
Finding type for addressesSet(bool ... )
querrying!!!
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
Finding type for EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA(string ... )
querrying!!!
State_var: owner
Finding type for owner(address ... )
prev address? u
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
querrying!!!
State_var: pendingOwner
Finding type for pendingOwner(address ... )
prev address? u
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
querrying!!!
State_var: lastRebaseTime
Finding type for lastRebaseTime(uint256 ... )
querrying!!!
State_var: transferRatio
Finding type for transferRatio(uint256 ... )
querrying!!!
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
Finding type for DOMAIN_SEPARATOR_SIGNATURE_HASH(bytes32 ... )
querrying!!!
State_var: lastBuybackPrice
Finding type for lastBuybackPrice(uint256 ... )
querrying!!!
State_var: lastBuybackTime
Finding type for lastBuybackTime(uint256 ... )
querrying!!!
State_var: DOMAIN_SEPARATOR_CHAIN_ID
Finding type for DOMAIN_SEPARATOR_CHAIN_ID(uint256 ... )
querrying!!!
State_var: _DOMAIN_SEPARATOR
Finding type for _DOMAIN_SEPARATOR(bytes32 ... )
querrying!!!
State_var: PERMIT_SIGNATURE_HASH
Finding type for PERMIT_SIGNATURE_HASH(bytes32 ... )
querrying!!!
State_var: nonces
Finding type for nonces(mapping(address => uint256) ... )
querrying!!!



balanceOf
Finding type for user(address ... )
prev address? u
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: user
    fields: []
    fintype: -1


users_1(mapping(address => sYETIToken.User)) := ϕ(['users_8', 'users_1', 'users_6', 'users_0', 'users_2'])
REF_74(sYETIToken.User) -> users_1[user_1]
REF_75(uint128) -> REF_74.balance
RETURN REF_75


Propogating parameters and globals to SSA variables...
End popogation
Name: users, Num: 1
Globalname: users
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
users_1(mapping(address => sYETIToken.User)) := ϕ(['users_8', 'users_1', 'users_6', 'users_0', 'users_2'])
Phi
[i]Type for users

Name: users Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_74(sYETIToken.User) -> users_1[user_1]
INDEX
[i]Type for REF_74

Name: REF_74 Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_75(uint128) -> REF_74.balance
MEMBER
init
end
init
end
OUT KEY: balanceOf_REF_74_balance
OUT KEY: balanceOf_REF_balance
FTT: None
No field found
[i]Type for REF_75

Name: REF_74.balance Function: balanceOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_74, Field: balance
#################
Member: 
Name: users Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_74.balance Function: balanceOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
RETURN REF_75
RETURN
init
end

Name: REF_74.balance Function: balanceOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


users_1(mapping(address => sYETIToken.User)) := ϕ(['users_8', 'users_1', 'users_6', 'users_0', 'users_2'])
REF_74(sYETIToken.User) -> users_1[user_1]
REF_75(uint128) -> REF_74.balance
RETURN REF_75


Propogating parameters and globals to SSA variables...
End popogation

Name: users Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Phid
users_1(mapping(address => sYETIToken.User)) := ϕ(['users_8', 'users_1', 'users_6', 'users_0', 'users_2'])
Phi
[i]Type for users

Name: users Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_74(sYETIToken.User) -> users_1[user_1]
INDEX
[i]Type for REF_74

Name: REF_74 Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_75(uint128) -> REF_74.balance
MEMBER
init
end
init
end
OUT KEY: balanceOf_REF_74_balance
OUT KEY: balanceOf_REF_balance
FTT: None
No field found
[i]Type for REF_75

Name: REF_74.balance Function: balanceOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: REF_74, Field: balance
#################
Member: 
Name: users Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_74.balance Function: balanceOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: balance Function: balanceOf
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_75
RETURN
init
end

Name: REF_74.balance Function: balanceOf
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



setAddresses
Finding type for _yeti(IYETIToken ... )
Finding type for _yusd(IERC20 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


addressesSet_1(bool) := ϕ(['addressesSet_0', 'addressesSet_3'])
MODIFIER_CALL, BoringOwnable.onlyOwner()()
TMP_254 = ! addressesSet_2 
TMP_255(None) = SOLIDITY_CALL require(bool,string)(TMP_254,addresses already set)
yetiToken_1(IYETIToken) := _yeti_1(IYETIToken)
yusdToken_1(IERC20) := _yusd_1(IERC20)
addressesSet_3(bool) := True(bool)


Propogating parameters and globals to SSA variables...
End popogation
Name: addressesSet, Num: 1
Globalname: addressesSet
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
addressesSet_1(bool) := ϕ(['addressesSet_0', 'addressesSet_3'])
Phi
[i]Type for addressesSet

Name: addressesSet Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
Name: addressesSet, Num: 2
Globalname: addressesSet
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_254 = ! addressesSet_2 
[i]Type for TMP_254

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_255(None) = SOLIDITY_CALL require(bool,string)(TMP_254,addresses already set)
[i]Type for TMP_255

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _yeti, Num: 1
Globalname: _yeti
Name: yetiToken, Num: 1
Globalname: yetiToken
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
yetiToken_1(IYETIToken) := _yeti_1(IYETIToken)
asgn
init
end
_______________

Name: _yeti Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for yetiToken

Name: yetiToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _yusd, Num: 1
Globalname: _yusd
Name: yusdToken, Num: 1
Globalname: yusdToken
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
yusdToken_1(IERC20) := _yusd_1(IERC20)
asgn
init
end
_______________

Name: _yusd Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for yusdToken

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: addressesSet, Num: 3
Globalname: addressesSet
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
addressesSet_3(bool) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for addressesSet

Name: addressesSet Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX


addressesSet_1(bool) := ϕ(['addressesSet_0', 'addressesSet_3'])
MODIFIER_CALL, BoringOwnable.onlyOwner()()
TMP_254 = ! addressesSet_2 
TMP_255(None) = SOLIDITY_CALL require(bool,string)(TMP_254,addresses already set)
yetiToken_1(IYETIToken) := _yeti_1(IYETIToken)
yusdToken_1(IERC20) := _yusd_1(IERC20)
addressesSet_3(bool) := True(bool)


Propogating parameters and globals to SSA variables...
End popogation

Name: addressesSet Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
addressesSet_1(bool) := ϕ(['addressesSet_0', 'addressesSet_3'])
Phi
[i]Type for addressesSet

Name: addressesSet Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
TMP_254 = ! addressesSet_2 
[i]Type for TMP_254

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_255(None) = SOLIDITY_CALL require(bool,string)(TMP_254,addresses already set)
[i]Type for TMP_255

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _yeti, Num: 1
Globalname: _yeti
End popogation
yetiToken_1(IYETIToken) := _yeti_1(IYETIToken)
asgn
init
end
_______________

Name: _yeti Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for yetiToken

Name: yetiToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _yusd, Num: 1
Globalname: _yusd
End popogation
yusdToken_1(IERC20) := _yusd_1(IERC20)
asgn
init
end
_______________

Name: _yusd Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for yusdToken

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
addressesSet_3(bool) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for addressesSet

Name: addressesSet Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



_transfer
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



_useAllowance
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



transfer
Finding type for to(address ... )
prev address? u
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
Finding type for shares(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: to
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


INTERNAL_CALL, sYETIToken._transfer(address,address,uint256)(msg.sender,to_1,shares_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._transfer(address,address,uint256)(msg.sender,to_1,shares_1)
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


INTERNAL_CALL, sYETIToken._transfer(address,address,uint256)(msg.sender,to_1,shares_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._transfer(address,address,uint256)(msg.sender,to_1,shares_1)
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



transferFrom
Finding type for from(address ... )
prev address? u
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Finding type for to(address ... )
prev address? u
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Finding type for shares(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: from
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: to
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


INTERNAL_CALL, sYETIToken._useAllowance(address,uint256)(from_1,shares_1)
INTERNAL_CALL, sYETIToken._transfer(address,address,uint256)(from_1,to_1,shares_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._useAllowance(address,uint256)(from_1,shares_1)
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._transfer(address,address,uint256)(from_1,to_1,shares_1)
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


INTERNAL_CALL, sYETIToken._useAllowance(address,uint256)(from_1,shares_1)
INTERNAL_CALL, sYETIToken._transfer(address,address,uint256)(from_1,to_1,shares_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._useAllowance(address,uint256)(from_1,shares_1)
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._transfer(address,address,uint256)(from_1,to_1,shares_1)
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



approve
Finding type for spender(address ... )
prev address? u
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Finding type for amount(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: spender
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


REF_91(mapping(address => uint256)) -> allowance_2[msg.sender]
REF_92(uint256) -> REF_91[spender_1]
allowance_3(mapping(address => mapping(address => uint256))) := ϕ(['allowance_2'])
REF_92 (->allowance_3) := amount_1(uint256)
Emit Approval(msg.sender,spender_1,amount_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: allowance, Num: 3
Globalname: allowance
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_91(mapping(address => uint256)) -> allowance_2[msg.sender]
INDEX
[i]Type for REF_91

Name: REF_91 Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_92(uint256) -> REF_91[spender_1]
INDEX
[i]Type for REF_92

Name: REF_92 Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
allowance_3(mapping(address => mapping(address => uint256))) := ϕ(['allowance_2'])
Phi
[i]Type for allowance

Name: allowance Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92 (->allowance_3) := amount_1(uint256)
asgn
init
end
_______________

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_92

Name: REF_92 Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


REF_91(mapping(address => uint256)) -> allowance_2[msg.sender]
REF_92(uint256) -> REF_91[spender_1]
allowance_3(mapping(address => mapping(address => uint256))) := ϕ(['allowance_2'])
REF_92 (->allowance_3) := amount_1(uint256)
Emit Approval(msg.sender,spender_1,amount_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation

Name: allowance Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_91(mapping(address => uint256)) -> allowance_2[msg.sender]
INDEX
[i]Type for REF_91

Name: REF_91 Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_92(uint256) -> REF_91[spender_1]
INDEX
[i]Type for REF_92

Name: REF_92 Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
allowance_3(mapping(address => mapping(address => uint256))) := ϕ(['allowance_2'])
Phi
[i]Type for allowance

Name: allowance Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_92 (->allowance_3) := amount_1(uint256)
asgn
init
end
_______________

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_92

Name: REF_92 Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



increaseAllowance
Finding type for spender(address ... )
prev address? u
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Finding type for amount(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: spender
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


allowance_4(mapping(address => mapping(address => uint256))) := ϕ(['allowance_3', 'allowance_0', 'allowance_6', 'allowance_1', 'allowance_2', 'allowance_5'])
REF_93(mapping(address => uint256)) -> allowance_4[msg.sender]
REF_94(uint256) -> REF_93[spender_1]
allowance_5(mapping(address => mapping(address => uint256))) := ϕ(['allowance_4'])
REF_94(-> allowance_5) = REF_94 + amount_1
Emit Approval(msg.sender,spender_1,amount_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Name: allowance, Num: 4
Globalname: allowance
global...

Name: allowance Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
allowance_4(mapping(address => mapping(address => uint256))) := ϕ(['allowance_3', 'allowance_0', 'allowance_6', 'allowance_1', 'allowance_2', 'allowance_5'])
Phi
[i]Type for allowance

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: allowance, Num: 5
Globalname: allowance
global...

Name: allowance Function: approve
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amount, Num: 1
Globalname: amount
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_93(mapping(address => uint256)) -> allowance_4[msg.sender]
INDEX
[i]Type for REF_93

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_94(uint256) -> REF_93[spender_1]
INDEX
[i]Type for REF_94

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
allowance_5(mapping(address => mapping(address => uint256))) := ϕ(['allowance_4'])
Phi
[i]Type for allowance

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_94(-> allowance_5) = REF_94 + amount_1
init
end
init
end
init
end
_______________

Name: REF_94 Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_94

Name: REF_94 Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


allowance_4(mapping(address => mapping(address => uint256))) := ϕ(['allowance_3', 'allowance_0', 'allowance_6', 'allowance_1', 'allowance_2', 'allowance_5'])
REF_93(mapping(address => uint256)) -> allowance_4[msg.sender]
REF_94(uint256) -> REF_93[spender_1]
allowance_5(mapping(address => mapping(address => uint256))) := ϕ(['allowance_4'])
REF_94(-> allowance_5) = REF_94 + amount_1
Emit Approval(msg.sender,spender_1,amount_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
allowance_4(mapping(address => mapping(address => uint256))) := ϕ(['allowance_3', 'allowance_0', 'allowance_6', 'allowance_1', 'allowance_2', 'allowance_5'])
Phi
[i]Type for allowance

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_93(mapping(address => uint256)) -> allowance_4[msg.sender]
INDEX
[i]Type for REF_93

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_94(uint256) -> REF_93[spender_1]
INDEX
[i]Type for REF_94

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
allowance_5(mapping(address => mapping(address => uint256))) := ϕ(['allowance_4'])
Phi
[i]Type for allowance

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_94(-> allowance_5) = REF_94 + amount_1
init
end
init
end
init
end
_______________

Name: REF_94 Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_94

Name: REF_94 Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



DOMAIN_SEPARATOR


TMP_283(bytes32) = INTERNAL_CALL, Domain._domainSeparator()()
RETURN TMP_283


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_283(bytes32) = INTERNAL_CALL, Domain._domainSeparator()()
[i]Type for TMP_283

Name: TMP_283 Function: DOMAIN_SEPARATOR
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_283
RETURN
init
end

Name: TMP_283 Function: DOMAIN_SEPARATOR
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


TMP_283(bytes32) = INTERNAL_CALL, Domain._domainSeparator()()
RETURN TMP_283


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_283(bytes32) = INTERNAL_CALL, Domain._domainSeparator()()
[i]Type for TMP_283

Name: TMP_283 Function: DOMAIN_SEPARATOR
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_283
RETURN
init
end

Name: TMP_283 Function: DOMAIN_SEPARATOR
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



permit
Finding type for owner_(address ... )
prev address? u
Changed here
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Finding type for spender(address ... )
prev address? u
Head Addr: -992
    Norm: 0
    Set: {-992}
    Fin: NULL
Finding type for value(uint256 ... )
Finding type for deadline(uint256 ... )
Finding type for v(uint8 ... )
Finding type for r(bytes32 ... )
Finding type for s(bytes32 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: owner_
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: spender
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


nonces_1(mapping(address => uint256)) := ϕ(['nonces_3', 'nonces_0'])
PERMIT_SIGNATURE_HASH_1(bytes32) := ϕ(['PERMIT_SIGNATURE_HASH_0', 'PERMIT_SIGNATURE_HASH_2'])
TMP_284 = CONVERT 0 to address
TMP_285(bool) = owner__1 != TMP_284
TMP_286(None) = SOLIDITY_CALL require(bool,string)(TMP_285,Zero owner)
TMP_287(bool) = block.timestamp < deadline_1
TMP_288(None) = SOLIDITY_CALL require(bool,string)(TMP_287,Expired)
REF_96(uint256) -> nonces_1[owner__1]
TMP_289(uint256) := REF_96(uint256)
nonces_2(mapping(address => uint256)) := ϕ(['nonces_1'])
REF_96(-> nonces_2) = REF_96 + 1
TMP_290(bytes) = SOLIDITY_CALL abi.encode()(PERMIT_SIGNATURE_HASH_1,owner__1,spender_1,value_1,TMP_289,deadline_1)
TMP_291(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_290)
TMP_292(bytes32) = INTERNAL_CALL, Domain._getDigest(bytes32)(TMP_291)
TMP_293(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_292,v_1,r_1,s_1)
TMP_294(bool) = TMP_293 == owner__1
TMP_295(None) = SOLIDITY_CALL require(bool,string)(TMP_294,Invalid Sig)
REF_97(mapping(address => uint256)) -> allowance_5[owner__1]
REF_98(uint256) -> REF_97[spender_1]
allowance_6(mapping(address => mapping(address => uint256))) := ϕ(['allowance_5'])
REF_98 (->allowance_6) := value_1(uint256)
Emit Approval(owner__1,spender_1,value_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: nonces, Num: 1
Globalname: nonces
global...

Name: PIC_21 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: PERMIT_SIGNATURE_HASH, Num: 1
Globalname: PERMIT_SIGNATURE_HASH
global...

Name: PIC_20 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
nonces_1(mapping(address => uint256)) := ϕ(['nonces_3', 'nonces_0'])
Phi
[i]Type for nonces

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PERMIT_SIGNATURE_HASH_1(bytes32) := ϕ(['PERMIT_SIGNATURE_HASH_0', 'PERMIT_SIGNATURE_HASH_2'])
Phi
[i]Type for PERMIT_SIGNATURE_HASH

Name: PERMIT_SIGNATURE_HASH Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_284 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_284

Name: TMP_284 Function: permit
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_285(bool) = owner__1 != TMP_284
[i]Type for TMP_285

Name: TMP_285 Function: permit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_286(None) = SOLIDITY_CALL require(bool,string)(TMP_285,Zero owner)
[i]Type for TMP_286

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: deadline, Num: 1
Globalname: deadline
End popogation
TMP_287(bool) = block.timestamp < deadline_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: PIC_23 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: PIC_23 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_287

Name: TMP_287 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_288(None) = SOLIDITY_CALL require(bool,string)(TMP_287,Expired)
[i]Type for TMP_288

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: value, Num: 1
Globalname: value
Name: v, Num: 1
Globalname: v
Name: nonces, Num: 2
Globalname: nonces
global...

Name: PIC_21 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: s, Num: 1
Globalname: s
Name: r, Num: 1
Globalname: r
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_96(uint256) -> nonces_1[owner__1]
INDEX
[i]Type for REF_96

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_289(uint256) := REF_96(uint256)
asgn
init
end
_______________

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for TMP_289

Name: TMP_289 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nonces_2(mapping(address => uint256)) := ϕ(['nonces_1'])
Phi
[i]Type for nonces

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_96(-> nonces_2) = REF_96 + 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_96

Name: REF_96 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_290(bytes) = SOLIDITY_CALL abi.encode()(PERMIT_SIGNATURE_HASH_1,owner__1,spender_1,value_1,TMP_289,deadline_1)
[i]Type for TMP_290

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_291(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_290)
[i]Type for TMP_291

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_292(bytes32) = INTERNAL_CALL, Domain._getDigest(bytes32)(TMP_291)
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: dataHash Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: dataHash, Num: 1
Globalname: dataHash

Name: dataHash_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, Num: 1
Globalname: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
global...

Name: PIC_10 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
dataHash_1(bytes32) := ϕ(['TMP_291'])
Phi
[i]Type for dataHash

Name: dataHash Function: _getDigest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA_1(string) := ϕ(['EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA_0', 'EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA_2'])
Phi
[i]Type for EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA

Name: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA Function: _getDigest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, Num: 2
Globalname: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
global...

Name: PIC_10 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: dataHash, Num: 1
Globalname: dataHash
Name: digest, Num: 1
Globalname: digest
End popogation
TMP_251(bytes32) = INTERNAL_CALL, Domain._domainSeparator()()
Propogating parameters and globals to SSA variables...
End popogation
Name: _DOMAIN_SEPARATOR, Num: 2
Globalname: _DOMAIN_SEPARATOR
global...

Name: PIC_19 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: DOMAIN_SEPARATOR_CHAIN_ID, Num: 4
Globalname: DOMAIN_SEPARATOR_CHAIN_ID
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_DOMAIN_SEPARATOR_2(bytes32) := ϕ(['_DOMAIN_SEPARATOR_1', '_DOMAIN_SEPARATOR_0'])
Phi
[i]Type for _DOMAIN_SEPARATOR

Name: _DOMAIN_SEPARATOR Function: _domainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
DOMAIN_SEPARATOR_CHAIN_ID_4(uint256) := ϕ(['DOMAIN_SEPARATOR_CHAIN_ID_3', 'DOMAIN_SEPARATOR_CHAIN_ID_0'])
Phi
[i]Type for DOMAIN_SEPARATOR_CHAIN_ID

Name: DOMAIN_SEPARATOR_CHAIN_ID Function: _domainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: chainId, Num: 1
Globalname: chainId
End popogation
TMP_248(uint256) = SOLIDITY_CALL chainid()()
[i]Type for TMP_248

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
chainId_1(uint256) := TMP_248(uint256)
asgn
init
end
_______________

Name: TMP_248 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for chainId

Name: chainId Function: _domainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: chainId, Num: 1
Globalname: chainId
End popogation
TMP_249(bool) = chainId_1 == DOMAIN_SEPARATOR_CHAIN_ID_4
[i]Type for TMP_249

Name: TMP_249 Function: _domainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: chainId, Num: 1
Globalname: chainId
End popogation
TMP_250(bytes32) = INTERNAL_CALL, Domain._calculateDomainSeparator(uint256)(chainId_1)
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: chainId Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: chainId, Num: 1
Globalname: chainId

Name: chainId_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: DOMAIN_SEPARATOR_SIGNATURE_HASH, Num: 1
Globalname: DOMAIN_SEPARATOR_SIGNATURE_HASH
global...

Name: PIC_15 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
chainId_1(uint256) := ϕ(['chainId_1', 'DOMAIN_SEPARATOR_CHAIN_ID_2'])
Phi
[i]Type for chainId

Name: chainId Function: _calculateDomainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
DOMAIN_SEPARATOR_SIGNATURE_HASH_1(bytes32) := ϕ(['DOMAIN_SEPARATOR_SIGNATURE_HASH_0'])
Phi
[i]Type for DOMAIN_SEPARATOR_SIGNATURE_HASH

Name: DOMAIN_SEPARATOR_SIGNATURE_HASH Function: _calculateDomainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: chainId, Num: 1
Globalname: chainId
End popogation
TMP_243 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 3
3
3
[i]Type for TMP_243

Name: TMP_243 Function: _calculateDomainSeparator
Num: -1
Den: -1
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244(bytes) = SOLIDITY_CALL abi.encode()(DOMAIN_SEPARATOR_SIGNATURE_HASH_1,chainId_1,TMP_243)
[i]Type for TMP_244

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_245(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_244)
[i]Type for TMP_245

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_245
RETURN
init
end

Name: TMP_245 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: chainId, Num: 1
Globalname: chainId

Name: chainId_1 Function: _calculateDomainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: DOMAIN_SEPARATOR_SIGNATURE_HASH Function: _calculateDomainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
chainId_1(uint256) := ϕ(['chainId_1', 'DOMAIN_SEPARATOR_CHAIN_ID_2'])
Phi
[i]Type for chainId

Name: chainId Function: _calculateDomainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
DOMAIN_SEPARATOR_SIGNATURE_HASH_1(bytes32) := ϕ(['DOMAIN_SEPARATOR_SIGNATURE_HASH_0'])
Phi
[i]Type for DOMAIN_SEPARATOR_SIGNATURE_HASH

Name: DOMAIN_SEPARATOR_SIGNATURE_HASH Function: _calculateDomainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: chainId, Num: 1
Globalname: chainId
End popogation
TMP_243 = CONVERT this to address
Converting this
3
[i]Type for TMP_243

Name: TMP_243 Function: _calculateDomainSeparator
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_244(bytes) = SOLIDITY_CALL abi.encode()(DOMAIN_SEPARATOR_SIGNATURE_HASH_1,chainId_1,TMP_243)
[i]Type for TMP_244

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_245(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_244)
[i]Type for TMP_245

Name: TMP_245 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_245
RETURN
init
end

Name: TMP_245 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_250

Name: TMP_250 Function: _domainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_250
RETURN
init
end

Name: TMP_250 Function: _domainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
RETURN _DOMAIN_SEPARATOR_2
RETURN
init
end

Name: _DOMAIN_SEPARATOR Function: _domainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _DOMAIN_SEPARATOR Function: _domainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: DOMAIN_SEPARATOR_CHAIN_ID Function: _domainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_DOMAIN_SEPARATOR_2(bytes32) := ϕ(['_DOMAIN_SEPARATOR_1', '_DOMAIN_SEPARATOR_0'])
Phi
[i]Type for _DOMAIN_SEPARATOR

Name: _DOMAIN_SEPARATOR Function: _domainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
DOMAIN_SEPARATOR_CHAIN_ID_4(uint256) := ϕ(['DOMAIN_SEPARATOR_CHAIN_ID_3', 'DOMAIN_SEPARATOR_CHAIN_ID_0'])
Phi
[i]Type for DOMAIN_SEPARATOR_CHAIN_ID

Name: DOMAIN_SEPARATOR_CHAIN_ID Function: _domainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: chainId, Num: 1
Globalname: chainId
End popogation
TMP_248(uint256) = SOLIDITY_CALL chainid()()
[i]Type for TMP_248

Name: TMP_248 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
chainId_1(uint256) := TMP_248(uint256)
asgn
init
end
_______________

Name: TMP_248 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for chainId

Name: chainId Function: _domainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: chainId, Num: 1
Globalname: chainId
End popogation
TMP_249(bool) = chainId_1 == DOMAIN_SEPARATOR_CHAIN_ID_4
[i]Type for TMP_249

Name: TMP_249 Function: _domainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: chainId, Num: 1
Globalname: chainId
End popogation
TMP_250(bytes32) = INTERNAL_CALL, Domain._calculateDomainSeparator(uint256)(chainId_1)
init
end
init
end
_______________

Name: PIC_24 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_250

Name: TMP_250 Function: _domainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_250
RETURN
init
end

Name: TMP_250 Function: _domainSeparator
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
RETURN _DOMAIN_SEPARATOR_2
RETURN
init
end

Name: _DOMAIN_SEPARATOR Function: _domainSeparator
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for TMP_251

Name: TMP_251 Function: _getDigest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_252(bytes) = SOLIDITY_CALL abi.encodePacked()(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA_2,TMP_251,dataHash_1)
[i]Type for TMP_252

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_253(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_252)
[i]Type for TMP_253

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
digest_1(bytes32) := TMP_253(bytes32)
asgn
init
end
_______________

Name: TMP_253 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for digest

Name: digest Function: _getDigest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: dataHash, Num: 1
Globalname: dataHash

Name: dataHash_1 Function: _getDigest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA Function: _getDigest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
dataHash_1(bytes32) := ϕ(['TMP_291'])
Phi
[i]Type for dataHash

Name: dataHash Function: _getDigest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA_1(string) := ϕ(['EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA_0', 'EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA_2'])
Phi
[i]Type for EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA

Name: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA Function: _getDigest
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: dataHash, Num: 1
Globalname: dataHash
Name: digest, Num: 1
Globalname: digest
End popogation
TMP_251(bytes32) = INTERNAL_CALL, Domain._domainSeparator()()
[i]Type for TMP_251

Name: TMP_251 Function: _getDigest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_252(bytes) = SOLIDITY_CALL abi.encodePacked()(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA_2,TMP_251,dataHash_1)
[i]Type for TMP_252

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_253(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_252)
[i]Type for TMP_253

Name: TMP_253 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
digest_1(bytes32) := TMP_253(bytes32)
asgn
init
end
_______________

Name: TMP_253 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for digest

Name: digest Function: _getDigest
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
[i]Type for TMP_292

Name: TMP_292 Function: permit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_293(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_292,v_1,r_1,s_1)
[i]Type for TMP_293

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_294(bool) = TMP_293 == owner__1
[i]Type for TMP_294

Name: TMP_294 Function: permit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_295(None) = SOLIDITY_CALL require(bool,string)(TMP_294,Invalid Sig)
[i]Type for TMP_295

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: value, Num: 1
Globalname: value
Name: allowance, Num: 6
Globalname: allowance
global...

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_97(mapping(address => uint256)) -> allowance_5[owner__1]
INDEX
[i]Type for REF_97

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_98(uint256) -> REF_97[spender_1]
INDEX
[i]Type for REF_98

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
allowance_6(mapping(address => mapping(address => uint256))) := ϕ(['allowance_5'])
Phi
[i]Type for allowance

Name: allowance Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_98 (->allowance_6) := value_1(uint256)
asgn
init
end
_______________

Name: value Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_98

Name: REF_98 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: value, Num: 1
Globalname: value
End popogation


nonces_1(mapping(address => uint256)) := ϕ(['nonces_3', 'nonces_0'])
PERMIT_SIGNATURE_HASH_1(bytes32) := ϕ(['PERMIT_SIGNATURE_HASH_0', 'PERMIT_SIGNATURE_HASH_2'])
TMP_284 = CONVERT 0 to address
TMP_285(bool) = owner__1 != TMP_284
TMP_286(None) = SOLIDITY_CALL require(bool,string)(TMP_285,Zero owner)
TMP_287(bool) = block.timestamp < deadline_1
TMP_288(None) = SOLIDITY_CALL require(bool,string)(TMP_287,Expired)
REF_96(uint256) -> nonces_1[owner__1]
TMP_289(uint256) := REF_96(uint256)
nonces_2(mapping(address => uint256)) := ϕ(['nonces_1'])
REF_96(-> nonces_2) = REF_96 + 1
TMP_290(bytes) = SOLIDITY_CALL abi.encode()(PERMIT_SIGNATURE_HASH_1,owner__1,spender_1,value_1,TMP_289,deadline_1)
TMP_291(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_290)
TMP_292(bytes32) = INTERNAL_CALL, Domain._getDigest(bytes32)(TMP_291)
TMP_293(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_292,v_1,r_1,s_1)
TMP_294(bool) = TMP_293 == owner__1
TMP_295(None) = SOLIDITY_CALL require(bool,string)(TMP_294,Invalid Sig)
REF_97(mapping(address => uint256)) -> allowance_5[owner__1]
REF_98(uint256) -> REF_97[spender_1]
allowance_6(mapping(address => mapping(address => uint256))) := ϕ(['allowance_5'])
REF_98 (->allowance_6) := value_1(uint256)
Emit Approval(owner__1,spender_1,value_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PERMIT_SIGNATURE_HASH Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
nonces_1(mapping(address => uint256)) := ϕ(['nonces_3', 'nonces_0'])
Phi
[i]Type for nonces

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PERMIT_SIGNATURE_HASH_1(bytes32) := ϕ(['PERMIT_SIGNATURE_HASH_0', 'PERMIT_SIGNATURE_HASH_2'])
Phi
[i]Type for PERMIT_SIGNATURE_HASH

Name: PERMIT_SIGNATURE_HASH Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_284 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_284

Name: TMP_284 Function: permit
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_285(bool) = owner__1 != TMP_284
[i]Type for TMP_285

Name: TMP_285 Function: permit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_286(None) = SOLIDITY_CALL require(bool,string)(TMP_285,Zero owner)
[i]Type for TMP_286

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_287(bool) = block.timestamp < deadline_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_287

Name: TMP_287 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_288(None) = SOLIDITY_CALL require(bool,string)(TMP_287,Expired)
[i]Type for TMP_288

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: value, Num: 1
Globalname: value
Name: v, Num: 1
Globalname: v
Name: s, Num: 1
Globalname: s
Name: r, Num: 1
Globalname: r
End popogation

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_96(uint256) -> nonces_1[owner__1]
INDEX
[i]Type for REF_96

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_289(uint256) := REF_96(uint256)
asgn
init
end
_______________

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for TMP_289

Name: TMP_289 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nonces_2(mapping(address => uint256)) := ϕ(['nonces_1'])
Phi
[i]Type for nonces

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_96(-> nonces_2) = REF_96 + 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_96

Name: REF_96 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_290(bytes) = SOLIDITY_CALL abi.encode()(PERMIT_SIGNATURE_HASH_1,owner__1,spender_1,value_1,TMP_289,deadline_1)
[i]Type for TMP_290

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_291(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_290)
[i]Type for TMP_291

Name: TMP_291 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_292(bytes32) = INTERNAL_CALL, Domain._getDigest(bytes32)(TMP_291)
init
end
init
end
_______________

Name: PIC_26 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_292

Name: TMP_292 Function: permit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_293(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_292,v_1,r_1,s_1)
[i]Type for TMP_293

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_294(bool) = TMP_293 == owner__1
[i]Type for TMP_294

Name: TMP_294 Function: permit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_295(None) = SOLIDITY_CALL require(bool,string)(TMP_294,Invalid Sig)
[i]Type for TMP_295

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: value, Num: 1
Globalname: value
End popogation

Name: allowance Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_97(mapping(address => uint256)) -> allowance_5[owner__1]
INDEX
[i]Type for REF_97

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_98(uint256) -> REF_97[spender_1]
INDEX
[i]Type for REF_98

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
allowance_6(mapping(address => mapping(address => uint256))) := ϕ(['allowance_5'])
Phi
[i]Type for allowance

Name: allowance Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_98 (->allowance_6) := value_1(uint256)
asgn
init
end
_______________

Name: value Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_98

Name: REF_98 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: value, Num: 1
Globalname: value
End popogation


nonces_1(mapping(address => uint256)) := ϕ(['nonces_3', 'nonces_0'])
PERMIT_SIGNATURE_HASH_1(bytes32) := ϕ(['PERMIT_SIGNATURE_HASH_0', 'PERMIT_SIGNATURE_HASH_2'])
TMP_284 = CONVERT 0 to address
TMP_285(bool) = owner__1 != TMP_284
TMP_286(None) = SOLIDITY_CALL require(bool,string)(TMP_285,Zero owner)
TMP_287(bool) = block.timestamp < deadline_1
TMP_288(None) = SOLIDITY_CALL require(bool,string)(TMP_287,Expired)
REF_96(uint256) -> nonces_1[owner__1]
TMP_289(uint256) := REF_96(uint256)
nonces_2(mapping(address => uint256)) := ϕ(['nonces_1'])
REF_96(-> nonces_2) = REF_96 + 1
TMP_290(bytes) = SOLIDITY_CALL abi.encode()(PERMIT_SIGNATURE_HASH_1,owner__1,spender_1,value_1,TMP_289,deadline_1)
TMP_291(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_290)
TMP_292(bytes32) = INTERNAL_CALL, Domain._getDigest(bytes32)(TMP_291)
TMP_293(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_292,v_1,r_1,s_1)
TMP_294(bool) = TMP_293 == owner__1
TMP_295(None) = SOLIDITY_CALL require(bool,string)(TMP_294,Invalid Sig)
REF_97(mapping(address => uint256)) -> allowance_5[owner__1]
REF_98(uint256) -> REF_97[spender_1]
allowance_6(mapping(address => mapping(address => uint256))) := ϕ(['allowance_5'])
REF_98 (->allowance_6) := value_1(uint256)
Emit Approval(owner__1,spender_1,value_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PERMIT_SIGNATURE_HASH Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
nonces_1(mapping(address => uint256)) := ϕ(['nonces_3', 'nonces_0'])
Phi
[i]Type for nonces

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PERMIT_SIGNATURE_HASH_1(bytes32) := ϕ(['PERMIT_SIGNATURE_HASH_0', 'PERMIT_SIGNATURE_HASH_2'])
Phi
[i]Type for PERMIT_SIGNATURE_HASH

Name: PERMIT_SIGNATURE_HASH Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_284 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_284

Name: TMP_284 Function: permit
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_285(bool) = owner__1 != TMP_284
[i]Type for TMP_285

Name: TMP_285 Function: permit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_286(None) = SOLIDITY_CALL require(bool,string)(TMP_285,Zero owner)
[i]Type for TMP_286

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_287(bool) = block.timestamp < deadline_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_287

Name: TMP_287 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_288(None) = SOLIDITY_CALL require(bool,string)(TMP_287,Expired)
[i]Type for TMP_288

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: value, Num: 1
Globalname: value
Name: v, Num: 1
Globalname: v
Name: s, Num: 1
Globalname: s
Name: r, Num: 1
Globalname: r
End popogation

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_96(uint256) -> nonces_1[owner__1]
INDEX
[i]Type for REF_96

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_289(uint256) := REF_96(uint256)
asgn
init
end
_______________

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for TMP_289

Name: TMP_289 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
nonces_2(mapping(address => uint256)) := ϕ(['nonces_1'])
Phi
[i]Type for nonces

Name: nonces Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_96(-> nonces_2) = REF_96 + 1
init
end
init
end
init
end
_______________

Name: 1 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_96

Name: REF_96 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_290(bytes) = SOLIDITY_CALL abi.encode()(PERMIT_SIGNATURE_HASH_1,owner__1,spender_1,value_1,TMP_289,deadline_1)
[i]Type for TMP_290

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_291(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_290)
[i]Type for TMP_291

Name: TMP_291 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_292(bytes32) = INTERNAL_CALL, Domain._getDigest(bytes32)(TMP_291)
init
end
init
end
_______________

Name: PIC_26 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_292

Name: TMP_292 Function: permit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_293(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(TMP_292,v_1,r_1,s_1)
[i]Type for TMP_293

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_294(bool) = TMP_293 == owner__1
[i]Type for TMP_294

Name: TMP_294 Function: permit
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_295(None) = SOLIDITY_CALL require(bool,string)(TMP_294,Invalid Sig)
[i]Type for TMP_295

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: value, Num: 1
Globalname: value
End popogation

Name: allowance Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_97(mapping(address => uint256)) -> allowance_5[owner__1]
INDEX
[i]Type for REF_97

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_98(uint256) -> REF_97[spender_1]
INDEX
[i]Type for REF_98

Name: allowance Function: increaseAllowance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
allowance_6(mapping(address => mapping(address => uint256))) := ϕ(['allowance_5'])
Phi
[i]Type for allowance

Name: allowance Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_98 (->allowance_6) := value_1(uint256)
asgn
init
end
_______________

Name: value Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_98

Name: REF_98 Function: permit
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: value, Num: 1
Globalname: value
End popogation
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



mint
Finding type for amount(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2'])
LOCK_TIME_1(uint256) := ϕ(['LOCK_TIME_0'])
effectiveYetiTokenBalance_1(uint256) := ϕ(['effectiveYetiTokenBalance_0', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
yetiToken_2(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3', 'yetiToken_0'])
users_5(mapping(address => sYETIToken.User)) := ϕ(['users_8', 'users_1', 'users_6', 'users_0', 'users_2'])
REF_99(sYETIToken.User) -> users_5[msg.sender]
user_1(sYETIToken.User) := REF_99(sYETIToken.User)
TMP_304(bool) = totalSupply_1 == 0
CONDITION TMP_304
TMP_305(uint256) = amount_1 * totalSupply_1
TMP_306(uint256) = TMP_305 / effectiveYetiTokenBalance_1
shares_1(uint256) := TMP_306(uint256)
shares_2(uint256) := amount_1(uint256)
shares_3(uint256) := ϕ(['shares_1', 'shares_2'])
REF_100(uint128) -> user_1.balance
TMP_297(uint128) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.to128(uint256), arguments:['shares_3'] 
user_2(sYETIToken.User) := ϕ(['user_1'])
REF_100(-> user_2) = REF_100 + TMP_297
REF_102(uint128) -> user_2.lockedUntil
TMP_298(uint256) = block.timestamp + LOCK_TIME_1
TMP_299(uint128) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.to128(uint256), arguments:['TMP_298'] 
user_3(sYETIToken.User) := ϕ(['user_2'])
REF_102 (->user_3) := TMP_299(uint128)
REF_104(sYETIToken.User) -> users_5[msg.sender]
users_6(mapping(address => sYETIToken.User)) := ϕ(['users_5'])
REF_104 (->users_6) := user_3(sYETIToken.User)
totalSupply_2(uint256) = totalSupply_1 + shares_3
HIGH_LEVEL_CALL, dest:yetiToken_2(IYETIToken), function:sendToSYETI, arguments:['msg.sender', 'amount_1']  
effectiveYetiTokenBalance_2(uint256) := ϕ(['effectiveYetiTokenBalance_1', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
yetiToken_3(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_2', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3'])
TMP_301(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.add(uint256,uint256), arguments:['effectiveYetiTokenBalance_2', 'amount_1'] 
effectiveYetiTokenBalance_3(uint256) := TMP_301(uint256)
TMP_302 = CONVERT 0 to address
Emit Transfer(TMP_302,msg.sender,shares_3)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Name: totalSupply, Num: 1
Globalname: totalSupply
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: LOCK_TIME, Num: 1
Globalname: LOCK_TIME
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: effectiveYetiTokenBalance, Num: 1
Globalname: effectiveYetiTokenBalance
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: yetiToken, Num: 2
Globalname: yetiToken
global...

Name: yetiToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: users, Num: 5
Globalname: users
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
LOCK_TIME_1(uint256) := ϕ(['LOCK_TIME_0'])
Phi
[i]Type for LOCK_TIME

Name: LOCK_TIME Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
effectiveYetiTokenBalance_1(uint256) := ϕ(['effectiveYetiTokenBalance_0', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
Phi
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yetiToken_2(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3', 'yetiToken_0'])
Phi
[i]Type for yetiToken

Name: yetiToken Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
users_5(mapping(address => sYETIToken.User)) := ϕ(['users_8', 'users_1', 'users_6', 'users_0', 'users_2'])
Phi
[i]Type for users

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1
Globalname: user
End popogation
REF_99(sYETIToken.User) -> users_5[msg.sender]
INDEX
[i]Type for REF_99

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1(sYETIToken.User) := REF_99(sYETIToken.User)
asgn
init
end
_______________

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_304(bool) = totalSupply_1 == 0
[i]Type for TMP_304

Name: TMP_304 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: shares, Num: 1
Globalname: shares
End popogation
TMP_305(uint256) = amount_1 * totalSupply_1
testing mul...
init
end
init
end

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_305

Name: TMP_305 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_306(uint256) = TMP_305 / effectiveYetiTokenBalance_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_306

Name: TMP_306 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := TMP_306(uint256)
asgn
init
end
_______________

Name: TMP_306 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for shares

Name: shares Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: shares, Num: 2
Globalname: shares
End popogation
shares_2(uint256) := amount_1(uint256)
asgn
init
end
_______________

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for shares

Name: shares Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: shares, Num: 3
Globalname: shares

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
shares_3(uint256) := ϕ(['shares_1', 'shares_2'])
Phi
init
end
_______________

Name: shares Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for shares

Name: shares Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 2
Globalname: user
Name: user, Num: 2
Globalname: user
End popogation
Name: user, Num: 2
Globalname: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_100(uint128) -> user_1.balance
MEMBER
init
end
init
end
OUT KEY: mint_user_balance
OUT KEY: mint_user_balance
FTT: None
No field found
[i]Type for REF_100

Name: user.balance Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: balance
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_297(uint128) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.to128(uint256), arguments:['shares_3'] 
Written func info: BoringMath, to128
Handling balance function!
u
prev address? u
global assignment: 4
4
Finding type for TMP_297(uint128 ... )
[i]Type for TMP_297

Name: TMP_297 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_2(sYETIToken.User) := ϕ(['user_1'])
Phi
init
end
_______________

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for user

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
REF_100(-> user_2) = REF_100 + TMP_297
init
end
init
end
init
end
_______________

Name: TMP_297 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_100

Name: REF_100 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: balance
#################
Member: 
Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_100 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 3
Globalname: user
End popogation
Name: user, Num: 3
Globalname: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_102(uint128) -> user_2.lockedUntil
MEMBER
init
end
init
end
OUT KEY: mint_user_lockedUntil
OUT KEY: mint_user_lockedUntil
FTT: None
No field found
[i]Type for REF_102

Name: user.lockedUntil Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_2, Field: lockedUntil
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: lockedUntil Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.lockedUntil Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_298(uint256) = block.timestamp + LOCK_TIME_1
init
end
init
end
init
end
_______________

Name: LOCK_TIME Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_298

Name: TMP_298 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_299(uint128) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.to128(uint256), arguments:['TMP_298'] 
Written func info: BoringMath, to128
Handling balance function!
4
Finding type for TMP_299(uint128 ... )
[i]Type for TMP_299

Name: TMP_299 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_3(sYETIToken.User) := ϕ(['user_2'])
Phi
init
end
_______________

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
[i]Type for user

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lockedUntil, balance
Finance Type: undef
XXXX
REF_102 (->user_3) := TMP_299(uint128)
asgn
init
end
_______________

Name: TMP_299 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_102

Name: REF_102 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_2, Field: lockedUntil
#################
Member: 
Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lockedUntil, balance
Finance Type: undef
Fieldf: 
Name: lockedUntil Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_102 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lockedUntil Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: users, Num: 6
Globalname: users
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_104(sYETIToken.User) -> users_5[msg.sender]
INDEX
[i]Type for REF_104

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
users_6(mapping(address => sYETIToken.User)) := ϕ(['users_5'])
Phi
[i]Type for users

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_104 (->users_6) := user_3(sYETIToken.User)
asgn
init
end
_______________

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lockedUntil, balance
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_104

Name: REF_104 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
Name: totalSupply, Num: 2
Globalname: totalSupply
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
totalSupply_2(uint256) = totalSupply_1 + shares_3
init
end
init
end
init
end
_______________

Name: shares Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation
Name: effectiveYetiTokenBalance, Num: 2
Globalname: effectiveYetiTokenBalance
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: yetiToken, Num: 3
Globalname: yetiToken
global...

Name: yetiToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:yetiToken_2(IYETIToken), function:sendToSYETI, arguments:['msg.sender', 'amount_1']  
High Call: sendToSYETI
effectiveYetiTokenBalance_2(uint256) := ϕ(['effectiveYetiTokenBalance_1', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
Phi
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yetiToken_3(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_2', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3'])
Phi
[i]Type for yetiToken

Name: yetiToken Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: effectiveYetiTokenBalance, Num: 3
Globalname: effectiveYetiTokenBalance
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_301(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.add(uint256,uint256), arguments:['effectiveYetiTokenBalance_2', 'amount_1'] 
init
end
init
end
init
end
_______________

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_301

Name: TMP_301 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
effectiveYetiTokenBalance_3(uint256) := TMP_301(uint256)
asgn
init
end
_______________

Name: TMP_301 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_302 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_302

Name: TMP_302 Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2'])
LOCK_TIME_1(uint256) := ϕ(['LOCK_TIME_0'])
effectiveYetiTokenBalance_1(uint256) := ϕ(['effectiveYetiTokenBalance_0', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
yetiToken_2(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3', 'yetiToken_0'])
users_5(mapping(address => sYETIToken.User)) := ϕ(['users_8', 'users_1', 'users_6', 'users_0', 'users_2'])
REF_99(sYETIToken.User) -> users_5[msg.sender]
user_1(sYETIToken.User) := REF_99(sYETIToken.User)
TMP_304(bool) = totalSupply_1 == 0
CONDITION TMP_304
TMP_305(uint256) = amount_1 * totalSupply_1
TMP_306(uint256) = TMP_305 / effectiveYetiTokenBalance_1
shares_1(uint256) := TMP_306(uint256)
shares_2(uint256) := amount_1(uint256)
shares_3(uint256) := ϕ(['shares_1', 'shares_2'])
REF_100(uint128) -> user_1.balance
TMP_297(uint128) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.to128(uint256), arguments:['shares_3'] 
user_2(sYETIToken.User) := ϕ(['user_1'])
REF_100(-> user_2) = REF_100 + TMP_297
REF_102(uint128) -> user_2.lockedUntil
TMP_298(uint256) = block.timestamp + LOCK_TIME_1
TMP_299(uint128) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.to128(uint256), arguments:['TMP_298'] 
user_3(sYETIToken.User) := ϕ(['user_2'])
REF_102 (->user_3) := TMP_299(uint128)
REF_104(sYETIToken.User) -> users_5[msg.sender]
users_6(mapping(address => sYETIToken.User)) := ϕ(['users_5'])
REF_104 (->users_6) := user_3(sYETIToken.User)
totalSupply_2(uint256) = totalSupply_1 + shares_3
HIGH_LEVEL_CALL, dest:yetiToken_2(IYETIToken), function:sendToSYETI, arguments:['msg.sender', 'amount_1']  
effectiveYetiTokenBalance_2(uint256) := ϕ(['effectiveYetiTokenBalance_1', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
yetiToken_3(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_2', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3'])
TMP_301(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.add(uint256,uint256), arguments:['effectiveYetiTokenBalance_2', 'amount_1'] 
effectiveYetiTokenBalance_3(uint256) := TMP_301(uint256)
TMP_302 = CONVERT 0 to address
Emit Transfer(TMP_302,msg.sender,shares_3)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: LOCK_TIME Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yetiToken Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
totalSupply_1(uint256) := ϕ(['totalSupply_0', 'totalSupply_4', 'totalSupply_2'])
Phi
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
LOCK_TIME_1(uint256) := ϕ(['LOCK_TIME_0'])
Phi
[i]Type for LOCK_TIME

Name: LOCK_TIME Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
effectiveYetiTokenBalance_1(uint256) := ϕ(['effectiveYetiTokenBalance_0', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
Phi
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yetiToken_2(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3', 'yetiToken_0'])
Phi
[i]Type for yetiToken

Name: yetiToken Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
users_5(mapping(address => sYETIToken.User)) := ϕ(['users_8', 'users_1', 'users_6', 'users_0', 'users_2'])
Phi
[i]Type for users

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1
Globalname: user
End popogation
REF_99(sYETIToken.User) -> users_5[msg.sender]
INDEX
[i]Type for REF_99

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1(sYETIToken.User) := REF_99(sYETIToken.User)
asgn
init
end
_______________

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_304(bool) = totalSupply_1 == 0
[i]Type for TMP_304

Name: TMP_304 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: shares, Num: 1
Globalname: shares
End popogation
TMP_305(uint256) = amount_1 * totalSupply_1
testing mul...
init
end
init
end

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_305

Name: TMP_305 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_306(uint256) = TMP_305 / effectiveYetiTokenBalance_1
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_306

Name: TMP_306 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
shares_1(uint256) := TMP_306(uint256)
asgn
init
end
_______________

Name: TMP_306 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for shares

Name: shares Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
Name: shares, Num: 2
Globalname: shares
End popogation
shares_2(uint256) := amount_1(uint256)
asgn
init
end
_______________

Name: amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for shares

Name: shares Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: shares, Num: 3
Globalname: shares

Name: shares Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
shares_3(uint256) := ϕ(['shares_1', 'shares_2'])
Phi
init
end
_______________

Name: shares Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for shares

Name: shares Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 2
Globalname: user
Name: user, Num: 2
Globalname: user
End popogation
Name: user, Num: 2
Globalname: user

Name: user Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Phid
REF_100(uint128) -> user_1.balance
MEMBER
init
end
init
end
[i]Type for REF_100

Name: user.balance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: balance
#################
Member: 
Name: user Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: balance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_297(uint128) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.to128(uint256), arguments:['shares_3'] 
Written func info: BoringMath, to128
Handling balance function!
4
Finding type for TMP_297(uint128 ... )
[i]Type for TMP_297

Name: TMP_297 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_2(sYETIToken.User) := ϕ(['user_1'])
Phi
init
end
_______________

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for user

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
REF_100(-> user_2) = REF_100 + TMP_297
init
end
init
end
init
end
_______________

Name: REF_100 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for REF_100

Name: REF_100 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: balance
#################
Member: 
Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_100 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: balance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 3
Globalname: user
End popogation
Name: user, Num: 3
Globalname: user

Name: user Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lockedUntil, balance
Finance Type: undef
Phid
REF_102(uint128) -> user_2.lockedUntil
MEMBER
init
end
init
end
[i]Type for REF_102

Name: user.lockedUntil Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_2, Field: lockedUntil
#################
Member: 
Name: user Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: lockedUntil, balance
Finance Type: undef
Fieldf: 
Name: lockedUntil Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.lockedUntil Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lockedUntil Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_298(uint256) = block.timestamp + LOCK_TIME_1
init
end
init
end
init
end
_______________

Name: LOCK_TIME Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_298

Name: TMP_298 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_299(uint128) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.to128(uint256), arguments:['TMP_298'] 
Written func info: BoringMath, to128
Handling balance function!
4
Finding type for TMP_299(uint128 ... )
[i]Type for TMP_299

Name: TMP_299 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_3(sYETIToken.User) := ϕ(['user_2'])
Phi
init
end
_______________

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
[i]Type for user

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lockedUntil, balance
Finance Type: undef
XXXX
REF_102 (->user_3) := TMP_299(uint128)
asgn
init
end
_______________

Name: TMP_299 Function: mint
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_102

Name: REF_102 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_2, Field: lockedUntil
#################
Member: 
Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lockedUntil, balance
Finance Type: undef
Fieldf: 
Name: lockedUntil Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_102 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Finance type key: (-1, -1)
Added to member...

Name: lockedUntil Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_104(sYETIToken.User) -> users_5[msg.sender]
INDEX
[i]Type for REF_104

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
users_6(mapping(address => sYETIToken.User)) := ϕ(['users_5'])
Phi
[i]Type for users

Name: users Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_104 (->users_6) := user_3(sYETIToken.User)
asgn
init
end
_______________

Name: user Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: lockedUntil, balance
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_104

Name: REF_104 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation
totalSupply_2(uint256) = totalSupply_1 + shares_3
init
end
init
end
init
end
_______________

Name: shares Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for totalSupply

Name: totalSupply Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yetiToken Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:yetiToken_2(IYETIToken), function:sendToSYETI, arguments:['msg.sender', 'amount_1']  
High Call: sendToSYETI
effectiveYetiTokenBalance_2(uint256) := ϕ(['effectiveYetiTokenBalance_1', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
Phi
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yetiToken_3(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_2', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3'])
Phi
[i]Type for yetiToken

Name: yetiToken Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation
TMP_301(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.add(uint256,uint256), arguments:['effectiveYetiTokenBalance_2', 'amount_1'] 
init
end
init
end
init
end
_______________

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_301

Name: TMP_301 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
effectiveYetiTokenBalance_3(uint256) := TMP_301(uint256)
asgn
init
end
_______________

Name: TMP_301 Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_302 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_302

Name: TMP_302 Function: mint
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



_burn
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



burn
Finding type for to(address ... )
prev address? u
Head Addr: -991
    Norm: 0
    Set: {-991}
    Fin: NULL
Finding type for shares(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: to
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


INTERNAL_CALL, sYETIToken._burn(address,address,uint256)(msg.sender,to_1,shares_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._burn(address,address,uint256)(msg.sender,to_1,shares_1)
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


INTERNAL_CALL, sYETIToken._burn(address,address,uint256)(msg.sender,to_1,shares_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._burn(address,address,uint256)(msg.sender,to_1,shares_1)
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



burnFrom
Finding type for from(address ... )
prev address? u
Head Addr: -990
    Norm: 0
    Set: {-990}
    Fin: NULL
Finding type for to(address ... )
prev address? u
Head Addr: -989
    Norm: 0
    Set: {-989}
    Fin: NULL
Finding type for shares(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: from
    fields: []
    fintype: -1
Param: 1
    num: []
    den: []
    norm: u
    link: to
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


INTERNAL_CALL, sYETIToken._useAllowance(address,uint256)(from_1,shares_1)
INTERNAL_CALL, sYETIToken._burn(address,address,uint256)(from_1,to_1,shares_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._useAllowance(address,uint256)(from_1,shares_1)
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._burn(address,address,uint256)(from_1,to_1,shares_1)
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


INTERNAL_CALL, sYETIToken._useAllowance(address,uint256)(from_1,shares_1)
INTERNAL_CALL, sYETIToken._burn(address,address,uint256)(from_1,to_1,shares_1)
RETURN True


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._useAllowance(address,uint256)(from_1,shares_1)
Propogating parameters and globals to SSA variables...
Name: shares, Num: 1
Globalname: shares
End popogation
INTERNAL_CALL, sYETIToken._burn(address,address,uint256)(from_1,to_1,shares_1)
Propogating parameters and globals to SSA variables...
End popogation
RETURN True
RETURN
init
end

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



buyBack
Finding type for _routerAddress(address ... )
prev address? u
Head Addr: -988
    Norm: 0
    Set: {-988}
    Fin: NULL
Finding type for _YUSDToSell(uint256 ... )
Finding type for _YETIOutMin(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: _routerAddress
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


yusdToken_2(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
MODIFIER_CALL, BoringOwnable.onlyOwner()()
TMP_323(bool) = _YUSDToSell_1 != 0
TMP_324(None) = SOLIDITY_CALL require(bool,string)(TMP_323,Zero amount)
TMP_325 = CONVERT this to address
TMP_326(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_3(IERC20), function:balanceOf, arguments:['TMP_325']  
yusdToken_4(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_3'])
TMP_327(bool) = TMP_326 >= _YUSDToSell_1
TMP_328(None) = SOLIDITY_CALL require(bool,string)(TMP_327,Not enough YUSD in contract)
INTERNAL_CALL, sYETIToken._buyBack(address,uint256,uint256)(_routerAddress_1,_YUSDToSell_1,_YETIOutMin_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: yusdToken, Num: 2
Globalname: yusdToken
global...

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
yusdToken_2(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
Name: owner, Num: 7
Globalname: owner
global...

Name: PIC_11 Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
Phid
owner_7(address) := ϕ(['owner_1', 'owner_6', 'owner_3', 'owner_0', 'owner_4'])
Phi
[i]Type for owner

Name: owner Function: onlyOwner
Num: -1
Den: -1
Address: 1
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_383(bool) = msg.sender == owner_7
[i]Type for TMP_383

Name: TMP_383 Function: onlyOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_384(None) = SOLIDITY_CALL require(bool,string)(TMP_383,Ownable: caller is not the owner)
[i]Type for TMP_384

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: owner Function: onlyOwner
Num: -1
Den: -1
Address: 1
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
Phid
owner_7(address) := ϕ(['owner_1', 'owner_6', 'owner_3', 'owner_0', 'owner_4'])
Phi
[i]Type for owner

Name: owner Function: onlyOwner
Num: -1
Den: -1
Address: 1
Norm: u
LF: owner
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_383(bool) = msg.sender == owner_7
[i]Type for TMP_383

Name: TMP_383 Function: onlyOwner
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_384(None) = SOLIDITY_CALL require(bool,string)(TMP_383,Ownable: caller is not the owner)
[i]Type for TMP_384

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: _YUSDToSell, Num: 1
Globalname: _YUSDToSell
End popogation
TMP_323(bool) = _YUSDToSell_1 != 0
[i]Type for TMP_323

Name: TMP_323 Function: buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_324(None) = SOLIDITY_CALL require(bool,string)(TMP_323,Zero amount)
[i]Type for TMP_324

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _YUSDToSell, Num: 1
Globalname: _YUSDToSell
Name: yusdToken, Num: 3
Globalname: yusdToken
global...

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
Name: yusdToken, Num: 4
Globalname: yusdToken
global...

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_325 = CONVERT this to address
Converting this
3
[i]Type for TMP_325

Name: TMP_325 Function: buyBack
Num: -1
Den: -1
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_326(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_3(IERC20), function:balanceOf, arguments:['TMP_325']  
High Call: balanceOf
Running querryfc
Written func info: ERC20, balanceOf
Handling balance function!
u
prev address? u
global assignment: 5
5
[i]Type for TMP_326

Name: TMP_326 Function: buyBack
Num: 5
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
yusdToken_4(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_3'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_327(bool) = TMP_326 >= _YUSDToSell_1
init
end
init
end
lnorm: * rnorm: u
init
end
_______________

Name: TMP_326 Function: buyBack
Num: 5
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
_______________

Name: TMP_326 Function: buyBack
Num: 5
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_327

Name: TMP_327 Function: buyBack
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_328(None) = SOLIDITY_CALL require(bool,string)(TMP_327,Not enough YUSD in contract)
[i]Type for TMP_328

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _YETIOutMin, Num: 1
Globalname: _YETIOutMin
End popogation
INTERNAL_CALL, sYETIToken._buyBack(address,uint256,uint256)(_routerAddress_1,_YUSDToSell_1,_YETIOutMin_1)
init
end
init
end
init
end
[[], [], 'u', '_routerAddress', [], -1, -988, 'u']

Name: _routerAddress Function: None
Num: 
Den: 
Address: -988
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
[[5], [-1], 'u', None, [], -1, 'u', 'u']

Name: _YUSDToSell Function: None
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _YETIOutMin Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _routerAddress_1 Function: None
Num: 
Den: 
Address: -988
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
Phid

Name: _YUSDToSell_1 Function: None
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _YETIOutMin, Num: 1
Globalname: _YETIOutMin

Name: _YETIOutMin_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: yusdToken, Num: 7
Globalname: yusdToken
global...

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: validRouters, Num: 1
Globalname: validRouters
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_routerAddress_1(address) := ϕ(['_routerAddress_1', '_routerAddress_1'])
Phi
[i]Type for _routerAddress

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -988
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
XXXX
_YUSDToSell_1(uint256) := ϕ(['_YUSDToSell_1', 'YUSDToSell_1'])
Phi
[i]Type for _YUSDToSell

Name: _YUSDToSell Function: _buyBack
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_YETIOutMin_1(uint256) := ϕ(['_YETIOutMin_1'])
Phi
[i]Type for _YETIOutMin

Name: _YETIOutMin Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_7(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
validRouters_1(mapping(address => bool)) := ϕ(['validRouters_0', 'validRouters_1', 'validRouters_2', 'validRouters_3'])
Phi
[i]Type for validRouters

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_119(bool) -> validRouters_1[_routerAddress_1]
INDEX
[i]Type for REF_119

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_341(bool) = REF_119 == True
[i]Type for TMP_341

Name: TMP_341 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_342(None) = SOLIDITY_CALL require(bool,string)(TMP_341,Invalid router passed in)
[i]Type for TMP_342

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: yusdToken, Num: 8
Globalname: yusdToken
global...

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_343(bool) = HIGH_LEVEL_CALL, dest:yusdToken_7(IERC20), function:approve, arguments:['_routerAddress_1', '0']  
High Call: approve
Running querryfc
[i]Type for TMP_343

Name: TMP_343 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_8(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_7'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_344(None) = SOLIDITY_CALL require(bool)(TMP_343)
[i]Type for TMP_344

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: yusdToken, Num: 9
Globalname: yusdToken
global...

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_345(bool) = HIGH_LEVEL_CALL, dest:yusdToken_8(IERC20), function:increaseAllowance, arguments:['_routerAddress_1', '_YUSDToSell_1']  
High Call: increaseAllowance
Running querryfc
[i]Type for TMP_345

Name: TMP_345 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_9(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_8'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_346(None) = SOLIDITY_CALL require(bool)(TMP_345)
[i]Type for TMP_346

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: lastBuybackTime, Num: 3
Globalname: lastBuybackTime
global...

Name: PIC_17 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
lastBuybackTime_3(uint256) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for lastBuybackTime

Name: lastBuybackTime Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _YETIOutMin, Num: 1
Globalname: _YETIOutMin
Name: amounts, Num: 1
Globalname: amounts
End popogation
TMP_347 = CONVERT _routerAddress_1 to IsYETIRouter
Converting _routerAddress_1

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -988
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -988
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
sYETIRouter
[i]Type for TMP_347

Name: TMP_347 Function: _buyBack
Num: 
Den: 
Address: -988
Norm: u
LF: sYETIRouter
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_348 = CONVERT this to address
Converting this
3
[i]Type for TMP_348

Name: TMP_348 Function: _buyBack
Num: -1
Den: -1
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_349(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_347(IsYETIRouter), function:swap, arguments:['_YUSDToSell_1', '_YETIOutMin_1', 'TMP_348']  
High Call: swap
Running querryfc
Written func info: sYETIRouter, swap
Handling balance function!
-988
Finding type for hlc_0(uint256[] ... )
[i]Type for TMP_349

Name: TMP_349 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amounts_1(uint256[]) := TMP_349(uint256[])
asgn
init
end
_______________

Name: TMP_349 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for amounts

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: lastBuybackPrice, Num: 1
Globalname: lastBuybackPrice
global...

Name: PIC_16 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
REF_123(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_123

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_350(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['REF_123', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_350

Name: TMP_350 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_125(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_125

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_351(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_350,REF_125)
init
end
init
end
[[-1], [-1], 18, None, [], -1, 'u', 'u']

Name: a Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: b Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: b_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: 18 rnorm: u
init
end
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: 18 rnorm: u
init
end
init
end
init
end
lnorm: 18 rnorm: u
init
end
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_351

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastBuybackPrice_1(uint256) := TMP_351(uint256)
asgn
init
end
_______________

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for lastBuybackPrice

Name: lastBuybackPrice Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_126(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_126

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_127(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_127

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _routerAddress_1 Function: _buyBack
Num: 
Den: 
Address: -988
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
Phid

Name: _YUSDToSell_1 Function: _buyBack
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: _YETIOutMin, Num: 1
Globalname: _YETIOutMin

Name: _YETIOutMin_1 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_routerAddress_1(address) := ϕ(['_routerAddress_1', '_routerAddress_1'])
Phi
[i]Type for _routerAddress

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -988
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
XXXX
_YUSDToSell_1(uint256) := ϕ(['_YUSDToSell_1', 'YUSDToSell_1'])
Phi
[i]Type for _YUSDToSell

Name: _YUSDToSell Function: _buyBack
Num: 5
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_YETIOutMin_1(uint256) := ϕ(['_YETIOutMin_1'])
Phi
[i]Type for _YETIOutMin

Name: _YETIOutMin Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_7(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
validRouters_1(mapping(address => bool)) := ϕ(['validRouters_0', 'validRouters_1', 'validRouters_2', 'validRouters_3'])
Phi
[i]Type for validRouters

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_119(bool) -> validRouters_1[_routerAddress_1]
INDEX
[i]Type for REF_119

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_341(bool) = REF_119 == True
[i]Type for TMP_341

Name: TMP_341 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_342(None) = SOLIDITY_CALL require(bool,string)(TMP_341,Invalid router passed in)
[i]Type for TMP_342

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_343(bool) = HIGH_LEVEL_CALL, dest:yusdToken_7(IERC20), function:approve, arguments:['_routerAddress_1', '0']  
High Call: approve
Running querryfc
[i]Type for TMP_343

Name: TMP_343 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_8(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_7'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_344(None) = SOLIDITY_CALL require(bool)(TMP_343)
[i]Type for TMP_344

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_345(bool) = HIGH_LEVEL_CALL, dest:yusdToken_8(IERC20), function:increaseAllowance, arguments:['_routerAddress_1', '_YUSDToSell_1']  
High Call: increaseAllowance
Running querryfc
[i]Type for TMP_345

Name: TMP_345 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_9(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_8'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_346(None) = SOLIDITY_CALL require(bool)(TMP_345)
[i]Type for TMP_346

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
lastBuybackTime_3(uint256) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for lastBuybackTime

Name: lastBuybackTime Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _YETIOutMin, Num: 1
Globalname: _YETIOutMin
Name: amounts, Num: 1
Globalname: amounts
End popogation
TMP_347 = CONVERT _routerAddress_1 to IsYETIRouter
Converting _routerAddress_1

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -988
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -988
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
sYETIRouter
[i]Type for TMP_347

Name: TMP_347 Function: _buyBack
Num: 
Den: 
Address: -988
Norm: u
LF: sYETIRouter
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_348 = CONVERT this to address
Converting this
3
[i]Type for TMP_348

Name: TMP_348 Function: _buyBack
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_349(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_347(IsYETIRouter), function:swap, arguments:['_YUSDToSell_1', '_YETIOutMin_1', 'TMP_348']  
High Call: swap
Running querryfc
Written func info: sYETIRouter, swap
Handling balance function!
-988
Finding type for hlc_0(uint256[] ... )
[i]Type for TMP_349

Name: TMP_349 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amounts_1(uint256[]) := TMP_349(uint256[])
asgn
init
end
_______________

Name: TMP_349 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for amounts

Name: amounts Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
REF_123(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_123

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_350(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['REF_123', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_350

Name: TMP_350 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_125(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_125

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_351(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_350,REF_125)
init
end
init
end
init
end
_______________

Name: PIC_34 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_351

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastBuybackPrice_1(uint256) := TMP_351(uint256)
asgn
init
end
_______________

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for lastBuybackPrice

Name: lastBuybackPrice Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
REF_126(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_126

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_127(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_127

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX


yusdToken_2(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
MODIFIER_CALL, BoringOwnable.onlyOwner()()
TMP_323(bool) = _YUSDToSell_1 != 0
TMP_324(None) = SOLIDITY_CALL require(bool,string)(TMP_323,Zero amount)
TMP_325 = CONVERT this to address
TMP_326(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_3(IERC20), function:balanceOf, arguments:['TMP_325']  
yusdToken_4(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_3'])
TMP_327(bool) = TMP_326 >= _YUSDToSell_1
TMP_328(None) = SOLIDITY_CALL require(bool,string)(TMP_327,Not enough YUSD in contract)
INTERNAL_CALL, sYETIToken._buyBack(address,uint256,uint256)(_routerAddress_1,_YUSDToSell_1,_YETIOutMin_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
yusdToken_2(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
TMP_323(bool) = _YUSDToSell_1 != 0
[i]Type for TMP_323

Name: TMP_323 Function: buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_324(None) = SOLIDITY_CALL require(bool,string)(TMP_323,Zero amount)
[i]Type for TMP_324

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_325 = CONVERT this to address
Converting this
3
[i]Type for TMP_325

Name: TMP_325 Function: buyBack
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_326(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_3(IERC20), function:balanceOf, arguments:['TMP_325']  
High Call: balanceOf
Running querryfc
Written func info: ERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_326

Name: TMP_326 Function: buyBack
Num: 5
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
yusdToken_4(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_3'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_327(bool) = TMP_326 >= _YUSDToSell_1
init
end
init
end
lnorm: * rnorm: u
5
-1
[i]Type for TMP_327

Name: TMP_327 Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_328(None) = SOLIDITY_CALL require(bool,string)(TMP_327,Not enough YUSD in contract)
[i]Type for TMP_328

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _YETIOutMin, Num: 1
Globalname: _YETIOutMin
End popogation
INTERNAL_CALL, sYETIToken._buyBack(address,uint256,uint256)(_routerAddress_1,_YUSDToSell_1,_YETIOutMin_1)
init
end
init
end
init
end


yusdToken_2(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
MODIFIER_CALL, BoringOwnable.onlyOwner()()
TMP_323(bool) = _YUSDToSell_1 != 0
TMP_324(None) = SOLIDITY_CALL require(bool,string)(TMP_323,Zero amount)
TMP_325 = CONVERT this to address
TMP_326(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_3(IERC20), function:balanceOf, arguments:['TMP_325']  
yusdToken_4(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_3'])
TMP_327(bool) = TMP_326 >= _YUSDToSell_1
TMP_328(None) = SOLIDITY_CALL require(bool,string)(TMP_327,Not enough YUSD in contract)
INTERNAL_CALL, sYETIToken._buyBack(address,uint256,uint256)(_routerAddress_1,_YUSDToSell_1,_YETIOutMin_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
yusdToken_2(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
TMP_323(bool) = _YUSDToSell_1 != 0
[i]Type for TMP_323

Name: TMP_323 Function: buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_324(None) = SOLIDITY_CALL require(bool,string)(TMP_323,Zero amount)
[i]Type for TMP_324

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_325 = CONVERT this to address
Converting this
3
[i]Type for TMP_325

Name: TMP_325 Function: buyBack
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_326(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_3(IERC20), function:balanceOf, arguments:['TMP_325']  
High Call: balanceOf
Running querryfc
Written func info: ERC20, balanceOf
Handling balance function!
5
[i]Type for TMP_326

Name: TMP_326 Function: buyBack
Num: 5
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
yusdToken_4(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_3'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_327(bool) = TMP_326 >= _YUSDToSell_1
init
end
init
end
lnorm: * rnorm: u
5
-1
[i]Type for TMP_327

Name: TMP_327 Function: buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_328(None) = SOLIDITY_CALL require(bool,string)(TMP_327,Not enough YUSD in contract)
[i]Type for TMP_328

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _YETIOutMin, Num: 1
Globalname: _YETIOutMin
End popogation
INTERNAL_CALL, sYETIToken._buyBack(address,uint256,uint256)(_routerAddress_1,_YUSDToSell_1,_YETIOutMin_1)
init
end
init
end
init
end
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



publicBuyBack
Finding type for _routerAddress(address ... )
prev address? u
Head Addr: -987
    Norm: 0
    Set: {-987}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: _routerAddress
    fields: []
    fintype: -1


lastBuybackTime_1(uint256) := ϕ(['lastBuybackTime_0', 'lastBuybackTime_2', 'lastBuybackTime_3'])
yusdToken_5(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
TMP_331 = CONVERT this to address
TMP_332(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_5(IERC20), function:balanceOf, arguments:['TMP_331']  
lastBuybackTime_2(uint256) := ϕ(['lastBuybackTime_1', 'lastBuybackTime_2', 'lastBuybackTime_3'])
yusdToken_6(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_5'])
YUSDBalance_1(uint256) := TMP_332(uint256)
TMP_333(bool) = YUSDBalance_1 != 0
TMP_334(None) = SOLIDITY_CALL require(bool,string)(TMP_333,No YUSD in contract)
TMP_335(uint256) = lastBuybackTime_2 + 608400
TMP_336(bool) = TMP_335 < block.timestamp
TMP_337(None) = SOLIDITY_CALL require(bool,string)(TMP_336,Can only publicly buy back every 169 hours)
TMP_338(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['YUSDBalance_1', '5'] 
TMP_339(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_338,100)
YUSDToSell_1(uint256) := TMP_339(uint256)
INTERNAL_CALL, sYETIToken._buyBack(address,uint256,uint256)(_routerAddress_1,YUSDToSell_1,0)


Propogating parameters and globals to SSA variables...
End popogation
Name: lastBuybackTime, Num: 1
Globalname: lastBuybackTime
global...

Name: lastBuybackTime Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: yusdToken, Num: 5
Globalname: yusdToken
global...

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
lastBuybackTime_1(uint256) := ϕ(['lastBuybackTime_0', 'lastBuybackTime_2', 'lastBuybackTime_3'])
Phi
[i]Type for lastBuybackTime

Name: lastBuybackTime Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_5(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: YUSDBalance, Num: 1
Globalname: YUSDBalance
End popogation
Name: lastBuybackTime, Num: 2
Globalname: lastBuybackTime
global...

Name: lastBuybackTime Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: yusdToken, Num: 6
Globalname: yusdToken
global...

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_331 = CONVERT this to address
Converting this
3
[i]Type for TMP_331

Name: TMP_331 Function: publicBuyBack
Num: -1
Den: -1
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_332(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_5(IERC20), function:balanceOf, arguments:['TMP_331']  
High Call: balanceOf
Running querryfc
Written func info: ERC20, balanceOf
Handling balance function!
u
prev address? u
global assignment: 6
6
[i]Type for TMP_332

Name: TMP_332 Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
lastBuybackTime_2(uint256) := ϕ(['lastBuybackTime_1', 'lastBuybackTime_2', 'lastBuybackTime_3'])
Phi
[i]Type for lastBuybackTime

Name: lastBuybackTime Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_6(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_5'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
YUSDBalance_1(uint256) := TMP_332(uint256)
asgn
init
end
_______________

Name: TMP_332 Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for YUSDBalance

Name: YUSDBalance Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_333(bool) = YUSDBalance_1 != 0
[i]Type for TMP_333

Name: TMP_333 Function: publicBuyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_334(None) = SOLIDITY_CALL require(bool,string)(TMP_333,No YUSD in contract)
[i]Type for TMP_334

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_335(uint256) = lastBuybackTime_2 + 608400
init
end
init
end
init
end
_______________

Name: 608400 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_335

Name: TMP_335 Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_336(bool) = TMP_335 < block.timestamp
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_336

Name: TMP_336 Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_337(None) = SOLIDITY_CALL require(bool,string)(TMP_336,Can only publicly buy back every 169 hours)
[i]Type for TMP_337

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: YUSDToSell, Num: 1
Globalname: YUSDToSell
End popogation
TMP_338(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['YUSDBalance_1', '5'] 
testing mul...
init
end
init
end

Name: YUSDBalance Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: 5 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Error with TMP_338 in function publicBuyBack
Error with: TMP_338 in function publicBuyBack
lnorm: * rnorm: 0
init
end
_______________

Name: YUSDBalance Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_338

Name: TMP_338 Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_339(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_338,100)
init
end
init
end
[[6], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: None
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 2, None, [], -1, 'u', 'u']

Name: b Function: None
Num: -1
Den: -1
Address: u
Norm: 2
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: 2
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: 2
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: 2
init
end
_______________

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: 2
init
end
_______________

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
6
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: 2
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: 2
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: 2
init
end
_______________

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: 2
init
end
_______________

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
6
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_339

Name: TMP_339 Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
YUSDToSell_1(uint256) := TMP_339(uint256)
asgn
init
end
_______________

Name: TMP_339 Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for YUSDToSell

Name: YUSDToSell Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, sYETIToken._buyBack(address,uint256,uint256)(_routerAddress_1,YUSDToSell_1,0)
init
end
init
end
init
end
[[], [], 'u', '_routerAddress', [], -1, -987, 'u']

Name: _routerAddress Function: None
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
[[6], [-1], -2, None, [], 0, 'u', 'u']

Name: _YUSDToSell Function: None
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: _YETIOutMin Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _routerAddress_1 Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
Phid

Name: _YUSDToSell_1 Function: _buyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: _YETIOutMin_1 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_routerAddress_1(address) := ϕ(['_routerAddress_1', '_routerAddress_1'])
Phi
[i]Type for _routerAddress

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
XXXX
_YUSDToSell_1(uint256) := ϕ(['_YUSDToSell_1', 'YUSDToSell_1'])
Phi
[i]Type for _YUSDToSell

Name: _YUSDToSell Function: _buyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_YETIOutMin_1(uint256) := ϕ(['_YETIOutMin_1'])
Phi
[i]Type for _YETIOutMin

Name: _YETIOutMin Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_7(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
validRouters_1(mapping(address => bool)) := ϕ(['validRouters_0', 'validRouters_1', 'validRouters_2', 'validRouters_3'])
Phi
[i]Type for validRouters

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_119(bool) -> validRouters_1[_routerAddress_1]
INDEX
[i]Type for REF_119

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_341(bool) = REF_119 == True
[i]Type for TMP_341

Name: TMP_341 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_342(None) = SOLIDITY_CALL require(bool,string)(TMP_341,Invalid router passed in)
[i]Type for TMP_342

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_343(bool) = HIGH_LEVEL_CALL, dest:yusdToken_7(IERC20), function:approve, arguments:['_routerAddress_1', '0']  
High Call: approve
Running querryfc
[i]Type for TMP_343

Name: TMP_343 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_8(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_7'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_344(None) = SOLIDITY_CALL require(bool)(TMP_343)
[i]Type for TMP_344

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_345(bool) = HIGH_LEVEL_CALL, dest:yusdToken_8(IERC20), function:increaseAllowance, arguments:['_routerAddress_1', '_YUSDToSell_1']  
High Call: increaseAllowance
Running querryfc
[i]Type for TMP_345

Name: TMP_345 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_9(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_8'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_346(None) = SOLIDITY_CALL require(bool)(TMP_345)
[i]Type for TMP_346

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
lastBuybackTime_3(uint256) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for lastBuybackTime

Name: lastBuybackTime Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
TMP_347 = CONVERT _routerAddress_1 to IsYETIRouter
Converting _routerAddress_1

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
sYETIRouter
[i]Type for TMP_347

Name: TMP_347 Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: sYETIRouter
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_348 = CONVERT this to address
Converting this
3
[i]Type for TMP_348

Name: TMP_348 Function: _buyBack
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_349(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_347(IsYETIRouter), function:swap, arguments:['_YUSDToSell_1', '_YETIOutMin_1', 'TMP_348']  
High Call: swap
Running querryfc
Written func info: sYETIRouter, swap
Handling balance function!
-987
Finding type for hlc_0(uint256[] ... )
[i]Type for TMP_349

Name: TMP_349 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amounts_1(uint256[]) := TMP_349(uint256[])
asgn
init
end
_______________

Name: TMP_349 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for amounts

Name: amounts Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
REF_123(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_123

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_350(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['REF_123', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_350

Name: TMP_350 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_125(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_125

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_351(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_350,REF_125)
init
end
init
end
init
end
_______________

Name: PIC_34 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_351

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastBuybackPrice_1(uint256) := TMP_351(uint256)
asgn
init
end
_______________

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for lastBuybackPrice

Name: lastBuybackPrice Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
REF_126(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_126

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_127(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_127

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _routerAddress_1 Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
Phid

Name: _YUSDToSell_1 Function: _buyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: _YETIOutMin_1 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_routerAddress_1(address) := ϕ(['_routerAddress_1', '_routerAddress_1'])
Phi
[i]Type for _routerAddress

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
XXXX
_YUSDToSell_1(uint256) := ϕ(['_YUSDToSell_1', 'YUSDToSell_1'])
Phi
[i]Type for _YUSDToSell

Name: _YUSDToSell Function: _buyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_YETIOutMin_1(uint256) := ϕ(['_YETIOutMin_1'])
Phi
[i]Type for _YETIOutMin

Name: _YETIOutMin Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_7(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
validRouters_1(mapping(address => bool)) := ϕ(['validRouters_0', 'validRouters_1', 'validRouters_2', 'validRouters_3'])
Phi
[i]Type for validRouters

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_119(bool) -> validRouters_1[_routerAddress_1]
INDEX
[i]Type for REF_119

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_341(bool) = REF_119 == True
[i]Type for TMP_341

Name: TMP_341 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_342(None) = SOLIDITY_CALL require(bool,string)(TMP_341,Invalid router passed in)
[i]Type for TMP_342

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_343(bool) = HIGH_LEVEL_CALL, dest:yusdToken_7(IERC20), function:approve, arguments:['_routerAddress_1', '0']  
High Call: approve
Running querryfc
[i]Type for TMP_343

Name: TMP_343 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_8(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_7'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_344(None) = SOLIDITY_CALL require(bool)(TMP_343)
[i]Type for TMP_344

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_345(bool) = HIGH_LEVEL_CALL, dest:yusdToken_8(IERC20), function:increaseAllowance, arguments:['_routerAddress_1', '_YUSDToSell_1']  
High Call: increaseAllowance
Running querryfc
[i]Type for TMP_345

Name: TMP_345 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_9(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_8'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_346(None) = SOLIDITY_CALL require(bool)(TMP_345)
[i]Type for TMP_346

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
lastBuybackTime_3(uint256) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for lastBuybackTime

Name: lastBuybackTime Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
TMP_347 = CONVERT _routerAddress_1 to IsYETIRouter
Converting _routerAddress_1

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
sYETIRouter
[i]Type for TMP_347

Name: TMP_347 Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: sYETIRouter
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_348 = CONVERT this to address
Converting this
3
[i]Type for TMP_348

Name: TMP_348 Function: _buyBack
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_349(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_347(IsYETIRouter), function:swap, arguments:['_YUSDToSell_1', '_YETIOutMin_1', 'TMP_348']  
High Call: swap
Running querryfc
Written func info: sYETIRouter, swap
Handling balance function!
-987
Finding type for hlc_1(uint256[] ... )
[i]Type for TMP_349

Name: TMP_349 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amounts_1(uint256[]) := TMP_349(uint256[])
asgn
init
end
_______________

Name: TMP_349 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for amounts

Name: amounts Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
REF_123(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_123

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_350(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['REF_123', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_350

Name: TMP_350 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_125(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_125

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_351(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_350,REF_125)
init
end
init
end
init
end
_______________

Name: PIC_34 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_351

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastBuybackPrice_1(uint256) := TMP_351(uint256)
asgn
init
end
_______________

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for lastBuybackPrice

Name: lastBuybackPrice Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
REF_126(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_126

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_127(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_127

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX


lastBuybackTime_1(uint256) := ϕ(['lastBuybackTime_0', 'lastBuybackTime_2', 'lastBuybackTime_3'])
yusdToken_5(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
TMP_331 = CONVERT this to address
TMP_332(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_5(IERC20), function:balanceOf, arguments:['TMP_331']  
lastBuybackTime_2(uint256) := ϕ(['lastBuybackTime_1', 'lastBuybackTime_2', 'lastBuybackTime_3'])
yusdToken_6(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_5'])
YUSDBalance_1(uint256) := TMP_332(uint256)
TMP_333(bool) = YUSDBalance_1 != 0
TMP_334(None) = SOLIDITY_CALL require(bool,string)(TMP_333,No YUSD in contract)
TMP_335(uint256) = lastBuybackTime_2 + 608400
TMP_336(bool) = TMP_335 < block.timestamp
TMP_337(None) = SOLIDITY_CALL require(bool,string)(TMP_336,Can only publicly buy back every 169 hours)
TMP_338(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['YUSDBalance_1', '5'] 
TMP_339(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_338,100)
YUSDToSell_1(uint256) := TMP_339(uint256)
INTERNAL_CALL, sYETIToken._buyBack(address,uint256,uint256)(_routerAddress_1,YUSDToSell_1,0)


Propogating parameters and globals to SSA variables...
End popogation

Name: lastBuybackTime Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yusdToken Function: publicBuyBack
Num: -1
Den: -1
Address: 6
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
lastBuybackTime_1(uint256) := ϕ(['lastBuybackTime_0', 'lastBuybackTime_2', 'lastBuybackTime_3'])
Phi
[i]Type for lastBuybackTime

Name: lastBuybackTime Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_5(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: publicBuyBack
Num: -1
Den: -1
Address: 6
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: YUSDBalance, Num: 1
Globalname: YUSDBalance
End popogation

Name: lastBuybackTime Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yusdToken Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_331 = CONVERT this to address
Converting this
3
[i]Type for TMP_331

Name: TMP_331 Function: publicBuyBack
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_332(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_5(IERC20), function:balanceOf, arguments:['TMP_331']  
High Call: balanceOf
Running querryfc
Written func info: ERC20, balanceOf
Handling balance function!
6
[i]Type for TMP_332

Name: TMP_332 Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
lastBuybackTime_2(uint256) := ϕ(['lastBuybackTime_1', 'lastBuybackTime_2', 'lastBuybackTime_3'])
Phi
[i]Type for lastBuybackTime

Name: lastBuybackTime Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_6(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_5'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
YUSDBalance_1(uint256) := TMP_332(uint256)
asgn
init
end
_______________

Name: TMP_332 Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for YUSDBalance

Name: YUSDBalance Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_333(bool) = YUSDBalance_1 != 0
[i]Type for TMP_333

Name: TMP_333 Function: publicBuyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_334(None) = SOLIDITY_CALL require(bool,string)(TMP_333,No YUSD in contract)
[i]Type for TMP_334

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_335(uint256) = lastBuybackTime_2 + 608400
init
end
init
end
init
end
_______________

Name: 608400 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_335

Name: TMP_335 Function: publicBuyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_336(bool) = TMP_335 < block.timestamp
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_336

Name: TMP_336 Function: publicBuyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_337(None) = SOLIDITY_CALL require(bool,string)(TMP_336,Can only publicly buy back every 169 hours)
[i]Type for TMP_337

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: YUSDToSell, Num: 1
Globalname: YUSDToSell
End popogation
TMP_338(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['YUSDBalance_1', '5'] 
testing mul...
init
end
init
end

Name: YUSDBalance Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: 5 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: * rnorm: 0
init
end
_______________

Name: YUSDBalance Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_338

Name: TMP_338 Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_339(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_338,100)
init
end
init
end
[[6], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: None
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 2, None, [], -1, 'u', 'u']

Name: b Function: None
Num: -1
Den: -1
Address: u
Norm: 2
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: 2
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: 2
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: 2
init
end
_______________

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: 2
init
end
_______________

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
6
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: 2
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: 2
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: 2
init
end
_______________

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: 2
init
end
_______________

Name: a Function: div
Num: 6
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
6
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_339

Name: TMP_339 Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
YUSDToSell_1(uint256) := TMP_339(uint256)
asgn
init
end
_______________

Name: TMP_339 Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for YUSDToSell

Name: YUSDToSell Function: publicBuyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, sYETIToken._buyBack(address,uint256,uint256)(_routerAddress_1,YUSDToSell_1,0)
init
end
init
end
init
end
[[], [], 'u', '_routerAddress', [], -1, -987, 'u']

Name: _routerAddress Function: None
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
[[6], [-1], -2, None, [], 0, 'u', 'u']

Name: _YUSDToSell Function: None
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: _YETIOutMin Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _routerAddress_1 Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
Phid

Name: _YUSDToSell_1 Function: _buyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: _YETIOutMin_1 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_routerAddress_1(address) := ϕ(['_routerAddress_1', '_routerAddress_1'])
Phi
[i]Type for _routerAddress

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
XXXX
_YUSDToSell_1(uint256) := ϕ(['_YUSDToSell_1', 'YUSDToSell_1'])
Phi
[i]Type for _YUSDToSell

Name: _YUSDToSell Function: _buyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_YETIOutMin_1(uint256) := ϕ(['_YETIOutMin_1'])
Phi
[i]Type for _YETIOutMin

Name: _YETIOutMin Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_7(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
validRouters_1(mapping(address => bool)) := ϕ(['validRouters_0', 'validRouters_1', 'validRouters_2', 'validRouters_3'])
Phi
[i]Type for validRouters

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_119(bool) -> validRouters_1[_routerAddress_1]
INDEX
[i]Type for REF_119

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_341(bool) = REF_119 == True
[i]Type for TMP_341

Name: TMP_341 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_342(None) = SOLIDITY_CALL require(bool,string)(TMP_341,Invalid router passed in)
[i]Type for TMP_342

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_343(bool) = HIGH_LEVEL_CALL, dest:yusdToken_7(IERC20), function:approve, arguments:['_routerAddress_1', '0']  
High Call: approve
Running querryfc
[i]Type for TMP_343

Name: TMP_343 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_8(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_7'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_344(None) = SOLIDITY_CALL require(bool)(TMP_343)
[i]Type for TMP_344

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_345(bool) = HIGH_LEVEL_CALL, dest:yusdToken_8(IERC20), function:increaseAllowance, arguments:['_routerAddress_1', '_YUSDToSell_1']  
High Call: increaseAllowance
Running querryfc
[i]Type for TMP_345

Name: TMP_345 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_9(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_8'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_346(None) = SOLIDITY_CALL require(bool)(TMP_345)
[i]Type for TMP_346

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
lastBuybackTime_3(uint256) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for lastBuybackTime

Name: lastBuybackTime Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
TMP_347 = CONVERT _routerAddress_1 to IsYETIRouter
Converting _routerAddress_1

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
sYETIRouter
[i]Type for TMP_347

Name: TMP_347 Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: sYETIRouter
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_348 = CONVERT this to address
Converting this
3
[i]Type for TMP_348

Name: TMP_348 Function: _buyBack
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_349(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_347(IsYETIRouter), function:swap, arguments:['_YUSDToSell_1', '_YETIOutMin_1', 'TMP_348']  
High Call: swap
Running querryfc
Written func info: sYETIRouter, swap
Handling balance function!
-987
Finding type for hlc_0(uint256[] ... )
[i]Type for TMP_349

Name: TMP_349 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amounts_1(uint256[]) := TMP_349(uint256[])
asgn
init
end
_______________

Name: TMP_349 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for amounts

Name: amounts Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
REF_123(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_123

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_350(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['REF_123', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_350

Name: TMP_350 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_125(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_125

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_351(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_350,REF_125)
init
end
init
end
init
end
_______________

Name: PIC_34 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_351

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastBuybackPrice_1(uint256) := TMP_351(uint256)
asgn
init
end
_______________

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for lastBuybackPrice

Name: lastBuybackPrice Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
REF_126(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_126

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_127(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_127

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: _routerAddress_1 Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
Phid

Name: _YUSDToSell_1 Function: _buyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: _YETIOutMin_1 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_routerAddress_1(address) := ϕ(['_routerAddress_1', '_routerAddress_1'])
Phi
[i]Type for _routerAddress

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
XXXX
_YUSDToSell_1(uint256) := ϕ(['_YUSDToSell_1', 'YUSDToSell_1'])
Phi
[i]Type for _YUSDToSell

Name: _YUSDToSell Function: _buyBack
Num: 6
Den: -1
Address: u
Norm: -2
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
_YETIOutMin_1(uint256) := ϕ(['_YETIOutMin_1'])
Phi
[i]Type for _YETIOutMin

Name: _YETIOutMin Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_7(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
validRouters_1(mapping(address => bool)) := ϕ(['validRouters_0', 'validRouters_1', 'validRouters_2', 'validRouters_3'])
Phi
[i]Type for validRouters

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_119(bool) -> validRouters_1[_routerAddress_1]
INDEX
[i]Type for REF_119

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_341(bool) = REF_119 == True
[i]Type for TMP_341

Name: TMP_341 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_342(None) = SOLIDITY_CALL require(bool,string)(TMP_341,Invalid router passed in)
[i]Type for TMP_342

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_343(bool) = HIGH_LEVEL_CALL, dest:yusdToken_7(IERC20), function:approve, arguments:['_routerAddress_1', '0']  
High Call: approve
Running querryfc
[i]Type for TMP_343

Name: TMP_343 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_8(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_7'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_344(None) = SOLIDITY_CALL require(bool)(TMP_343)
[i]Type for TMP_344

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_345(bool) = HIGH_LEVEL_CALL, dest:yusdToken_8(IERC20), function:increaseAllowance, arguments:['_routerAddress_1', '_YUSDToSell_1']  
High Call: increaseAllowance
Running querryfc
[i]Type for TMP_345

Name: TMP_345 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_9(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_8'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_346(None) = SOLIDITY_CALL require(bool)(TMP_345)
[i]Type for TMP_346

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
lastBuybackTime_3(uint256) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for lastBuybackTime

Name: lastBuybackTime Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
TMP_347 = CONVERT _routerAddress_1 to IsYETIRouter
Converting _routerAddress_1

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: _routerAddress Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: _routerAddress
Value: u
Fields: 
Finance Type: undef
sYETIRouter
[i]Type for TMP_347

Name: TMP_347 Function: _buyBack
Num: 
Den: 
Address: -987
Norm: u
LF: sYETIRouter
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_348 = CONVERT this to address
Converting this
3
[i]Type for TMP_348

Name: TMP_348 Function: _buyBack
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_349(uint256[]) = HIGH_LEVEL_CALL, dest:TMP_347(IsYETIRouter), function:swap, arguments:['_YUSDToSell_1', '_YETIOutMin_1', 'TMP_348']  
High Call: swap
Running querryfc
Written func info: sYETIRouter, swap
Handling balance function!
-987
Finding type for hlc_1(uint256[] ... )
[i]Type for TMP_349

Name: TMP_349 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
amounts_1(uint256[]) := TMP_349(uint256[])
asgn
init
end
_______________

Name: TMP_349 Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for amounts

Name: amounts Function: _buyBack
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
REF_123(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_123

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_350(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['REF_123', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_350

Name: TMP_350 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_125(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_125

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
TMP_351(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_350,REF_125)
init
end
init
end
init
end
_______________

Name: PIC_34 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_351

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastBuybackPrice_1(uint256) := TMP_351(uint256)
asgn
init
end
_______________

Name: TMP_351 Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for lastBuybackPrice

Name: lastBuybackPrice Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amounts, Num: 1
Globalname: amounts
End popogation
REF_126(uint256) -> amounts_1[0]
INDEX
[i]Type for REF_126

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
REF_127(uint256) -> amounts_1[1]
INDEX
[i]Type for REF_127

Name: amounts Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



_buyBack
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



rebase


effectiveYetiTokenBalance_7(uint256) := ϕ(['effectiveYetiTokenBalance_0', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
lastRebaseTime_1(uint256) := ϕ(['lastRebaseTime_0', 'lastRebaseTime_2'])
transferRatio_1(uint256) := ϕ(['transferRatio_4', 'transferRatio_0', 'transferRatio_5'])
yetiToken_6(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3', 'yetiToken_0'])
TMP_353(uint256) = lastRebaseTime_1 + 28800
TMP_354(bool) = block.timestamp >= TMP_353
TMP_355(None) = SOLIDITY_CALL require(bool,string)(TMP_354,Can only rebase every 8 hours)
TMP_356 = CONVERT this to address
TMP_357(uint256) = HIGH_LEVEL_CALL, dest:yetiToken_6(IYETIToken), function:balanceOf, arguments:['TMP_356']  
effectiveYetiTokenBalance_8(uint256) := ϕ(['effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_7', 'effectiveYetiTokenBalance_6'])
transferRatio_2(uint256) := ϕ(['transferRatio_4', 'transferRatio_1', 'transferRatio_5'])
yetiToken_7(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_6', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3'])
yetiTokenBalance_1(uint256) := TMP_357(uint256)
TMP_358(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.sub(uint256,uint256), arguments:['yetiTokenBalance_1', 'effectiveYetiTokenBalance_8'] 
adjustedYetiTokenBalance_1(uint256) := TMP_358(uint256)
TMP_359(uint256) = INTERNAL_CALL, sYETIToken._getValueOfContract(uint256)(adjustedYetiTokenBalance_1)
valueOfContract_1(uint256) := TMP_359(uint256)
TMP_360(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['valueOfContract_1', 'transferRatio_3'] 
TMP_361(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_360,1000000000000000000)
amountYetiToRebase_1(uint256) := TMP_361(uint256)
TMP_362(bool) = amountYetiToRebase_1 > adjustedYetiTokenBalance_1
CONDITION TMP_362
amountYetiToRebase_2(uint256) := adjustedYetiTokenBalance_1(uint256)
amountYetiToRebase_3(uint256) := ϕ(['amountYetiToRebase_1', 'amountYetiToRebase_2'])
TMP_363(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.add(uint256,uint256), arguments:['effectiveYetiTokenBalance_10', 'amountYetiToRebase_3'] 
effectiveYetiTokenBalance_11(uint256) := TMP_363(uint256)
lastRebaseTime_2(uint256) := block.timestamp(uint256)
Emit Rebase(amountYetiToRebase_3)


Propogating parameters and globals to SSA variables...
End popogation
Name: effectiveYetiTokenBalance, Num: 7
Globalname: effectiveYetiTokenBalance
global...

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: lastRebaseTime, Num: 1
Globalname: lastRebaseTime
global...

Name: PIC_13 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: transferRatio, Num: 1
Globalname: transferRatio
global...

Name: PIC_14 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: yetiToken, Num: 6
Globalname: yetiToken
global...

Name: yetiToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
effectiveYetiTokenBalance_7(uint256) := ϕ(['effectiveYetiTokenBalance_0', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
Phi
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastRebaseTime_1(uint256) := ϕ(['lastRebaseTime_0', 'lastRebaseTime_2'])
Phi
[i]Type for lastRebaseTime

Name: lastRebaseTime Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferRatio_1(uint256) := ϕ(['transferRatio_4', 'transferRatio_0', 'transferRatio_5'])
Phi
[i]Type for transferRatio

Name: transferRatio Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yetiToken_6(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3', 'yetiToken_0'])
Phi
[i]Type for yetiToken

Name: yetiToken Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_353(uint256) = lastRebaseTime_1 + 28800
init
end
init
end
init
end
_______________

Name: 28800 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_353

Name: TMP_353 Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_354(bool) = block.timestamp >= TMP_353
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_354

Name: TMP_354 Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_355(None) = SOLIDITY_CALL require(bool,string)(TMP_354,Can only rebase every 8 hours)
[i]Type for TMP_355

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: yetiTokenBalance, Num: 1
Globalname: yetiTokenBalance
End popogation
Name: effectiveYetiTokenBalance, Num: 8
Globalname: effectiveYetiTokenBalance
global...

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: transferRatio, Num: 2
Globalname: transferRatio
global...

Name: PIC_14 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: yetiToken, Num: 7
Globalname: yetiToken
global...

Name: yetiToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_356 = CONVERT this to address
Converting this
3
[i]Type for TMP_356

Name: TMP_356 Function: rebase
Num: -1
Den: -1
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_357(uint256) = HIGH_LEVEL_CALL, dest:yetiToken_6(IYETIToken), function:balanceOf, arguments:['TMP_356']  
High Call: balanceOf
Running querryfc
Written func info: YETIToken, balanceOf
Handling balance function!
u
prev address? u
global assignment: 7
7
[i]Type for TMP_357

Name: TMP_357 Function: rebase
Num: 7
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
effectiveYetiTokenBalance_8(uint256) := ϕ(['effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_7', 'effectiveYetiTokenBalance_6'])
Phi
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferRatio_2(uint256) := ϕ(['transferRatio_4', 'transferRatio_1', 'transferRatio_5'])
Phi
[i]Type for transferRatio

Name: transferRatio Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yetiToken_7(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_6', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3'])
Phi
[i]Type for yetiToken

Name: yetiToken Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yetiTokenBalance_1(uint256) := TMP_357(uint256)
asgn
init
end
_______________

Name: TMP_357 Function: rebase
Num: 7
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for yetiTokenBalance

Name: yetiTokenBalance Function: rebase
Num: 7
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: adjustedYetiTokenBalance, Num: 1
Globalname: adjustedYetiTokenBalance
End popogation
TMP_358(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.sub(uint256,uint256), arguments:['yetiTokenBalance_1', 'effectiveYetiTokenBalance_8'] 
init
end
init
end
init
end
_______________

Name: effectiveYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_358

Name: TMP_358 Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
adjustedYetiTokenBalance_1(uint256) := TMP_358(uint256)
asgn
init
end
_______________

Name: TMP_358 Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for adjustedYetiTokenBalance

Name: adjustedYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: valueOfContract, Num: 1
Globalname: valueOfContract
End popogation
TMP_359(uint256) = INTERNAL_CALL, sYETIToken._getValueOfContract(uint256)(adjustedYetiTokenBalance_1)
init
end
[[-1], [-1], 'u', None, [], 0, 'u', 'u']

Name: _adjustedYetiTokenBalance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation

Name: _adjustedYetiTokenBalance_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid
Name: lastBuybackPrice, Num: 2
Globalname: lastBuybackPrice
global...

Name: lastBuybackPrice Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: yusdToken, Num: 10
Globalname: yusdToken
global...

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_adjustedYetiTokenBalance_1(uint256) := ϕ(['adjustedYetiTokenBalance_1'])
Phi
[i]Type for _adjustedYetiTokenBalance

Name: _adjustedYetiTokenBalance Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
lastBuybackPrice_2(uint256) := ϕ(['lastBuybackPrice_1', 'lastBuybackPrice_4', 'lastBuybackPrice_0'])
Phi
[i]Type for lastBuybackPrice

Name: lastBuybackPrice Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_10(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: yusdTokenBalance, Num: 1
Globalname: yusdTokenBalance
End popogation
Name: lastBuybackPrice, Num: 3
Globalname: lastBuybackPrice
global...

Name: lastBuybackPrice Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: yusdToken, Num: 11
Globalname: yusdToken
global...

Name: yusdToken Function: setAddresses
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_365 = CONVERT this to address
Converting this
3
[i]Type for TMP_365

Name: TMP_365 Function: _getValueOfContract
Num: -1
Den: -1
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_366(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_10(IERC20), function:balanceOf, arguments:['TMP_365']  
High Call: balanceOf
Running querryfc
Written func info: ERC20, balanceOf
Handling balance function!
u
prev address? u
global assignment: 8
8
[i]Type for TMP_366

Name: TMP_366 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
lastBuybackPrice_3(uint256) := ϕ(['lastBuybackPrice_1', 'lastBuybackPrice_2', 'lastBuybackPrice_4'])
Phi
[i]Type for lastBuybackPrice

Name: lastBuybackPrice Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_11(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_10'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdTokenBalance_1(uint256) := TMP_366(uint256)
asgn
init
end
_______________

Name: TMP_366 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for yusdTokenBalance

Name: yusdTokenBalance Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_367(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['yusdTokenBalance_1', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: yusdTokenBalance Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Error with TMP_367 in function _getValueOfContract
Error with: TMP_367 in function _getValueOfContract
lnorm: * rnorm: 18
init
end
_______________

Name: yusdTokenBalance Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_367

Name: TMP_367 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_368(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_367,lastBuybackPrice_3)
init
end
init
end
[[8], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: None
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: b Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
8
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
8
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_368

Name: TMP_368 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_369(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.add(uint256,uint256), arguments:['TMP_368', '_adjustedYetiTokenBalance_1'] 
init
end
init
end
Finance type key: (0, 0)
init
end
_______________

Name: TMP_368 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_369

Name: TMP_369 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_369
RETURN
init
end

Name: TMP_369 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation

Name: _adjustedYetiTokenBalance_1 Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: lastBuybackPrice Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yusdToken Function: _getValueOfContract
Num: -1
Den: -1
Address: 8
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_adjustedYetiTokenBalance_1(uint256) := ϕ(['adjustedYetiTokenBalance_1'])
Phi
[i]Type for _adjustedYetiTokenBalance

Name: _adjustedYetiTokenBalance Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
lastBuybackPrice_2(uint256) := ϕ(['lastBuybackPrice_1', 'lastBuybackPrice_4', 'lastBuybackPrice_0'])
Phi
[i]Type for lastBuybackPrice

Name: lastBuybackPrice Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_10(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_0', 'yusdToken_9'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _getValueOfContract
Num: -1
Den: -1
Address: 8
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: yusdTokenBalance, Num: 1
Globalname: yusdTokenBalance
End popogation

Name: lastBuybackPrice Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yusdToken Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_365 = CONVERT this to address
Converting this
3
[i]Type for TMP_365

Name: TMP_365 Function: _getValueOfContract
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_366(uint256) = HIGH_LEVEL_CALL, dest:yusdToken_10(IERC20), function:balanceOf, arguments:['TMP_365']  
High Call: balanceOf
Running querryfc
Written func info: ERC20, balanceOf
Handling balance function!
8
[i]Type for TMP_366

Name: TMP_366 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
lastBuybackPrice_3(uint256) := ϕ(['lastBuybackPrice_1', 'lastBuybackPrice_2', 'lastBuybackPrice_4'])
Phi
[i]Type for lastBuybackPrice

Name: lastBuybackPrice Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdToken_11(IERC20) := ϕ(['yusdToken_11', 'yusdToken_6', 'yusdToken_1', 'yusdToken_4', 'yusdToken_9', 'yusdToken_10'])
Phi
[i]Type for yusdToken

Name: yusdToken Function: _getValueOfContract
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yusdTokenBalance_1(uint256) := TMP_366(uint256)
asgn
init
end
_______________

Name: TMP_366 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for yusdTokenBalance

Name: yusdTokenBalance Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_367(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['yusdTokenBalance_1', '1000000000000000000'] 
testing mul...
init
end
init
end

Name: yusdTokenBalance Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: * rnorm: 18
init
end
_______________

Name: yusdTokenBalance Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_367

Name: TMP_367 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_368(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_367,lastBuybackPrice_3)
init
end
init
end
[[8], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: None
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: b Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
8
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
8
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_368

Name: TMP_368 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_369(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.add(uint256,uint256), arguments:['TMP_368', '_adjustedYetiTokenBalance_1'] 
init
end
init
end
Finance type key: (0, 0)
init
end
_______________

Name: TMP_368 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_369

Name: TMP_369 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_369
RETURN
init
end

Name: TMP_369 Function: _getValueOfContract
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_359

Name: TMP_359 Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
valueOfContract_1(uint256) := TMP_359(uint256)
asgn
init
end
_______________

Name: TMP_359 Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for valueOfContract

Name: valueOfContract Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: transferRatio, Num: 3
Globalname: transferRatio
global...

Name: PIC_14 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: amountYetiToRebase, Num: 1
Globalname: amountYetiToRebase
End popogation
TMP_360(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['valueOfContract_1', 'transferRatio_3'] 
testing mul...
init
end
init
end

Name: valueOfContract Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: transferRatio Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: valueOfContract Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_360

Name: TMP_360 Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_361(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_360,1000000000000000000)
init
end
init
end
[[8], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: None
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 18, None, [], -1, 'u', 'u']

Name: b Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: 18
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: 18
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
8
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: 18
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: 18
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
8
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_361

Name: TMP_361 Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
amountYetiToRebase_1(uint256) := TMP_361(uint256)
asgn
init
end
_______________

Name: TMP_361 Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for amountYetiToRebase

Name: amountYetiToRebase Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_362(bool) = amountYetiToRebase_1 > adjustedYetiTokenBalance_1
init
end
init
end
lnorm: -18 rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_362

Name: TMP_362 Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amountYetiToRebase, Num: 2
Globalname: amountYetiToRebase
End popogation
amountYetiToRebase_2(uint256) := adjustedYetiTokenBalance_1(uint256)
asgn
init
end
_______________

Name: adjustedYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for amountYetiToRebase

Name: amountYetiToRebase Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: amountYetiToRebase, Num: 3
Globalname: amountYetiToRebase

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
amountYetiToRebase_3(uint256) := ϕ(['amountYetiToRebase_1', 'amountYetiToRebase_2'])
Phi
init
end
_______________

Name: amountYetiToRebase Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for amountYetiToRebase

Name: amountYetiToRebase Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: effectiveYetiTokenBalance, Num: 10
Globalname: effectiveYetiTokenBalance
global...

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Name: effectiveYetiTokenBalance, Num: 11
Globalname: effectiveYetiTokenBalance
global...

Name: effectiveYetiTokenBalance Function: mint
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
TMP_363(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.add(uint256,uint256), arguments:['effectiveYetiTokenBalance_10', 'amountYetiToRebase_3'] 
init
end
init
end
init
end
_______________

Name: amountYetiToRebase Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_363

Name: TMP_363 Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
effectiveYetiTokenBalance_11(uint256) := TMP_363(uint256)
asgn
init
end
_______________

Name: TMP_363 Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: lastRebaseTime, Num: 2
Globalname: lastRebaseTime
global...

Name: PIC_13 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
lastRebaseTime_2(uint256) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for lastRebaseTime

Name: lastRebaseTime Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


effectiveYetiTokenBalance_7(uint256) := ϕ(['effectiveYetiTokenBalance_0', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
lastRebaseTime_1(uint256) := ϕ(['lastRebaseTime_0', 'lastRebaseTime_2'])
transferRatio_1(uint256) := ϕ(['transferRatio_4', 'transferRatio_0', 'transferRatio_5'])
yetiToken_6(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3', 'yetiToken_0'])
TMP_353(uint256) = lastRebaseTime_1 + 28800
TMP_354(bool) = block.timestamp >= TMP_353
TMP_355(None) = SOLIDITY_CALL require(bool,string)(TMP_354,Can only rebase every 8 hours)
TMP_356 = CONVERT this to address
TMP_357(uint256) = HIGH_LEVEL_CALL, dest:yetiToken_6(IYETIToken), function:balanceOf, arguments:['TMP_356']  
effectiveYetiTokenBalance_8(uint256) := ϕ(['effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_7', 'effectiveYetiTokenBalance_6'])
transferRatio_2(uint256) := ϕ(['transferRatio_4', 'transferRatio_1', 'transferRatio_5'])
yetiToken_7(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_6', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3'])
yetiTokenBalance_1(uint256) := TMP_357(uint256)
TMP_358(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.sub(uint256,uint256), arguments:['yetiTokenBalance_1', 'effectiveYetiTokenBalance_8'] 
adjustedYetiTokenBalance_1(uint256) := TMP_358(uint256)
TMP_359(uint256) = INTERNAL_CALL, sYETIToken._getValueOfContract(uint256)(adjustedYetiTokenBalance_1)
valueOfContract_1(uint256) := TMP_359(uint256)
TMP_360(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['valueOfContract_1', 'transferRatio_3'] 
TMP_361(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_360,1000000000000000000)
amountYetiToRebase_1(uint256) := TMP_361(uint256)
TMP_362(bool) = amountYetiToRebase_1 > adjustedYetiTokenBalance_1
CONDITION TMP_362
amountYetiToRebase_2(uint256) := adjustedYetiTokenBalance_1(uint256)
amountYetiToRebase_3(uint256) := ϕ(['amountYetiToRebase_1', 'amountYetiToRebase_2'])
TMP_363(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.add(uint256,uint256), arguments:['effectiveYetiTokenBalance_10', 'amountYetiToRebase_3'] 
effectiveYetiTokenBalance_11(uint256) := TMP_363(uint256)
lastRebaseTime_2(uint256) := block.timestamp(uint256)
Emit Rebase(amountYetiToRebase_3)


Propogating parameters and globals to SSA variables...
End popogation

Name: effectiveYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: lastRebaseTime Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: transferRatio Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yetiToken Function: rebase
Num: -1
Den: -1
Address: 7
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
effectiveYetiTokenBalance_7(uint256) := ϕ(['effectiveYetiTokenBalance_0', 'effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_6'])
Phi
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lastRebaseTime_1(uint256) := ϕ(['lastRebaseTime_0', 'lastRebaseTime_2'])
Phi
[i]Type for lastRebaseTime

Name: lastRebaseTime Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferRatio_1(uint256) := ϕ(['transferRatio_4', 'transferRatio_0', 'transferRatio_5'])
Phi
[i]Type for transferRatio

Name: transferRatio Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yetiToken_6(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3', 'yetiToken_0'])
Phi
[i]Type for yetiToken

Name: yetiToken Function: rebase
Num: -1
Den: -1
Address: 7
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_353(uint256) = lastRebaseTime_1 + 28800
init
end
init
end
init
end
_______________

Name: 28800 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_353

Name: TMP_353 Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_354(bool) = block.timestamp >= TMP_353
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_354

Name: TMP_354 Function: rebase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_355(None) = SOLIDITY_CALL require(bool,string)(TMP_354,Can only rebase every 8 hours)
[i]Type for TMP_355

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: yetiTokenBalance, Num: 1
Globalname: yetiTokenBalance
End popogation

Name: effectiveYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: transferRatio Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: yetiToken Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_356 = CONVERT this to address
Converting this
3
[i]Type for TMP_356

Name: TMP_356 Function: rebase
Num: 
Den: 
Address: 3
Norm: u
LF: sYETIToken
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_357(uint256) = HIGH_LEVEL_CALL, dest:yetiToken_6(IYETIToken), function:balanceOf, arguments:['TMP_356']  
High Call: balanceOf
Running querryfc
Written func info: YETIToken, balanceOf
Handling balance function!
7
[i]Type for TMP_357

Name: TMP_357 Function: rebase
Num: 7
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
effectiveYetiTokenBalance_8(uint256) := ϕ(['effectiveYetiTokenBalance_11', 'effectiveYetiTokenBalance_3', 'effectiveYetiTokenBalance_7', 'effectiveYetiTokenBalance_6'])
Phi
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
transferRatio_2(uint256) := ϕ(['transferRatio_4', 'transferRatio_1', 'transferRatio_5'])
Phi
[i]Type for transferRatio

Name: transferRatio Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yetiToken_7(IYETIToken) := ϕ(['yetiToken_5', 'yetiToken_6', 'yetiToken_1', 'yetiToken_7', 'yetiToken_3'])
Phi
[i]Type for yetiToken

Name: yetiToken Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
yetiTokenBalance_1(uint256) := TMP_357(uint256)
asgn
init
end
_______________

Name: TMP_357 Function: rebase
Num: 7
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for yetiTokenBalance

Name: yetiTokenBalance Function: rebase
Num: 7
Den: -1
Address: u
Norm: *
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: adjustedYetiTokenBalance, Num: 1
Globalname: adjustedYetiTokenBalance
End popogation
TMP_358(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.sub(uint256,uint256), arguments:['yetiTokenBalance_1', 'effectiveYetiTokenBalance_8'] 
init
end
init
end
init
end
_______________

Name: effectiveYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_358

Name: TMP_358 Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
adjustedYetiTokenBalance_1(uint256) := TMP_358(uint256)
asgn
init
end
_______________

Name: TMP_358 Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for adjustedYetiTokenBalance

Name: adjustedYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: valueOfContract, Num: 1
Globalname: valueOfContract
End popogation
TMP_359(uint256) = INTERNAL_CALL, sYETIToken._getValueOfContract(uint256)(adjustedYetiTokenBalance_1)
init
end
init
end
_______________

Name: PIC_47 Function: None
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_359

Name: TMP_359 Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
valueOfContract_1(uint256) := TMP_359(uint256)
asgn
init
end
_______________

Name: TMP_359 Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for valueOfContract

Name: valueOfContract Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: amountYetiToRebase, Num: 1
Globalname: amountYetiToRebase
End popogation
TMP_360(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.mul(uint256,uint256), arguments:['valueOfContract_1', 'transferRatio_3'] 
testing mul...
init
end
init
end

Name: valueOfContract Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: transferRatio Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: valueOfContract Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_360

Name: TMP_360 Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_361(uint256) = INTERNAL_CALL, sYETIToken.div(uint256,uint256)(TMP_360,1000000000000000000)
init
end
init
end
[[8], [-1], 'u', None, [], 0, 'u', 'u']

Name: a Function: None
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
[[-1], [-1], 18, None, [], -1, 'u', 'u']

Name: b Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: 18
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: 18
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
8
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
Propogating parameters and globals to SSA variables...
End popogation

Name: a_1 Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid

Name: b_1 Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
a_1(uint256) := ϕ(['TMP_350', 'TMP_367', 'TMP_360', 'TMP_338'])
Phi
[i]Type for a

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
b_1(uint256) := ϕ(['lastBuybackPrice_3', 'REF_125'])
Phi
[i]Type for b

Name: b Function: div
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_380(bool) = b_1 != 0
[i]Type for TMP_380

Name: TMP_380 Function: div
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_381(None) = SOLIDITY_CALL require(bool,string)(TMP_380,BoringMath: Div By 0)
[i]Type for TMP_381

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_382(uint256) = a_1 / b_1
init
end
init
end
lnorm: u rnorm: 18
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
init
end
init
end
lnorm: u rnorm: 18
init
end
_______________

Name: a Function: div
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
8
-1
[i]Type for TMP_382

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
RETURN TMP_382
RETURN
init
end

Name: TMP_382 Function: div
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_361

Name: TMP_361 Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
amountYetiToRebase_1(uint256) := TMP_361(uint256)
asgn
init
end
_______________

Name: TMP_361 Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for amountYetiToRebase

Name: amountYetiToRebase Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_362(bool) = amountYetiToRebase_1 > adjustedYetiTokenBalance_1
init
end
init
end
lnorm: -18 rnorm: u
Finance type key: (0, 0)
[i]Type for TMP_362

Name: TMP_362 Function: rebase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amountYetiToRebase, Num: 2
Globalname: amountYetiToRebase
End popogation
amountYetiToRebase_2(uint256) := adjustedYetiTokenBalance_1(uint256)
asgn
init
end
_______________

Name: adjustedYetiTokenBalance Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for amountYetiToRebase

Name: amountYetiToRebase Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: amountYetiToRebase, Num: 3
Globalname: amountYetiToRebase

Name: amountYetiToRebase Function: rebase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Phid
amountYetiToRebase_3(uint256) := ϕ(['amountYetiToRebase_1', 'amountYetiToRebase_2'])
Phi
init
end
_______________

Name: amountYetiToRebase Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for amountYetiToRebase

Name: amountYetiToRebase Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_363(uint256) = LIBRARY_CALL, dest:BoringMath, function:BoringMath.add(uint256,uint256), arguments:['effectiveYetiTokenBalance_10', 'amountYetiToRebase_3'] 
init
end
init
end
init
end
_______________

Name: amountYetiToRebase Function: rebase
Num: 8
Den: -1
Address: u
Norm: -18
LF: None
Value: u
Fields: 
Finance Type: raw balance
[i]Type for TMP_363

Name: TMP_363 Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
effectiveYetiTokenBalance_11(uint256) := TMP_363(uint256)
asgn
init
end
_______________

Name: TMP_363 Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
8
-1
Finance type key: (0, -1)
[i]Type for effectiveYetiTokenBalance

Name: effectiveYetiTokenBalance Function: rebase
Num: 8
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
lastRebaseTime_2(uint256) := block.timestamp(uint256)
asgn
init
_______________

Name: block.timestamp Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for lastRebaseTime

Name: lastRebaseTime Function: rebase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



_getValueOfContract
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



setTransferRatio
Finding type for newTransferRatio(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


MODIFIER_CALL, BoringOwnable.onlyOwner()()
TMP_370(bool) = newTransferRatio_1 != 0
TMP_371(None) = SOLIDITY_CALL require(bool,string)(TMP_370,Zero transfer ratio)
TMP_372(bool) = newTransferRatio_1 <= 1000000000000000000
TMP_373(None) = SOLIDITY_CALL require(bool,string)(TMP_372,Transfer ratio too high)
transferRatio_5(uint256) := newTransferRatio_1(uint256)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
Name: newTransferRatio, Num: 1
Globalname: newTransferRatio
End popogation
TMP_370(bool) = newTransferRatio_1 != 0
[i]Type for TMP_370

Name: TMP_370 Function: setTransferRatio
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_371(None) = SOLIDITY_CALL require(bool,string)(TMP_370,Zero transfer ratio)
[i]Type for TMP_371

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: newTransferRatio, Num: 1
Globalname: newTransferRatio
End popogation
TMP_372(bool) = newTransferRatio_1 <= 1000000000000000000
init
end
init
end
lnorm: u rnorm: 18
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_372

Name: TMP_372 Function: setTransferRatio
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_373(None) = SOLIDITY_CALL require(bool,string)(TMP_372,Transfer ratio too high)
[i]Type for TMP_373

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: transferRatio, Num: 5
Globalname: transferRatio
global...

Name: PIC_14 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation
transferRatio_5(uint256) := newTransferRatio_1(uint256)
asgn
init
end
_______________

Name: newTransferRatio Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for transferRatio

Name: transferRatio Function: setTransferRatio
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


MODIFIER_CALL, BoringOwnable.onlyOwner()()
TMP_370(bool) = newTransferRatio_1 != 0
TMP_371(None) = SOLIDITY_CALL require(bool,string)(TMP_370,Zero transfer ratio)
TMP_372(bool) = newTransferRatio_1 <= 1000000000000000000
TMP_373(None) = SOLIDITY_CALL require(bool,string)(TMP_372,Transfer ratio too high)
transferRatio_5(uint256) := newTransferRatio_1(uint256)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
TMP_370(bool) = newTransferRatio_1 != 0
[i]Type for TMP_370

Name: TMP_370 Function: setTransferRatio
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_371(None) = SOLIDITY_CALL require(bool,string)(TMP_370,Zero transfer ratio)
[i]Type for TMP_371

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_372(bool) = newTransferRatio_1 <= 1000000000000000000
init
end
init
end
lnorm: u rnorm: 18
[i]Type for TMP_372

Name: TMP_372 Function: setTransferRatio
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_373(None) = SOLIDITY_CALL require(bool,string)(TMP_372,Transfer ratio too high)
[i]Type for TMP_373

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
transferRatio_5(uint256) := newTransferRatio_1(uint256)
asgn
init
end
_______________

Name: newTransferRatio Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for transferRatio

Name: transferRatio Function: setTransferRatio
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


MODIFIER_CALL, BoringOwnable.onlyOwner()()
TMP_370(bool) = newTransferRatio_1 != 0
TMP_371(None) = SOLIDITY_CALL require(bool,string)(TMP_370,Zero transfer ratio)
TMP_372(bool) = newTransferRatio_1 <= 1000000000000000000
TMP_373(None) = SOLIDITY_CALL require(bool,string)(TMP_372,Transfer ratio too high)
transferRatio_5(uint256) := newTransferRatio_1(uint256)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
TMP_370(bool) = newTransferRatio_1 != 0
[i]Type for TMP_370

Name: TMP_370 Function: setTransferRatio
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_371(None) = SOLIDITY_CALL require(bool,string)(TMP_370,Zero transfer ratio)
[i]Type for TMP_371

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_372(bool) = newTransferRatio_1 <= 1000000000000000000
init
end
init
end
lnorm: u rnorm: 18
[i]Type for TMP_372

Name: TMP_372 Function: setTransferRatio
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_373(None) = SOLIDITY_CALL require(bool,string)(TMP_372,Transfer ratio too high)
[i]Type for TMP_373

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
transferRatio_5(uint256) := newTransferRatio_1(uint256)
asgn
init
end
_______________

Name: newTransferRatio Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for transferRatio

Name: transferRatio Function: setTransferRatio
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



addValidRouter
Finding type for _routerAddress(address ... )
prev address? u
Head Addr: -986
    Norm: 0
    Set: {-986}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: _routerAddress
    fields: []
    fintype: -1


MODIFIER_CALL, BoringOwnable.onlyOwner()()
TMP_375 = CONVERT 0 to address
TMP_376(bool) = _routerAddress_1 != TMP_375
TMP_377(None) = SOLIDITY_CALL require(bool,string)(TMP_376,Invalid router address)
REF_135(bool) -> validRouters_1[_routerAddress_1]
validRouters_2(mapping(address => bool)) := ϕ(['validRouters_1'])
REF_135 (->validRouters_2) := True(bool)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
TMP_375 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_375

Name: TMP_375 Function: addValidRouter
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_376(bool) = _routerAddress_1 != TMP_375
[i]Type for TMP_376

Name: TMP_376 Function: addValidRouter
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_377(None) = SOLIDITY_CALL require(bool,string)(TMP_376,Invalid router address)
[i]Type for TMP_377

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: validRouters, Num: 2
Globalname: validRouters
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_135(bool) -> validRouters_1[_routerAddress_1]
INDEX
[i]Type for REF_135

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
validRouters_2(mapping(address => bool)) := ϕ(['validRouters_1'])
Phi
[i]Type for validRouters

Name: validRouters Function: addValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_135 (->validRouters_2) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_135

Name: REF_135 Function: addValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX


MODIFIER_CALL, BoringOwnable.onlyOwner()()
TMP_375 = CONVERT 0 to address
TMP_376(bool) = _routerAddress_1 != TMP_375
TMP_377(None) = SOLIDITY_CALL require(bool,string)(TMP_376,Invalid router address)
REF_135(bool) -> validRouters_1[_routerAddress_1]
validRouters_2(mapping(address => bool)) := ϕ(['validRouters_1'])
REF_135 (->validRouters_2) := True(bool)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation
TMP_375 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_375

Name: TMP_375 Function: addValidRouter
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_376(bool) = _routerAddress_1 != TMP_375
[i]Type for TMP_376

Name: TMP_376 Function: addValidRouter
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_377(None) = SOLIDITY_CALL require(bool,string)(TMP_376,Invalid router address)
[i]Type for TMP_377

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: validRouters Function: addValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_135(bool) -> validRouters_1[_routerAddress_1]
INDEX
[i]Type for REF_135

Name: validRouters Function: _buyBack
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
validRouters_2(mapping(address => bool)) := ϕ(['validRouters_1'])
Phi
[i]Type for validRouters

Name: validRouters Function: addValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_135 (->validRouters_2) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_135

Name: REF_135 Function: addValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



removeValidRouter
Finding type for _routerAddress(address ... )
prev address? u
Head Addr: -985
    Norm: 0
    Set: {-985}
    Fin: NULL
Param: 0
    num: []
    den: []
    norm: u
    link: _routerAddress
    fields: []
    fintype: -1


MODIFIER_CALL, BoringOwnable.onlyOwner()()
REF_136(bool) -> validRouters_2[_routerAddress_1]
validRouters_3(mapping(address => bool)) := ϕ(['validRouters_2'])
REF_136 (->validRouters_3) := False(bool)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
Name: validRouters, Num: 3
Globalname: validRouters
global...

Name: validRouters Function: addValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_136(bool) -> validRouters_2[_routerAddress_1]
INDEX
[i]Type for REF_136

Name: REF_136 Function: removeValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
validRouters_3(mapping(address => bool)) := ϕ(['validRouters_2'])
Phi
[i]Type for validRouters

Name: validRouters Function: removeValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_136 (->validRouters_3) := False(bool)
asgn
init
end
_______________

Name: False Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_136

Name: REF_136 Function: removeValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX


MODIFIER_CALL, BoringOwnable.onlyOwner()()
REF_136(bool) -> validRouters_2[_routerAddress_1]
validRouters_3(mapping(address => bool)) := ϕ(['validRouters_2'])
REF_136 (->validRouters_3) := False(bool)


Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, BoringOwnable.onlyOwner()()
Propogating parameters and globals to SSA variables...
End popogation

Name: validRouters Function: removeValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_136(bool) -> validRouters_2[_routerAddress_1]
INDEX
[i]Type for REF_136

Name: REF_136 Function: removeValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
validRouters_3(mapping(address => bool)) := ϕ(['validRouters_2'])
Phi
[i]Type for validRouters

Name: validRouters Function: removeValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_136 (->validRouters_3) := False(bool)
asgn
init
end
_______________

Name: False Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for REF_136

Name: REF_136 Function: removeValidRouter
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: False
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



div
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces



slitherConstructorConstantVariables
State_var: validRouters
State_var: yusdToken
State_var: LOCK_TIME
State_var: effectiveYetiTokenBalance
State_var: totalSupply
State_var: users
State_var: yetiToken
State_var: allowance
State_var: addressesSet
State_var: EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA
State_var: owner
State_var: pendingOwner
State_var: lastRebaseTime
State_var: transferRatio
State_var: DOMAIN_SEPARATOR_SIGNATURE_HASH
State_var: lastBuybackPrice
State_var: lastBuybackTime
State_var: DOMAIN_SEPARATOR_CHAIN_ID
State_var: _DOMAIN_SEPARATOR
State_var: PERMIT_SIGNATURE_HASH
State_var: nonces
Address: 1, Label: global:owner
Address: 2, Label: global:pendingOwner
Address: -999, Label: balanceOf:user
Address: -998, Label: transfer:to
Address: -997, Label: transferFrom:from
Address: -996, Label: transferFrom:to
Address: -995, Label: approve:spender
Address: -994, Label: increaseAllowance:spender
Address: -993, Label: permit:owner_
Address: -992, Label: permit:spender
Address: -991, Label: burn:to
Address: -990, Label: burnFrom:from
Address: -989, Label: burnFrom:to
Address: -988, Label: buyBack:_routerAddress
Address: -987, Label: publicBuyBack:_routerAddress
Address: -986, Label: addValidRouter:_routerAddress
Address: -985, Label: removeValidRouter:_routerAddress
Address: 3, Label: _calculateDomainSeparator:TMP_243
Address: 3, Label: global:this
Address: 4, Label: global:BoringMath
Address: 5, Label: None:None
Address: 6, Label: publicBuyBack:yusdToken
Address: 7, Label: rebase:yetiToken
Address: 8, Label: _getValueOfContract:yusdToken
Head Addr: 1
    Norm: 0
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 0
    Set: {2}
    Fin: NULL
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 0
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Head Addr: -996
    Norm: 0
    Set: {-996}
    Fin: NULL
Head Addr: -995
    Norm: 0
    Set: {-995}
    Fin: NULL
Head Addr: -994
    Norm: 0
    Set: {-994}
    Fin: NULL
Head Addr: -993
    Norm: 0
    Set: {-993}
    Fin: NULL
Head Addr: -992
    Norm: 0
    Set: {-992}
    Fin: NULL
Head Addr: -991
    Norm: 0
    Set: {-991}
    Fin: NULL
Head Addr: -990
    Norm: 0
    Set: {-990}
    Fin: NULL
Head Addr: -989
    Norm: 0
    Set: {-989}
    Fin: NULL
Head Addr: -988
    Norm: 0
    Set: {-988}
    Fin: NULL
Head Addr: -987
    Norm: 0
    Set: {-987}
    Fin: NULL
Head Addr: -986
    Norm: 0
    Set: {-986}
    Fin: NULL
Head Addr: -985
    Norm: 0
    Set: {-985}
    Fin: NULL
Head Addr: 3
    Norm: *
    Set: {3}
    Fin: NULL
Head Addr: 4
    Norm: *
    Set: {4}
    Fin: NULL
Head Addr: 5
    Norm: *
    Set: {5}
    Fin: NULL
Head Addr: 6
    Norm: *
    Set: {6}
    Fin: NULL
Head Addr: 7
    Norm: *
    Set: {7}
    Fin: NULL
Head Addr: 8
    Norm: *
    Set: {8}
    Fin: NULL
Function count: 32
Executing Group 20
[*] Tested 0 warnings for Yeti Finance
Group 20 complete
Testing complete
