Switched global version to 0.8.7
Checking LaunchEvent
Checking IJoeFactory
Checking IJoePair
Checking IJoeRouter01
Checking IJoeRouter02
Checking IRocketJoeFactory
Checking IRocketJoeToken
Checking IWAVAX
Checking Ownable
Checking IERC20
Checking IERC20Metadata
Checking Context
Add to address_to_label {'[global:wavax]': 1}
Add to address_to_label {'[global:wavax]': 1, '[global:rJoe]': 2}
Add to address_to_label {'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3}
Add to address_to_label {'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3, 'global:issuer': 4}
Add to address_to_label {'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3, 'global:issuer': 4, 'global:_owner': 5}
Add to address_to_label {'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3, 'global:issuer': 4, 'global:_owner': 5, 'initialize:_issuer': -999}
Add to address_to_label {'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3, 'global:issuer': 4, 'global:_owner': 5, 'initialize:_issuer': -999, 'initialize:_token': -998}
Add to address_to_label {'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3, 'global:issuer': 4, 'global:_owner': 5, 'initialize:_issuer': -999, 'initialize:_token': -998, 'pairBalance:_user': -997}
State_var: WAVAX
Finding type for WAVAX(IWAVAX ... )
querrying!!!
Source address: u
State_var: factory
Finding type for factory(IJoeFactory ... )
querrying!!!
Source address: u
State_var: floorPrice
Finding type for floorPrice(uint256 ... )
querrying!!!
Source address: u
State_var: pair
Finding type for pair(IJoePair ... )
querrying!!!
Source address: u
State_var: router
Finding type for router(IJoeRouter02 ... )
querrying!!!
Source address: u
State_var: token
Finding type for token(IERC20Metadata ... )
querrying!!!
Source address: u
State_var: tokenIncentivesBalance
Finding type for tokenIncentivesBalance(uint256 ... )
querrying!!!
Source address: u
State_var: tokenIncentivesForUsers
Finding type for tokenIncentivesForUsers(uint256 ... )
querrying!!!
Source address: u
State_var: tokenReserve
Finding type for tokenReserve(uint256 ... )
querrying!!!
Source address: u
State_var: wavaxAllocated
Finding type for wavaxAllocated(uint256 ... )
querrying!!!
Source address: u
State_var: wavaxReserve
Finding type for wavaxReserve(uint256 ... )
querrying!!!
Source address: u
State_var: PHASE_ONE_DURATION
Finding type for PHASE_ONE_DURATION(uint256 ... )
querrying!!!
Source address: u
State_var: PHASE_TWO_DURATION
Finding type for PHASE_TWO_DURATION(uint256 ... )
querrying!!!
Source address: u
State_var: auctionStart
Finding type for auctionStart(uint256 ... )
querrying!!!
Source address: u
State_var: stopped
Finding type for stopped(bool ... )
querrying!!!
Source address: u
State_var: rocketJoeFactory
Finding type for rocketJoeFactory(IRocketJoeFactory ... )
querrying!!!
Source address: u
State_var: getUserInfo
Finding type for getUserInfo(mapping(address => LaunchEvent.UserInfo) ... )
global
getUserInfo
allocation
OUT KEY: global_getUserInfo_allocation
global
getUserInfo
balance
OUT KEY: global_getUserInfo_balance
global
getUserInfo
hasWithdrawnPair
OUT KEY: global_getUserInfo_hasWithdrawnPair
global
getUserInfo
hasWithdrawnIncentives
OUT KEY: global_getUserInfo_hasWithdrawnIncentives
querrying!!!
Source address: u
State_var: issuer
Finding type for issuer(address ... )
prev address? u
Head Addr: 4
    Norm: 0
    Set: {4}
    Fin: NULL
querrying!!!
Source address: 4
State_var: lpSupply
Finding type for lpSupply(uint256 ... )
querrying!!!
Source address: u
State_var: maxAllocation
Finding type for maxAllocation(uint256 ... )
querrying!!!
Source address: u
State_var: rJoe
Finding type for rJoe(IRocketJoeToken ... )
querrying!!!
Source address: u
State_var: rJoePerAvax
Finding type for rJoePerAvax(uint256 ... )
querrying!!!
Source address: u
State_var: tokenIncentiveIssuerRefund
Finding type for tokenIncentiveIssuerRefund(uint256 ... )
querrying!!!
Source address: u
State_var: _owner
Finding type for _owner(address ... )
prev address? u
Head Addr: 5
    Norm: 0
    Set: {5}
    Fin: NULL
querrying!!!
Source address: 5
State_var: initialized
Finding type for initialized(bool ... )
querrying!!!
Source address: u
State_var: issuerTimelock
Finding type for issuerTimelock(uint256 ... )
querrying!!!
Source address: u
State_var: userTimelock
Finding type for userTimelock(uint256 ... )
querrying!!!
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Finding type for PHASE_ONE_NO_FEE_DURATION(uint256 ... )
querrying!!!
Source address: u
State_var: fixedWithdrawPenalty
Finding type for fixedWithdrawPenalty(uint256 ... )
querrying!!!
Source address: u
State_var: maxWithdrawPenalty
Finding type for maxWithdrawPenalty(uint256 ... )
querrying!!!
Source address: u



receive


WAVAX_1(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
TMP_11 = CONVERT WAVAX_1 to address
TMP_12(bool) = msg.sender == TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,LaunchEvent: you can't send AVAX directly to this contract)


Propogating parameters and globals to SSA variables...
End popogation
Name: WAVAX, Num: 1
Globalname: WAVAX
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
WAVAX_1(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_11 = CONVERT WAVAX_1 to address
Converting WAVAX_1

Name: WAVAX Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: WAVAX Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_11 Function: receive
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_11

Name: TMP_11 Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_12(bool) = msg.sender == TMP_11
[i]Type for TMP_12

Name: TMP_12 Function: receive
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,LaunchEvent: you can't send AVAX directly to this contract)
[i]Type for TMP_13

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


WAVAX_1(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
TMP_11 = CONVERT WAVAX_1 to address
TMP_12(bool) = msg.sender == TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,LaunchEvent: you can't send AVAX directly to this contract)


Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
WAVAX_1(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_11 = CONVERT WAVAX_1 to address
Converting WAVAX_1

Name: WAVAX Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: WAVAX Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_11 Function: receive
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_11

Name: TMP_11 Function: receive
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_12(bool) = msg.sender == TMP_11
[i]Type for TMP_12

Name: TMP_12 Function: receive
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_13(None) = SOLIDITY_CALL require(bool,string)(TMP_12,LaunchEvent: you can't send AVAX directly to this contract)
[i]Type for TMP_13

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: WAVAX
Source address: u
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: u
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: u
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: u
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



initialize
Finding type for _issuer(address ... )
prev address? u
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Finding type for _auctionStart(uint256 ... )
Finding type for _token(address ... )
prev address? u
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Finding type for _tokenIncentivesPercent(uint256 ... )
Finding type for _floorPrice(uint256 ... )
Finding type for _maxWithdrawPenalty(uint256 ... )
Finding type for _fixedWithdrawPenalty(uint256 ... )
Finding type for _maxAllocation(uint256 ... )
Finding type for _userTimelock(uint256 ... )
Finding type for _issuerTimelock(uint256 ... )
Param: 0
    num: []
    den: []
    norm: u
    link: _issuer
    fields: []
    fintype: -1
Param: 1
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 2
    num: []
    den: []
    norm: u
    link: _token
    fields: []
    fintype: -1
Param: 3
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 4
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 5
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 6
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 7
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 8
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1
Param: 9
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


initialized_1(bool) := ϕ(['initialized_0', 'initialized_3'])
REF_9(LaunchEvent.Phase) -> Phase.NotStarted
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_9)
TMP_14 = ! initialized_2 
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,LaunchEvent: already initialized)
TMP_16 = CONVERT msg.sender to IRocketJoeFactory
rocketJoeFactory_1(IRocketJoeFactory) := TMP_16(IRocketJoeFactory)
TMP_17(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_1(IRocketJoeFactory), function:wavax, arguments:[]  
rocketJoeFactory_2(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_1', 'rocketJoeFactory_15'])
TMP_18 = CONVERT TMP_17 to IWAVAX
WAVAX_2(IWAVAX) := TMP_18(IWAVAX)
TMP_19(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_2(IRocketJoeFactory), function:router, arguments:[]  
rocketJoeFactory_3(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_2'])
TMP_20 = CONVERT TMP_19 to IJoeRouter02
router_1(IJoeRouter02) := TMP_20(IJoeRouter02)
TMP_21(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_3(IRocketJoeFactory), function:factory, arguments:[]  
rocketJoeFactory_4(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_3', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
TMP_22 = CONVERT TMP_21 to IJoeFactory
factory_1(IJoeFactory) := TMP_22(IJoeFactory)
TMP_23(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_4(IRocketJoeFactory), function:rJoe, arguments:[]  
rocketJoeFactory_5(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_4', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
TMP_24 = CONVERT TMP_23 to IRocketJoeToken
rJoe_1(IRocketJoeToken) := TMP_24(IRocketJoeToken)
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_5(IRocketJoeFactory), function:rJoePerAvax, arguments:[]  
rocketJoeFactory_6(IRocketJoeFactory) := ϕ(['rocketJoeFactory_5', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
rJoePerAvax_1(uint256) := TMP_25(uint256)
TMP_26(bool) = _maxWithdrawPenalty_1 <= 500000000000000000
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,LaunchEvent: maxWithdrawPenalty too big)
TMP_28(bool) = _fixedWithdrawPenalty_1 <= 500000000000000000
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,LaunchEvent: fixedWithdrawPenalty too big)
TMP_30(bool) = _userTimelock_1 <= 604800
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LaunchEvent: can't lock user LP for more than 7 days)
TMP_32(bool) = _issuerTimelock_1 > _userTimelock_1
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LaunchEvent: issuer can't withdraw before users)
TMP_34(bool) = _auctionStart_1 > block.timestamp
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,LaunchEvent: start of phase 1 cannot be in the past)
issuer_1(address) := _issuer_1(address)
auctionStart_1(uint256) := _auctionStart_1(uint256)
TMP_36(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_6(IRocketJoeFactory), function:PHASE_ONE_DURATION, arguments:[]  
rocketJoeFactory_7(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_6', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
PHASE_ONE_DURATION_1(uint256) := TMP_36(uint256)
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_7(IRocketJoeFactory), function:PHASE_ONE_NO_FEE_DURATION, arguments:[]  
rocketJoeFactory_8(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_7', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
PHASE_ONE_NO_FEE_DURATION_1(uint256) := TMP_37(uint256)
TMP_38(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_8(IRocketJoeFactory), function:PHASE_TWO_DURATION, arguments:[]  
rocketJoeFactory_9(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_8'])
PHASE_TWO_DURATION_1(uint256) := TMP_38(uint256)
TMP_39 = CONVERT _token_1 to IERC20Metadata
token_1(IERC20Metadata) := TMP_39(IERC20Metadata)
TMP_40 = CONVERT this to address
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:token_1(IERC20Metadata), function:balanceOf, arguments:['TMP_40']  
token_2(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_1', 'token_22', 'token_21', 'token_25'])
balance_1(uint256) := TMP_41(uint256)
tokenIncentivesPercent_1(uint256) := _tokenIncentivesPercent_1(uint256)
TMP_42(uint256) = balance_1 (c)* 1000000000000000000
TMP_43(uint256) = 1000000000000000000 (c)+ _tokenIncentivesPercent_1
TMP_44(uint256) = TMP_42 (c)/ TMP_43
tokenReserve_1(uint256) := TMP_44(uint256)
TMP_45(uint256) = balance_1 (c)- tokenReserve_1
tokenIncentivesForUsers_1(uint256) := TMP_45(uint256)
tokenIncentivesBalance_1(uint256) := tokenIncentivesForUsers_1(uint256)
floorPrice_1(uint256) := _floorPrice_1(uint256)
maxWithdrawPenalty_1(uint256) := _maxWithdrawPenalty_1(uint256)
fixedWithdrawPenalty_1(uint256) := _fixedWithdrawPenalty_1(uint256)
maxAllocation_1(uint256) := _maxAllocation_1(uint256)
userTimelock_1(uint256) := _userTimelock_1(uint256)
issuerTimelock_1(uint256) := _issuerTimelock_1(uint256)
initialized_3(bool) := True(bool)


Propogating parameters and globals to SSA variables...
End popogation
Name: initialized, Num: 1
Globalname: initialized
global...

Name: PIC_25 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
initialized_1(bool) := ϕ(['initialized_0', 'initialized_3'])
Phi
[i]Type for initialized

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_9(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
OUT KEY: global_Phase_NotStarted
OUT KEY: global_Phase_NotStarted
FTT: None
No field found
[i]Type for REF_9

Name: Phase.NotStarted Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_9)
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _phase, Num: 1
Globalname: _phase

Name: _phase_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _phase, Num: 1
Globalname: _phase
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _phase, Num: 1
Globalname: _phase

Name: _phase_1 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _phase, Num: 1
Globalname: _phase
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _phase, Num: 1
Globalname: _phase
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
OUT KEY: global_Phase_PhaseOne
OUT KEY: global_Phase_PhaseOne
FTT: None
No field found
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
Propogating parameters and globals to SSA variables...
End popogation
Name: auctionStart, Num: 2
Globalname: auctionStart
global...

Name: PIC_14 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: PHASE_ONE_DURATION, Num: 2
Globalname: PHASE_ONE_DURATION
global...

Name: PIC_12 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: PHASE_TWO_DURATION, Num: 2
Globalname: PHASE_TWO_DURATION
global...

Name: PIC_13 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
auctionStart_2(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
Phi
[i]Type for auctionStart

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_0', 'PHASE_TWO_DURATION_1'])
Phi
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_47(bool) = block.timestamp < auctionStart_2
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_47

Name: TMP_47 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_48(bool) = auctionStart_2 == 0
[i]Type for TMP_48

Name: TMP_48 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_49(bool) = TMP_47 || TMP_48
[i]Type for TMP_49

Name: TMP_49 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_50 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_50

Name: TMP_50 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(bool) = block.timestamp < TMP_50
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_51

Name: TMP_51 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
Source address: u
[i]Type for REF_11

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_11
RETURN
init
end

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_52 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_52

Name: TMP_52 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_53 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_53

Name: TMP_53 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(bool) = block.timestamp < TMP_53
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_54

Name: TMP_54 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
OUT KEY: global_Phase_PhaseTwo
OUT KEY: global_Phase_PhaseTwo
FTT: None
No field found
[i]Type for REF_12

Name: Phase.PhaseTwo Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
RETURN REF_12
RETURN
init
end

Name: Phase.PhaseTwo Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
OUT KEY: global_Phase_PhaseThree
OUT KEY: global_Phase_PhaseThree
FTT: None
No field found
[i]Type for REF_13

Name: Phase.PhaseThree Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
RETURN REF_13
RETURN
init
end

Name: Phase.PhaseThree Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
Source address: u
[i]Type for REF_10

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_10
RETURN
init
end

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
auctionStart_2(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
Phi
[i]Type for auctionStart

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_0', 'PHASE_TWO_DURATION_1'])
Phi
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_47(bool) = block.timestamp < auctionStart_2
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_47

Name: TMP_47 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_48(bool) = auctionStart_2 == 0
[i]Type for TMP_48

Name: TMP_48 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_49(bool) = TMP_47 || TMP_48
[i]Type for TMP_49

Name: TMP_49 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_50 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_50

Name: TMP_50 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(bool) = block.timestamp < TMP_50
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_51

Name: TMP_51 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_11

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_11
RETURN
init
end

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_52 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_52

Name: TMP_52 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_53 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_53

Name: TMP_53 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(bool) = block.timestamp < TMP_53
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_54

Name: TMP_54 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
Source address: u
[i]Type for REF_12

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_12
RETURN
init
end

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
Source address: u
[i]Type for REF_13

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_13
RETURN
init
end

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_10

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_10
RETURN
init
end

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
([-1], [-1], 'u', 'u', 'u', -1)
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _phase, Num: 1
Globalname: _phase
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _phase, Num: 1
Globalname: _phase
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _phase, Num: 1
Globalname: _phase

Name: _phase_1 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _phase, Num: 1
Globalname: _phase
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _phase, Num: 1
Globalname: _phase
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _phase, Num: 1
Globalname: _phase
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _phase, Num: 1
Globalname: _phase
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _phase, Num: 1
Globalname: _phase

Name: _phase_1 Function: atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _phase, Num: 1
Globalname: _phase
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: initialized, Num: 2
Globalname: initialized
global...

Name: PIC_25 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_14 = ! initialized_2 
[i]Type for TMP_14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,LaunchEvent: already initialized)
[i]Type for TMP_15

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: rocketJoeFactory, Num: 1
Globalname: rocketJoeFactory
global...

Name: PIC_16 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_16 = CONVERT msg.sender to IRocketJoeFactory
Converting msg.sender
new address made for msg.sender
prev address? u
global assignment: 6
6
6
[i]Type for TMP_16

Name: TMP_16 Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_1(IRocketJoeFactory) := TMP_16(IRocketJoeFactory)
asgn
init
end
_______________

Name: TMP_16 Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 6
Finance type key: (-1, -1)
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: 6
Propogating parameters and globals to SSA variables...
Name: WAVAX, Num: 2
Globalname: WAVAX
global...

Name: PIC_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: rocketJoeFactory, Num: 2
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_17(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_1(IRocketJoeFactory), function:wavax, arguments:[]  
High Call: wavax
Running querryfc
Written func info: RocketJoeFactory, wavax
Retvar: ('c', [-1], [-1], 18, 'u', 1)
([-1], [-1], 18, 'u', 1, -1)
[i]Type for TMP_17

Name: TMP_17 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_2(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_1', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_18 = CONVERT TMP_17 to IWAVAX
Converting TMP_17

Name: TMP_17 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_17 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_18 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 1
WAVAX
[i]Type for TMP_18

Name: TMP_18 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_2(IWAVAX) := TMP_18(IWAVAX)
asgn
init
end
_______________

Name: TMP_18 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 1
Finance type key: (-1, -1)
[i]Type for WAVAX

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: 1
Propogating parameters and globals to SSA variables...
Name: router, Num: 1
Globalname: router
global...

Name: PIC_5 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: rocketJoeFactory, Num: 3
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_19(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_2(IRocketJoeFactory), function:router, arguments:[]  
High Call: router
Running querryfc
Written func info: RocketJoeFactory, router
[i]Type for TMP_19

Name: TMP_19 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_3(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_2'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20 = CONVERT TMP_19 to IJoeRouter02
Converting TMP_19

Name: TMP_19 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_19 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_20 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
JoeRouter02
[i]Type for TMP_20

Name: TMP_20 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
router_1(IJoeRouter02) := TMP_20(IJoeRouter02)
asgn
init
end
_______________

Name: TMP_20 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for router

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: factory, Num: 1
Globalname: factory
global...

Name: PIC_2 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: rocketJoeFactory, Num: 4
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_21(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_3(IRocketJoeFactory), function:factory, arguments:[]  
High Call: factory
Running querryfc
Written func info: RocketJoeFactory, factory
[i]Type for TMP_21

Name: TMP_21 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_4(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_3', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22 = CONVERT TMP_21 to IJoeFactory
Converting TMP_21

Name: TMP_21 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_21 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_22 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
JoeFactory
[i]Type for TMP_22

Name: TMP_22 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
factory_1(IJoeFactory) := TMP_22(IJoeFactory)
asgn
init
end
_______________

Name: TMP_22 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for factory

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: rJoe, Num: 1
Globalname: rJoe
global...

Name: PIC_21 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: rocketJoeFactory, Num: 5
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_23(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_4(IRocketJoeFactory), function:rJoe, arguments:[]  
High Call: rJoe
Running querryfc
Written func info: RocketJoeFactory, rJoe
Retvar: ('c', [-1], [-1], 18, 'u', 2)
([-1], [-1], 18, 'u', 2, -1)
[i]Type for TMP_23

Name: TMP_23 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_5(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_4', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24 = CONVERT TMP_23 to IRocketJoeToken
Converting TMP_23

Name: TMP_23 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_23 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_24 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 2
RocketJoeToken
[i]Type for TMP_24

Name: TMP_24 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
XXXX
rJoe_1(IRocketJoeToken) := TMP_24(IRocketJoeToken)
asgn
init
end
_______________

Name: TMP_24 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef

Name: rJoe Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 2
Finance type key: (-1, -1)
[i]Type for rJoe

Name: rJoe Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: 2
Propogating parameters and globals to SSA variables...
Name: rJoePerAvax, Num: 1
Globalname: rJoePerAvax
global...

Name: PIC_22 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: rocketJoeFactory, Num: 6
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_5(IRocketJoeFactory), function:rJoePerAvax, arguments:[]  
High Call: rJoePerAvax
Running querryfc
Written func info: RocketJoeFactory, rJoePerAvax
Retvar: ('c', ['global:rJoe'], ['global:wavax'], 0, "'u'", 'u')
{'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3, 'global:issuer': 4, 'global:_owner': 5, 'initialize:_issuer': -999, 'initialize:_token': -998, 'pairBalance:_user': -997, 'initialize:TMP_16': 6, 'global:msg.sender': 6}
Add to address_to_label {'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3, 'global:issuer': 4, 'global:_owner': 5, 'initialize:_issuer': -999, 'initialize:_token': -998, 'pairBalance:_user': -997, 'initialize:TMP_16': 6, 'global:msg.sender': 6, 'global:global:rJoe': 7}
{'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3, 'global:issuer': 4, 'global:_owner': 5, 'initialize:_issuer': -999, 'initialize:_token': -998, 'pairBalance:_user': -997, 'initialize:TMP_16': 6, 'global:msg.sender': 6, 'global:global:rJoe': 7}
([7], [3], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: initialize
Num: 7
Den: 3
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_6(IRocketJoeFactory) := ϕ(['rocketJoeFactory_5', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
rJoePerAvax_1(uint256) := TMP_25(uint256)
asgn
init
end
_______________

Name: TMP_25 Function: initialize
Num: 7
Den: 3
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: rJoePerAvax Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (-1, -1)
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: initialize
Num: 7
Den: 3
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Source address: u
Name: _maxWithdrawPenalty, Num: 1
Globalname: _maxWithdrawPenalty
End popogation
TMP_26(bool) = _maxWithdrawPenalty_1 <= 500000000000000000
init
end
init
end
lnorm: u rnorm: 17
init
end
_______________

Name: 500000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 17
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_26 Function: initialize
Num: 
Den: 
Address: u
Norm: 17
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: 500000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 17
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _maxWithdrawPenalty Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_26

Name: TMP_26 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 17
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,LaunchEvent: maxWithdrawPenalty too big)
[i]Type for TMP_27

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _fixedWithdrawPenalty, Num: 1
Globalname: _fixedWithdrawPenalty
End popogation
TMP_28(bool) = _fixedWithdrawPenalty_1 <= 500000000000000000
init
end
init
end
lnorm: u rnorm: 17
init
end
_______________

Name: 500000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 17
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_28 Function: initialize
Num: 
Den: 
Address: u
Norm: 17
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: 500000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 17
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _fixedWithdrawPenalty Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_28

Name: TMP_28 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 17
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,LaunchEvent: fixedWithdrawPenalty too big)
[i]Type for TMP_29

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _userTimelock, Num: 1
Globalname: _userTimelock
End popogation
TMP_30(bool) = _userTimelock_1 <= 604800
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 604800 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_30 Function: initialize
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: 604800 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _userTimelock Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_30

Name: TMP_30 Function: initialize
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LaunchEvent: can't lock user LP for more than 7 days)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _issuerTimelock, Num: 1
Globalname: _issuerTimelock
End popogation
TMP_32(bool) = _issuerTimelock_1 > _userTimelock_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: _userTimelock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _issuerTimelock Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: _userTimelock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_32 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_32

Name: TMP_32 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LaunchEvent: issuer can't withdraw before users)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _auctionStart, Num: 1
Globalname: _auctionStart
End popogation
TMP_34(bool) = _auctionStart_1 > block.timestamp
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: PIC_41 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _auctionStart Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: PIC_41 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_34 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_34

Name: TMP_34 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,LaunchEvent: start of phase 1 cannot be in the past)
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: -999
Name: issuer, Num: 1
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4
End popogation
issuer_1(address) := _issuer_1(address)
asgn
init
end
_______________

Name: _issuer Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _issuer
Value: u
Fields: 
Finance Type: undef

Name: issuer Function: initialize
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: -999
Finance type key: (-1, -1)
[i]Type for issuer

Name: issuer Function: initialize
Num: -1
Den: -1
Address: -999
Norm: u
LF: _issuer
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: auctionStart, Num: 1
Globalname: auctionStart
global...

Name: PIC_14 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
auctionStart_1(uint256) := _auctionStart_1(uint256)
asgn
init
end
_______________

Name: _auctionStart Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: auctionStart Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for auctionStart

Name: auctionStart Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: PHASE_ONE_DURATION, Num: 1
Globalname: PHASE_ONE_DURATION
global...

Name: PIC_12 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: rocketJoeFactory, Num: 7
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_36(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_6(IRocketJoeFactory), function:PHASE_ONE_DURATION, arguments:[]  
High Call: PHASE_ONE_DURATION
Running querryfc
Written func info: RocketJoeFactory, PHASE_ONE_DURATION
[i]Type for TMP_36

Name: TMP_36 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_7(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_6', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_1(uint256) := TMP_36(uint256)
asgn
init
end
_______________

Name: TMP_36 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PHASE_ONE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: PHASE_ONE_NO_FEE_DURATION, Num: 1
Globalname: PHASE_ONE_NO_FEE_DURATION
global...

Name: PIC_28 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: rocketJoeFactory, Num: 8
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_7(IRocketJoeFactory), function:PHASE_ONE_NO_FEE_DURATION, arguments:[]  
High Call: PHASE_ONE_NO_FEE_DURATION
Running querryfc
Written func info: RocketJoeFactory, PHASE_ONE_NO_FEE_DURATION
[i]Type for TMP_37

Name: TMP_37 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_8(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_7', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_NO_FEE_DURATION_1(uint256) := TMP_37(uint256)
asgn
init
end
_______________

Name: TMP_37 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PHASE_ONE_NO_FEE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: PHASE_TWO_DURATION, Num: 1
Globalname: PHASE_TWO_DURATION
global...

Name: PIC_13 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: rocketJoeFactory, Num: 9
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_38(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_8(IRocketJoeFactory), function:PHASE_TWO_DURATION, arguments:[]  
High Call: PHASE_TWO_DURATION
Running querryfc
Written func info: RocketJoeFactory, PHASE_TWO_DURATION
[i]Type for TMP_38

Name: TMP_38 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_9(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_8'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_TWO_DURATION_1(uint256) := TMP_38(uint256)
asgn
init
end
_______________

Name: TMP_38 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PHASE_TWO_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Source address: -998
Name: token, Num: 1
Globalname: token
global...

Name: PIC_6 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_39 = CONVERT _token_1 to IERC20Metadata
Converting _token_1

Name: _token_1 Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _token
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: _token Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _token
Value: u
Fields: 
Finance Type: undef

Name: TMP_39 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -998
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
token_1(IERC20Metadata) := TMP_39(IERC20Metadata)
asgn
init
end
_______________

Name: TMP_39 Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef

Name: token Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: -998
Finance type key: (-1, -1)
[i]Type for token

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: -998
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
Name: token, Num: 2
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
TMP_40 = CONVERT this to address
Converting this
new address made for this
prev address? u
global assignment: 8
8
8
[i]Type for TMP_40

Name: TMP_40 Function: initialize
Num: -1
Den: -1
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:token_1(IERC20Metadata), function:balanceOf, arguments:['TMP_40']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Metadata, balanceOf
Handling balance function!
-998
[i]Type for TMP_41

Name: TMP_41 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token_2(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_1', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_41(uint256)
asgn
init
end
_______________

Name: TMP_41 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: balance Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for balance

Name: balance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _tokenIncentivesPercent, Num: 1
Globalname: _tokenIncentivesPercent
Name: tokenIncentivesPercent, Num: 1
Globalname: tokenIncentivesPercent
End popogation
tokenIncentivesPercent_1(uint256) := _tokenIncentivesPercent_1(uint256)
asgn
init
end
_______________

Name: _tokenIncentivesPercent Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIncentivesPercent Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for tokenIncentivesPercent

Name: tokenIncentivesPercent Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _tokenIncentivesPercent, Num: 1
Globalname: _tokenIncentivesPercent
Name: tokenReserve, Num: 1
Globalname: tokenReserve
global...

Name: PIC_9 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_42(uint256) = balance_1 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: balance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 6 rnorm: 18
init
end
_______________

Name: balance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_42 Function: initialize
Num: 
Den: 
Address: u
Norm: 24
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_42

Name: TMP_42 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 24
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance
XXXX
TMP_43(uint256) = 1000000000000000000 (c)+ _tokenIncentivesPercent_1
init
end
init
end
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_43 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_43

Name: TMP_43 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_44(uint256) = TMP_42 (c)/ TMP_43
init
end
init
end
lnorm: 24 rnorm: 18
init
end
_______________

Name: TMP_42 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 24
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance

Name: TMP_44 Function: initialize
Num: 
Den: 
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
init
end
init
end
lnorm: 24 rnorm: 18
init
end
_______________

Name: TMP_42 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 24
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance

Name: TMP_44 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-1
[i]Type for TMP_44

Name: TMP_44 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenReserve_1(uint256) := TMP_44(uint256)
asgn
init
end
_______________

Name: TMP_44 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenReserve Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for tokenReserve

Name: tokenReserve Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: tokenIncentivesForUsers, Num: 1
Globalname: tokenIncentivesForUsers
global...

Name: PIC_8 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_45(uint256) = balance_1 (c)- tokenReserve_1
init
end
init
end
-998
-1
lnorm: 6 rnorm: 6
Finance type key: (0, 0)
init
end
_______________

Name: balance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_45 Function: initialize
Num: 
Den: 
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_45

Name: TMP_45 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_1(uint256) := TMP_45(uint256)
asgn
init
end
_______________

Name: TMP_45 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenIncentivesForUsers Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: tokenIncentivesBalance, Num: 1
Globalname: tokenIncentivesBalance
global...

Name: PIC_7 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
tokenIncentivesBalance_1(uint256) := tokenIncentivesForUsers_1(uint256)
asgn
init
end
_______________

Name: tokenIncentivesForUsers Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenIncentivesBalance Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Source address: u
Name: _floorPrice, Num: 1
Globalname: _floorPrice
Name: floorPrice, Num: 1
Globalname: floorPrice
global...

Name: PIC_3 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
floorPrice_1(uint256) := _floorPrice_1(uint256)
asgn
init
end
_______________

Name: _floorPrice Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for floorPrice

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: maxWithdrawPenalty, Num: 1
Globalname: maxWithdrawPenalty
global...

Name: PIC_30 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
maxWithdrawPenalty_1(uint256) := _maxWithdrawPenalty_1(uint256)
asgn
init
end
_______________

Name: _maxWithdrawPenalty Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: maxWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: fixedWithdrawPenalty, Num: 1
Globalname: fixedWithdrawPenalty
global...

Name: PIC_29 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
fixedWithdrawPenalty_1(uint256) := _fixedWithdrawPenalty_1(uint256)
asgn
init
end
_______________

Name: _fixedWithdrawPenalty Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fixedWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Source address: u
Name: _maxAllocation, Num: 1
Globalname: _maxAllocation
Name: maxAllocation, Num: 1
Globalname: maxAllocation
global...

Name: PIC_20 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
maxAllocation_1(uint256) := _maxAllocation_1(uint256)
asgn
init
end
_______________

Name: _maxAllocation Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: maxAllocation Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for maxAllocation

Name: maxAllocation Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: userTimelock, Num: 1
Globalname: userTimelock
global...

Name: PIC_27 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
userTimelock_1(uint256) := _userTimelock_1(uint256)
asgn
init
end
_______________

Name: _userTimelock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: userTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for userTimelock

Name: userTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: issuerTimelock, Num: 1
Globalname: issuerTimelock
global...

Name: PIC_26 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
issuerTimelock_1(uint256) := _issuerTimelock_1(uint256)
asgn
init
end
_______________

Name: _issuerTimelock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: issuerTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for issuerTimelock

Name: issuerTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: initialized, Num: 3
Globalname: initialized
global...

Name: PIC_25 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
initialized_3(bool) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for initialized

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Source address: u


initialized_1(bool) := ϕ(['initialized_0', 'initialized_3'])
REF_9(LaunchEvent.Phase) -> Phase.NotStarted
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_9)
TMP_14 = ! initialized_2 
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,LaunchEvent: already initialized)
TMP_16 = CONVERT msg.sender to IRocketJoeFactory
rocketJoeFactory_1(IRocketJoeFactory) := TMP_16(IRocketJoeFactory)
TMP_17(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_1(IRocketJoeFactory), function:wavax, arguments:[]  
rocketJoeFactory_2(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_1', 'rocketJoeFactory_15'])
TMP_18 = CONVERT TMP_17 to IWAVAX
WAVAX_2(IWAVAX) := TMP_18(IWAVAX)
TMP_19(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_2(IRocketJoeFactory), function:router, arguments:[]  
rocketJoeFactory_3(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_2'])
TMP_20 = CONVERT TMP_19 to IJoeRouter02
router_1(IJoeRouter02) := TMP_20(IJoeRouter02)
TMP_21(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_3(IRocketJoeFactory), function:factory, arguments:[]  
rocketJoeFactory_4(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_3', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
TMP_22 = CONVERT TMP_21 to IJoeFactory
factory_1(IJoeFactory) := TMP_22(IJoeFactory)
TMP_23(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_4(IRocketJoeFactory), function:rJoe, arguments:[]  
rocketJoeFactory_5(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_4', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
TMP_24 = CONVERT TMP_23 to IRocketJoeToken
rJoe_1(IRocketJoeToken) := TMP_24(IRocketJoeToken)
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_5(IRocketJoeFactory), function:rJoePerAvax, arguments:[]  
rocketJoeFactory_6(IRocketJoeFactory) := ϕ(['rocketJoeFactory_5', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
rJoePerAvax_1(uint256) := TMP_25(uint256)
TMP_26(bool) = _maxWithdrawPenalty_1 <= 500000000000000000
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,LaunchEvent: maxWithdrawPenalty too big)
TMP_28(bool) = _fixedWithdrawPenalty_1 <= 500000000000000000
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,LaunchEvent: fixedWithdrawPenalty too big)
TMP_30(bool) = _userTimelock_1 <= 604800
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LaunchEvent: can't lock user LP for more than 7 days)
TMP_32(bool) = _issuerTimelock_1 > _userTimelock_1
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LaunchEvent: issuer can't withdraw before users)
TMP_34(bool) = _auctionStart_1 > block.timestamp
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,LaunchEvent: start of phase 1 cannot be in the past)
issuer_1(address) := _issuer_1(address)
auctionStart_1(uint256) := _auctionStart_1(uint256)
TMP_36(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_6(IRocketJoeFactory), function:PHASE_ONE_DURATION, arguments:[]  
rocketJoeFactory_7(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_6', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
PHASE_ONE_DURATION_1(uint256) := TMP_36(uint256)
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_7(IRocketJoeFactory), function:PHASE_ONE_NO_FEE_DURATION, arguments:[]  
rocketJoeFactory_8(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_7', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
PHASE_ONE_NO_FEE_DURATION_1(uint256) := TMP_37(uint256)
TMP_38(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_8(IRocketJoeFactory), function:PHASE_TWO_DURATION, arguments:[]  
rocketJoeFactory_9(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_8'])
PHASE_TWO_DURATION_1(uint256) := TMP_38(uint256)
TMP_39 = CONVERT _token_1 to IERC20Metadata
token_1(IERC20Metadata) := TMP_39(IERC20Metadata)
TMP_40 = CONVERT this to address
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:token_1(IERC20Metadata), function:balanceOf, arguments:['TMP_40']  
token_2(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_1', 'token_22', 'token_21', 'token_25'])
balance_1(uint256) := TMP_41(uint256)
tokenIncentivesPercent_1(uint256) := _tokenIncentivesPercent_1(uint256)
TMP_42(uint256) = balance_1 (c)* 1000000000000000000
TMP_43(uint256) = 1000000000000000000 (c)+ _tokenIncentivesPercent_1
TMP_44(uint256) = TMP_42 (c)/ TMP_43
tokenReserve_1(uint256) := TMP_44(uint256)
TMP_45(uint256) = balance_1 (c)- tokenReserve_1
tokenIncentivesForUsers_1(uint256) := TMP_45(uint256)
tokenIncentivesBalance_1(uint256) := tokenIncentivesForUsers_1(uint256)
floorPrice_1(uint256) := _floorPrice_1(uint256)
maxWithdrawPenalty_1(uint256) := _maxWithdrawPenalty_1(uint256)
fixedWithdrawPenalty_1(uint256) := _fixedWithdrawPenalty_1(uint256)
maxAllocation_1(uint256) := _maxAllocation_1(uint256)
userTimelock_1(uint256) := _userTimelock_1(uint256)
issuerTimelock_1(uint256) := _issuerTimelock_1(uint256)
initialized_3(bool) := True(bool)


Propogating parameters and globals to SSA variables...
End popogation

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
initialized_1(bool) := ϕ(['initialized_0', 'initialized_3'])
Phi
[i]Type for initialized

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_9(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
Source address: u
[i]Type for REF_9

Name: Phase.NotStarted Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_9)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_14 = ! initialized_2 
[i]Type for TMP_14

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_15(None) = SOLIDITY_CALL require(bool,string)(TMP_14,LaunchEvent: already initialized)
[i]Type for TMP_15

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_16 = CONVERT msg.sender to IRocketJoeFactory
Converting msg.sender
6
[i]Type for TMP_16

Name: TMP_16 Function: initialize
Num: 
Den: 
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_1(IRocketJoeFactory) := TMP_16(IRocketJoeFactory)
asgn
init
end
_______________

Name: TMP_16 Function: initialize
Num: 
Den: 
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6
Finance type key: (-1, -1)
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: 6
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_17(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_1(IRocketJoeFactory), function:wavax, arguments:[]  
High Call: wavax
Running querryfc
Written func info: RocketJoeFactory, wavax
Retvar: ('c', [-1], [-1], 18, 'u', 1)
([-1], [-1], 18, 'u', 1, -1)
[i]Type for TMP_17

Name: TMP_17 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_2(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_1', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_18 = CONVERT TMP_17 to IWAVAX
Converting TMP_17

Name: TMP_17 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_17 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_18 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 1
WAVAX
[i]Type for TMP_18

Name: TMP_18 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_2(IWAVAX) := TMP_18(IWAVAX)
asgn
init
end
_______________

Name: TMP_18 Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 1
Finance type key: (-1, -1)
[i]Type for WAVAX

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: 18
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: 1
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_19(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_2(IRocketJoeFactory), function:router, arguments:[]  
High Call: router
Running querryfc
Written func info: RocketJoeFactory, router
[i]Type for TMP_19

Name: TMP_19 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_3(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_2'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_20 = CONVERT TMP_19 to IJoeRouter02
Converting TMP_19

Name: TMP_19 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_19 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_20 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
JoeRouter02
[i]Type for TMP_20

Name: TMP_20 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
router_1(IJoeRouter02) := TMP_20(IJoeRouter02)
asgn
init
end
_______________

Name: TMP_20 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for router

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_21(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_3(IRocketJoeFactory), function:factory, arguments:[]  
High Call: factory
Running querryfc
Written func info: RocketJoeFactory, factory
[i]Type for TMP_21

Name: TMP_21 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_4(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_3', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_22 = CONVERT TMP_21 to IJoeFactory
Converting TMP_21

Name: TMP_21 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_21 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_22 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
JoeFactory
[i]Type for TMP_22

Name: TMP_22 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
factory_1(IJoeFactory) := TMP_22(IJoeFactory)
asgn
init
end
_______________

Name: TMP_22 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for factory

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_23(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_4(IRocketJoeFactory), function:rJoe, arguments:[]  
High Call: rJoe
Running querryfc
Written func info: RocketJoeFactory, rJoe
Retvar: ('c', [-1], [-1], 18, 'u', 2)
([-1], [-1], 18, 'u', 2, -1)
[i]Type for TMP_23

Name: TMP_23 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_5(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_4', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_24 = CONVERT TMP_23 to IRocketJoeToken
Converting TMP_23

Name: TMP_23 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_23 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_24 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 2
RocketJoeToken
[i]Type for TMP_24

Name: TMP_24 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
XXXX
rJoe_1(IRocketJoeToken) := TMP_24(IRocketJoeToken)
asgn
init
end
_______________

Name: TMP_24 Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef

Name: rJoe Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 2
Finance type key: (-1, -1)
[i]Type for rJoe

Name: rJoe Function: initialize
Num: -1
Den: -1
Address: 2
Norm: 18
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: 2
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_5(IRocketJoeFactory), function:rJoePerAvax, arguments:[]  
High Call: rJoePerAvax
Running querryfc
Written func info: RocketJoeFactory, rJoePerAvax
Retvar: ('c', ['global:rJoe'], ['global:wavax'], 0, "'u'", 'u')
{'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3, 'global:issuer': 4, 'global:_owner': 5, 'initialize:_issuer': -999, 'initialize:_token': -998, 'pairBalance:_user': -997, 'initialize:TMP_16': 6, 'global:msg.sender': 6, 'global:global:rJoe': 7, 'initialize:TMP_40': 8, 'global:this': 8}
{'[global:wavax]': 1, '[global:rJoe]': 2, 'global:wavax': 3, 'global:issuer': 4, 'global:_owner': 5, 'initialize:_issuer': -999, 'initialize:_token': -998, 'pairBalance:_user': -997, 'initialize:TMP_16': 6, 'global:msg.sender': 6, 'global:global:rJoe': 7, 'initialize:TMP_40': 8, 'global:this': 8}
([7], [3], 0, "'u'", 'u', -1)
[i]Type for TMP_25

Name: TMP_25 Function: initialize
Num: 7
Den: 3
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_6(IRocketJoeFactory) := ϕ(['rocketJoeFactory_5', 'rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
rJoePerAvax_1(uint256) := TMP_25(uint256)
asgn
init
end
_______________

Name: TMP_25 Function: initialize
Num: 7
Den: 3
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: rJoePerAvax Function: initialize
Num: 7
Den: 3
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
7
3
Finance type key: (-1, -1)
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: initialize
Num: 7
Den: 3
Address: u
Norm: 0
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_26(bool) = _maxWithdrawPenalty_1 <= 500000000000000000
init
end
init
end
lnorm: u rnorm: 17
[i]Type for TMP_26

Name: TMP_26 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_27(None) = SOLIDITY_CALL require(bool,string)(TMP_26,LaunchEvent: maxWithdrawPenalty too big)
[i]Type for TMP_27

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_28(bool) = _fixedWithdrawPenalty_1 <= 500000000000000000
init
end
init
end
lnorm: u rnorm: 17
[i]Type for TMP_28

Name: TMP_28 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_29(None) = SOLIDITY_CALL require(bool,string)(TMP_28,LaunchEvent: fixedWithdrawPenalty too big)
[i]Type for TMP_29

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_30(bool) = _userTimelock_1 <= 604800
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_30

Name: TMP_30 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_31(None) = SOLIDITY_CALL require(bool,string)(TMP_30,LaunchEvent: can't lock user LP for more than 7 days)
[i]Type for TMP_31

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_32(bool) = _issuerTimelock_1 > _userTimelock_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_32

Name: TMP_32 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_33(None) = SOLIDITY_CALL require(bool,string)(TMP_32,LaunchEvent: issuer can't withdraw before users)
[i]Type for TMP_33

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_34(bool) = _auctionStart_1 > block.timestamp
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_34

Name: TMP_34 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,LaunchEvent: start of phase 1 cannot be in the past)
[i]Type for TMP_35

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
issuer_1(address) := _issuer_1(address)
asgn
init
end
_______________

Name: _issuer Function: None
Num: 
Den: 
Address: -999
Norm: u
LF: _issuer
Value: u
Fields: 
Finance Type: undef

Name: issuer Function: initialize
Num: -1
Den: -1
Address: -999
Norm: u
LF: _issuer
Value: u
Fields: 
Finance Type: undef
Source address: -999
Finance type key: (-1, -1)
[i]Type for issuer

Name: issuer Function: initialize
Num: -1
Den: -1
Address: -999
Norm: u
LF: _issuer
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
auctionStart_1(uint256) := _auctionStart_1(uint256)
asgn
init
end
_______________

Name: _auctionStart Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: auctionStart Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for auctionStart

Name: auctionStart Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_36(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_6(IRocketJoeFactory), function:PHASE_ONE_DURATION, arguments:[]  
High Call: PHASE_ONE_DURATION
Running querryfc
Written func info: RocketJoeFactory, PHASE_ONE_DURATION
[i]Type for TMP_36

Name: TMP_36 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_7(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_6', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_1(uint256) := TMP_36(uint256)
asgn
init
end
_______________

Name: TMP_36 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PHASE_ONE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_37(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_7(IRocketJoeFactory), function:PHASE_ONE_NO_FEE_DURATION, arguments:[]  
High Call: PHASE_ONE_NO_FEE_DURATION
Running querryfc
Written func info: RocketJoeFactory, PHASE_ONE_NO_FEE_DURATION
[i]Type for TMP_37

Name: TMP_37 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_8(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_7', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_NO_FEE_DURATION_1(uint256) := TMP_37(uint256)
asgn
init
end
_______________

Name: TMP_37 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PHASE_ONE_NO_FEE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_38(uint256) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_8(IRocketJoeFactory), function:PHASE_TWO_DURATION, arguments:[]  
High Call: PHASE_TWO_DURATION
Running querryfc
Written func info: RocketJoeFactory, PHASE_TWO_DURATION
[i]Type for TMP_38

Name: TMP_38 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_9(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15', 'rocketJoeFactory_8'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_TWO_DURATION_1(uint256) := TMP_38(uint256)
asgn
init
end
_______________

Name: TMP_38 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PHASE_TWO_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_39 = CONVERT _token_1 to IERC20Metadata
Converting _token_1

Name: _token Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _token
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: _token Function: None
Num: 
Den: 
Address: -998
Norm: u
LF: _token
Value: u
Fields: 
Finance Type: undef

Name: TMP_39 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998
ERC20Metadata
[i]Type for TMP_39

Name: TMP_39 Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
token_1(IERC20Metadata) := TMP_39(IERC20Metadata)
asgn
init
end
_______________

Name: TMP_39 Function: initialize
Num: 
Den: 
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998
Finance type key: (-1, -1)
[i]Type for token

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: -998
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
TMP_40 = CONVERT this to address
Converting this
8
[i]Type for TMP_40

Name: TMP_40 Function: initialize
Num: 
Den: 
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:token_1(IERC20Metadata), function:balanceOf, arguments:['TMP_40']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Metadata, balanceOf
Handling balance function!
-998
[i]Type for TMP_41

Name: TMP_41 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
token_2(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_1', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_41(uint256)
asgn
init
end
_______________

Name: TMP_41 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: balance Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
Finance type key: (0, -1)
[i]Type for balance

Name: balance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _tokenIncentivesPercent, Num: 1
Globalname: _tokenIncentivesPercent
Name: tokenIncentivesPercent, Num: 1
Globalname: tokenIncentivesPercent
End popogation
tokenIncentivesPercent_1(uint256) := _tokenIncentivesPercent_1(uint256)
asgn
init
end
_______________

Name: _tokenIncentivesPercent Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIncentivesPercent Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for tokenIncentivesPercent

Name: tokenIncentivesPercent Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _tokenIncentivesPercent, Num: 1
Globalname: _tokenIncentivesPercent
End popogation
TMP_42(uint256) = balance_1 (c)* 1000000000000000000
testing mul...
init
end
init
end

Name: balance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 6 rnorm: 18
init
end
_______________

Name: balance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_42 Function: initialize
Num: 
Den: 
Address: u
Norm: 24
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_42

Name: TMP_42 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 24
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance
XXXX
TMP_43(uint256) = 1000000000000000000 (c)+ _tokenIncentivesPercent_1
init
end
init
end
init
end
_______________

Name: 1000000000000000000 Function: None
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_43 Function: initialize
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_43

Name: TMP_43 Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_44(uint256) = TMP_42 (c)/ TMP_43
init
end
init
end
lnorm: 24 rnorm: 18
init
end
_______________

Name: TMP_42 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 24
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance

Name: TMP_44 Function: initialize
Num: 
Den: 
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
init
end
init
end
lnorm: 24 rnorm: 18
init
end
_______________

Name: TMP_42 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 24
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance

Name: TMP_44 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-1
[i]Type for TMP_44

Name: TMP_44 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenReserve_1(uint256) := TMP_44(uint256)
asgn
init
end
_______________

Name: TMP_44 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenReserve Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-1
Finance type key: (0, -1)
[i]Type for tokenReserve

Name: tokenReserve Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_45(uint256) = balance_1 (c)- tokenReserve_1
init
end
init
end
-998
-1
lnorm: 6 rnorm: 6
Finance type key: (0, 0)
init
end
_______________

Name: balance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance

Name: TMP_45 Function: initialize
Num: 
Den: 
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_45

Name: TMP_45 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_1(uint256) := TMP_45(uint256)
asgn
init
end
_______________

Name: TMP_45 Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenIncentivesForUsers Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-1
Finance type key: (0, -1)
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
tokenIncentivesBalance_1(uint256) := tokenIncentivesForUsers_1(uint256)
asgn
init
end
_______________

Name: tokenIncentivesForUsers Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenIncentivesBalance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-1
Finance type key: (0, -1)
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: initialize
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Source address: u
Name: _floorPrice, Num: 1
Globalname: _floorPrice
End popogation
floorPrice_1(uint256) := _floorPrice_1(uint256)
asgn
init
end
_______________

Name: _floorPrice Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for floorPrice

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
maxWithdrawPenalty_1(uint256) := _maxWithdrawPenalty_1(uint256)
asgn
init
end
_______________

Name: _maxWithdrawPenalty Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: maxWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
fixedWithdrawPenalty_1(uint256) := _fixedWithdrawPenalty_1(uint256)
asgn
init
end
_______________

Name: _fixedWithdrawPenalty Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: fixedWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Source address: u
Name: _maxAllocation, Num: 1
Globalname: _maxAllocation
End popogation
maxAllocation_1(uint256) := _maxAllocation_1(uint256)
asgn
init
end
_______________

Name: _maxAllocation Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: maxAllocation Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for maxAllocation

Name: maxAllocation Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
userTimelock_1(uint256) := _userTimelock_1(uint256)
asgn
init
end
_______________

Name: _userTimelock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: userTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for userTimelock

Name: userTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
issuerTimelock_1(uint256) := _issuerTimelock_1(uint256)
asgn
init
end
_______________

Name: _issuerTimelock Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: issuerTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for issuerTimelock

Name: issuerTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
initialized_3(bool) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for initialized

Name: initialized Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Source address: u
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



currentPhase


auctionStart_2(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_0', 'PHASE_TWO_DURATION_1'])
TMP_47(bool) = block.timestamp < auctionStart_2
TMP_48(bool) = auctionStart_2 == 0
TMP_49(bool) = TMP_47 || TMP_48
CONDITION TMP_49
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
TMP_51(bool) = block.timestamp < TMP_50
CONDITION TMP_51
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
RETURN REF_10
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
TMP_54(bool) = block.timestamp < TMP_53
CONDITION TMP_54
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
RETURN REF_11
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
RETURN REF_12
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
RETURN REF_13


Propogating parameters and globals to SSA variables...
End popogation

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
auctionStart_2(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
Phi
[i]Type for auctionStart

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_0', 'PHASE_TWO_DURATION_1'])
Phi
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_47(bool) = block.timestamp < auctionStart_2
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_47

Name: TMP_47 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_48(bool) = auctionStart_2 == 0
[i]Type for TMP_48

Name: TMP_48 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_49(bool) = TMP_47 || TMP_48
[i]Type for TMP_49

Name: TMP_49 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_50 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_50

Name: TMP_50 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(bool) = block.timestamp < TMP_50
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_51

Name: TMP_51 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_10

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_10
RETURN
init
end

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_52 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_52

Name: TMP_52 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_53 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_53

Name: TMP_53 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(bool) = block.timestamp < TMP_53
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_54

Name: TMP_54 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_11

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_11
RETURN
init
end

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_12

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_12
RETURN
init
end

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_13

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_13
RETURN
init
end

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


auctionStart_2(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_0', 'PHASE_TWO_DURATION_1'])
TMP_47(bool) = block.timestamp < auctionStart_2
TMP_48(bool) = auctionStart_2 == 0
TMP_49(bool) = TMP_47 || TMP_48
CONDITION TMP_49
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
TMP_51(bool) = block.timestamp < TMP_50
CONDITION TMP_51
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
RETURN REF_10
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
TMP_54(bool) = block.timestamp < TMP_53
CONDITION TMP_54
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
RETURN REF_11
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
RETURN REF_12
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
RETURN REF_13


Propogating parameters and globals to SSA variables...
End popogation

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
auctionStart_2(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
Phi
[i]Type for auctionStart

Name: auctionStart Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_2(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_TWO_DURATION_2(uint256) := ϕ(['PHASE_TWO_DURATION_0', 'PHASE_TWO_DURATION_1'])
Phi
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_47(bool) = block.timestamp < auctionStart_2
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_47

Name: TMP_47 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_48(bool) = auctionStart_2 == 0
[i]Type for TMP_48

Name: TMP_48 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_49(bool) = TMP_47 || TMP_48
[i]Type for TMP_49

Name: TMP_49 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_50(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_50 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_50

Name: TMP_50 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_51(bool) = block.timestamp < TMP_50
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_51

Name: TMP_51 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_10(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_10

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_10
RETURN
init
end

Name: Phase.NotStarted Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
TMP_52(uint256) = auctionStart_2 (c)+ PHASE_ONE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_52 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_52

Name: TMP_52 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_53(uint256) = TMP_52 (c)+ PHASE_TWO_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_TWO_DURATION Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_53 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_53

Name: TMP_53 Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_54(bool) = block.timestamp < TMP_53
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_54

Name: TMP_54 Function: currentPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_11(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_11

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_11
RETURN
init
end

Name: Phase.PhaseOne Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_12(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_12

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_12
RETURN
init
end

Name: Phase.PhaseTwo Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_13(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_13

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN REF_13
RETURN
init
end

Name: Phase.PhaseThree Function: currentPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



depositAVAX


issuer_2(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_1', 'rJoe_5', 'rJoe_0', 'rJoe_4', 'rJoe_6'])
WAVAX_3(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
maxAllocation_2(uint256) := ϕ(['maxAllocation_4', 'maxAllocation_1', 'maxAllocation_0'])
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
TMP_55(bool) = msg.sender != issuer_4
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
TMP_57(bool) = msg.value > 0
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
TMP_59(uint256) = REF_15 (c)+ msg.value
newAllocation_1(uint256) := TMP_59(uint256)
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
TMP_62(bool) = newAllocation_1 > REF_16
CONDITION TMP_62
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
TMP_63(uint256) = newAllocation_1 (c)- REF_17
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
rJoeNeeded_1(uint256) := TMP_64(uint256)
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_2 (-> ['getUserInfo'])", "user_1 (-> ['getUserInfo'])"])
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_0', 'rJoeNeeded_1'])
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
TMP_65(bool) = rJoeNeeded_2 > 0
CONDITION TMP_65
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
WAVAX_8(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_7', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_5', 'rJoe_6', 'rJoe_1'])
WAVAX_7(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_6', 'WAVAX_8'])
Emit UserParticipated(msg.sender,msg.value,rJoeNeeded_2)


Propogating parameters and globals to SSA variables...
End popogation
Name: issuer, Num: 2
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid
Name: rJoe, Num: 2
Globalname: rJoe
global...

Name: rJoe Function: initialize
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
Phid
Name: WAVAX, Num: 3
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxAllocation, Num: 2
Globalname: maxAllocation
global...

Name: maxAllocation Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: getUserInfo, Num: 1
Globalname: getUserInfo
global...

Name: PIC_17 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: wavaxReserve, Num: 1
Globalname: wavaxReserve
global...

Name: PIC_11 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
issuer_2(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: depositAVAX
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_1', 'rJoe_5', 'rJoe_0', 'rJoe_4', 'rJoe_6'])
Phi
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_3(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
maxAllocation_2(uint256) := ϕ(['maxAllocation_4', 'maxAllocation_1', 'maxAllocation_0'])
Phi
[i]Type for maxAllocation

Name: maxAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
[[-1], [-1], 0, None, [], -1, 'u', 'u']

Name: _stopped Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Name: stopped, Num: 2
Globalname: stopped
global...

Name: PIC_15 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
stopped_2(bool) := ϕ(['stopped_0', 'stopped_1'])
Phi
[i]Type for stopped

Name: stopped Function: isStopped
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_239(None) = SOLIDITY_CALL require(bool,string)(stopped_2,LaunchEvent: is still running)
[i]Type for TMP_239

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_240 = ! stopped_2 
[i]Type for TMP_240

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,LaunchEvent: stopped)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: stopped Function: isStopped
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
stopped_2(bool) := ϕ(['stopped_0', 'stopped_1'])
Phi
[i]Type for stopped

Name: stopped Function: isStopped
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_239(None) = SOLIDITY_CALL require(bool,string)(stopped_2,LaunchEvent: is still running)
[i]Type for TMP_239

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_240 = ! stopped_2 
[i]Type for TMP_240

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_241(None) = SOLIDITY_CALL require(bool,string)(TMP_240,LaunchEvent: stopped)
[i]Type for TMP_241

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
Source address: u
[i]Type for REF_22

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: issuer, Num: 4
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4
End popogation
TMP_55(bool) = msg.sender != issuer_4
[i]Type for TMP_55

Name: TMP_55 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_57(bool) = msg.value > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: msg.value Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_57 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_57

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: getUserInfo, Num: 3
Globalname: getUserInfo
global...

Name: PIC_17 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: user, Num: 1 (-> ['getUserInfo'])
Globalname: user
End popogation
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
INDEX
Source address: u
[i]Type for REF_14

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_14 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: newAllocation, Num: 1
Globalname: newAllocation
End popogation
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
OUT KEY: depositAVAX_user_balance
OUT KEY: depositAVAX_user_balance
FTT: None
No field found
[i]Type for REF_15

Name: user.balance Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_59(uint256) = REF_15 (c)+ msg.value
init
end
init
end
init
end
_______________

Name: msg.value Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
[i]Type for TMP_59

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newAllocation_1(uint256) := TMP_59(uint256)
asgn
init
end
_______________

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for newAllocation

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: newAllocation, Num: 1
Globalname: newAllocation
Name: maxAllocation, Num: 4
Globalname: maxAllocation
global...

Name: maxAllocation Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: maxAllocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_60 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: maxAllocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_60

Name: TMP_60 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
MEMBER
init
end
init
end
OUT KEY: depositAVAX_user_allocation
OUT KEY: depositAVAX_user_allocation
FTT: None
No field found
[i]Type for REF_16

Name: user.allocation Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: allocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.allocation Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_62(bool) = newAllocation_1 > REF_16
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user.allocation Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_62 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_62

Name: TMP_62 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: rJoeNeeded, Num: 1
Globalname: rJoeNeeded
End popogation
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_17

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: allocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(uint256) = newAllocation_1 (c)- REF_17
init
end
init
end
init
end
_______________

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_63 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_63

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _avaxAmount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _avaxAmount_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: rJoePerAvax, Num: 2
Globalname: rJoePerAvax
global...

Name: rJoePerAvax Function: initialize
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Phid
_avaxAmount_1(uint256) := ϕ(['TMP_63'])
Phi
[i]Type for _avaxAmount

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rJoePerAvax_2(uint256) := ϕ(['rJoePerAvax_0', 'rJoePerAvax_1'])
Phi
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_199(uint256) = _avaxAmount_1 (c)* rJoePerAvax_2
testing mul...
init
end
init
end

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: TMP_199 Function: getRJoeAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_199

Name: TMP_199 Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_199
RETURN
init
end

Name: TMP_199 Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _avaxAmount_1 Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Phid
_avaxAmount_1(uint256) := ϕ(['TMP_63'])
Phi
[i]Type for _avaxAmount

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rJoePerAvax_2(uint256) := ϕ(['rJoePerAvax_0', 'rJoePerAvax_1'])
Phi
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_199(uint256) = _avaxAmount_1 (c)* rJoePerAvax_2
testing mul...
init
end
init
end

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: TMP_199 Function: getRJoeAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_199

Name: TMP_199 Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_199
RETURN
init
end

Name: TMP_199 Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Source address: u
[i]Type for TMP_64

Name: TMP_64 Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rJoeNeeded_1(uint256) := TMP_64(uint256)
asgn
init
end
_______________

Name: TMP_64 Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: rJoeNeeded Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (-1, -1)
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: user, Num: 3 (-> ['getUserInfo'])
Globalname: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: rJoeNeeded, Num: 2
Globalname: rJoeNeeded

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_2 (-> ['getUserInfo'])", "user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_0', 'rJoeNeeded_1'])
Phi
init
end
_______________

Name: rJoeNeeded Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: rJoeNeeded Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: getUserInfo, Num: 5
Globalname: getUserInfo
global...

Name: PIC_17 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: user, Num: 4 (-> ['getUserInfo'])
Globalname: user
End popogation
Name: user, Num: 4 (-> ['getUserInfo'])
Globalname: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_19

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
asgn
init
end
_______________

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: getUserInfo, Num: 4
Globalname: getUserInfo
global...

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
End popogation
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_18

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: allocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: allocation
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
asgn
init
end
_______________

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: allocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: wavaxReserve, Num: 4
Globalname: wavaxReserve
global...

Name: PIC_11 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: wavaxReserve, Num: 5
Globalname: wavaxReserve
global...

Name: PIC_11 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
init
end
init
end
init
end
_______________

Name: wavaxReserve Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_65(bool) = rJoeNeeded_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_65

Name: TMP_65 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: WAVAX, Num: 7
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1
End popogation
Name: WAVAX, Num: 8
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
High Call: deposit
WAVAX_8(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_7', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: rJoe, Num: 5
Globalname: rJoe
global...

Name: rJoe Function: initialize
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
Source address: 2
End popogation
Name: rJoe, Num: 6
Globalname: rJoe
global...

Name: rJoe Function: initialize
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
Source address: 2

Name: None Function: None
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
High Call: burnFrom
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_5', 'rJoe_6', 'rJoe_1'])
Phi
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_7(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_6', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


issuer_2(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_1', 'rJoe_5', 'rJoe_0', 'rJoe_4', 'rJoe_6'])
WAVAX_3(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
maxAllocation_2(uint256) := ϕ(['maxAllocation_4', 'maxAllocation_1', 'maxAllocation_0'])
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
TMP_55(bool) = msg.sender != issuer_4
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
TMP_57(bool) = msg.value > 0
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
TMP_59(uint256) = REF_15 (c)+ msg.value
newAllocation_1(uint256) := TMP_59(uint256)
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
TMP_62(bool) = newAllocation_1 > REF_16
CONDITION TMP_62
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
TMP_63(uint256) = newAllocation_1 (c)- REF_17
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
rJoeNeeded_1(uint256) := TMP_64(uint256)
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_2 (-> ['getUserInfo'])", "user_1 (-> ['getUserInfo'])"])
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_0', 'rJoeNeeded_1'])
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
TMP_65(bool) = rJoeNeeded_2 > 0
CONDITION TMP_65
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
WAVAX_8(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_7', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_5', 'rJoe_6', 'rJoe_1'])
WAVAX_7(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_6', 'WAVAX_8'])
Emit UserParticipated(msg.sender,msg.value,rJoeNeeded_2)


Propogating parameters and globals to SSA variables...
End popogation

Name: issuer Function: depositAVAX
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
Phid

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
issuer_2(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: depositAVAX
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_1', 'rJoe_5', 'rJoe_0', 'rJoe_4', 'rJoe_6'])
Phi
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_3(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
maxAllocation_2(uint256) := ϕ(['maxAllocation_4', 'maxAllocation_1', 'maxAllocation_0'])
Phi
[i]Type for maxAllocation

Name: maxAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
End popogation
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_22

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_55(bool) = msg.sender != issuer_4
[i]Type for TMP_55

Name: TMP_55 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_57(bool) = msg.value > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: msg.value Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_57 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_57

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1 (-> ['getUserInfo'])
Globalname: user
End popogation
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
INDEX
Source address: u
[i]Type for REF_14

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_14 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: newAllocation, Num: 1
Globalname: newAllocation
End popogation
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_15

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(uint256) = REF_15 (c)+ msg.value
init
end
init
end
init
end
_______________

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_59 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_59

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newAllocation_1(uint256) := TMP_59(uint256)
asgn
init
end
_______________

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: newAllocation Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for newAllocation

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_60

Name: TMP_60 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
MEMBER
init
end
init
end
init
end
_______________

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_16

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_62(bool) = newAllocation_1 > REF_16
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_62

Name: TMP_62 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: rJoeNeeded, Num: 1
Globalname: rJoeNeeded
End popogation
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
MEMBER
init
end
init
end
init
end
_______________

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_17

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: allocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(uint256) = newAllocation_1 (c)- REF_17
init
end
init
end
init
end
_______________

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_63 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_63

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
init
end
init
end
_______________

Name: PIC_58 Function: None
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_64 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_64

Name: TMP_64 Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rJoeNeeded_1(uint256) := TMP_64(uint256)
asgn
init
end
_______________

Name: TMP_64 Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: rJoeNeeded Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (-1, -1)
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: user, Num: 3 (-> ['getUserInfo'])
Globalname: user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Phid
Name: rJoeNeeded, Num: 2
Globalname: rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_2 (-> ['getUserInfo'])", "user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_0', 'rJoeNeeded_1'])
Phi
init
end
_______________

Name: rJoeNeeded Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: rJoeNeeded Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 4 (-> ['getUserInfo'])
Globalname: user
End popogation
Name: user, Num: 4 (-> ['getUserInfo'])
Globalname: user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Phid

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_19

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
asgn
init
end
_______________

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
End popogation
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Phid

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
MEMBER
init
end
init
end
init
end
_______________

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_18

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: allocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef

Name: user Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
asgn
init
end
_______________

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: allocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
init
end
init
end
init
end
_______________

Name: wavaxReserve Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_65(bool) = rJoeNeeded_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_65

Name: TMP_65 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
High Call: deposit
WAVAX_8(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_7', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
Phid

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
High Call: burnFrom
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_5', 'rJoe_6', 'rJoe_1'])
Phi
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_7(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_6', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation


issuer_2(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_1', 'rJoe_5', 'rJoe_0', 'rJoe_4', 'rJoe_6'])
WAVAX_3(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
maxAllocation_2(uint256) := ϕ(['maxAllocation_4', 'maxAllocation_1', 'maxAllocation_0'])
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
TMP_55(bool) = msg.sender != issuer_4
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
TMP_57(bool) = msg.value > 0
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
TMP_59(uint256) = REF_15 (c)+ msg.value
newAllocation_1(uint256) := TMP_59(uint256)
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
TMP_62(bool) = newAllocation_1 > REF_16
CONDITION TMP_62
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
TMP_63(uint256) = newAllocation_1 (c)- REF_17
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
rJoeNeeded_1(uint256) := TMP_64(uint256)
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_2 (-> ['getUserInfo'])", "user_1 (-> ['getUserInfo'])"])
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_0', 'rJoeNeeded_1'])
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
TMP_65(bool) = rJoeNeeded_2 > 0
CONDITION TMP_65
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
WAVAX_8(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_7', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_5', 'rJoe_6', 'rJoe_1'])
WAVAX_7(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_6', 'WAVAX_8'])
Emit UserParticipated(msg.sender,msg.value,rJoeNeeded_2)


Propogating parameters and globals to SSA variables...
End popogation

Name: issuer Function: depositAVAX
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
Phid

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
issuer_2(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: depositAVAX
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
rJoe_2(IRocketJoeToken) := ϕ(['rJoe_1', 'rJoe_5', 'rJoe_0', 'rJoe_4', 'rJoe_6'])
Phi
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_3(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
maxAllocation_2(uint256) := ϕ(['maxAllocation_4', 'maxAllocation_1', 'maxAllocation_0'])
Phi
[i]Type for maxAllocation

Name: maxAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_1(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_1(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
End popogation
REF_22(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_22

Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_22)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_55(bool) = msg.sender != issuer_4
[i]Type for TMP_55

Name: TMP_55 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_56(None) = SOLIDITY_CALL require(bool,string)(TMP_55,LaunchEvent: issuer cannot participate)
[i]Type for TMP_56

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_57(bool) = msg.value > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: msg.value Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_57

Name: TMP_57 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,LaunchEvent: expected non-zero AVAX to deposit)
[i]Type for TMP_58

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_14(LaunchEvent.UserInfo) -> getUserInfo_3[msg.sender]
INDEX
Source address: u
[i]Type for REF_14

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_14(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_14 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_15(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_15

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_59(uint256) = REF_15 (c)+ msg.value
init
end
init
end
init
end
_______________

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_59

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
newAllocation_1(uint256) := TMP_59(uint256)
asgn
init
end
_______________

Name: TMP_59 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for newAllocation

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_60(bool) = newAllocation_1 <= maxAllocation_4
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_60

Name: TMP_60 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_61(None) = SOLIDITY_CALL require(bool,string)(TMP_60,LaunchEvent: amount exceeds max allocation)
[i]Type for TMP_61

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_16(uint256) -> user_1 (-> ['getUserInfo']).allocation
MEMBER
init
end
init
end
init
end
_______________

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_16

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_62(bool) = newAllocation_1 > REF_16
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_62

Name: TMP_62 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_17(uint256) -> user_1 (-> ['getUserInfo']).allocation
MEMBER
init
end
init
end
init
end
_______________

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_17

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: allocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_63(uint256) = newAllocation_1 (c)- REF_17
init
end
init
end
init
end
_______________

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_63

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_64(uint256) = INTERNAL_CALL, LaunchEvent.getRJoeAmount(uint256)(TMP_63)
init
end
init
end
_______________

Name: PIC_58 Function: None
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_64 Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
7
7
3
3
[i]Type for TMP_64

Name: TMP_64 Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rJoeNeeded_1(uint256) := TMP_64(uint256)
asgn
init
end
_______________

Name: TMP_64 Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: rJoeNeeded Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
7
7
3
3
Finance type key: (-1, -1)
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Phid

Name: rJoeNeeded Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
user_3 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_2 (-> ['getUserInfo'])", "user_1 (-> ['getUserInfo'])"])
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
rJoeNeeded_2(uint256) := ϕ(['rJoeNeeded_0', 'rJoeNeeded_1'])
Phi
[i]Type for rJoeNeeded

Name: rJoeNeeded Function: depositAVAX
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Phid

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_19(uint256) -> user_3 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_19

Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_4 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_3 (-> ['getUserInfo'])"])
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
REF_19 (->user_4 (-> ['getUserInfo'])) := newAllocation_1(uint256)
asgn
init
end
_______________

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_19

Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_3 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_19 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_5(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_4 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Phid

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_18(uint256) -> user_1 (-> ['getUserInfo']).allocation
MEMBER
init
end
init
end
init
end
_______________

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_18

Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: allocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
[i]Type for user

Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
XXXX
REF_18 (->user_2 (-> ['getUserInfo'])) := newAllocation_1(uint256)
asgn
init
end
_______________

Name: newAllocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_18

Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: allocation
#################
Member: 
Name: user Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, allocation
Finance Type: undef
Fieldf: 
Name: allocation Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_18 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: allocation Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_4(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
wavaxReserve_5(uint256) = wavaxReserve_4 (c)+ msg.value
init
end
init
end
init
end
_______________

Name: wavaxReserve Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for wavaxReserve

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_65(bool) = rJoeNeeded_2 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_65

Name: TMP_65 Function: depositAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:WAVAX_7(IWAVAX), function:deposit, arguments:[] value:msg.value 
High Call: deposit
WAVAX_8(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_7', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
Phid

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:rJoe_5(IRocketJoeToken), function:burnFrom, arguments:['msg.sender', 'rJoeNeeded_2']  
High Call: burnFrom
rJoe_6(IRocketJoeToken) := ϕ(['rJoe_4', 'rJoe_5', 'rJoe_6', 'rJoe_1'])
Phi
[i]Type for rJoe

Name: rJoe Function: depositAVAX
Num: -1
Den: -1
Address: 2
Norm: u
LF: RocketJoeToken
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_7(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_6', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: depositAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



withdrawAVAX
Finding type for _amount(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
TMP_72(bool) = _currentPhase_1 == REF_23
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
TMP_73(bool) = _currentPhase_1 == REF_24
TMP_74(bool) = TMP_72 || TMP_73
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
TMP_76(bool) = _amount_1 > 0
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
TMP_78(bool) = REF_26 >= _amount_1
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
TMP_81(uint256) = _amount_1 (c)* TMP_80
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
feeAmount_1(uint256) := TMP_82(uint256)
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
amountMinusFee_1(uint256) := TMP_83(uint256)
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_12', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
TMP_86(bool) = feeAmount_1 > 0
CONDITION TMP_86
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: WAVAX, Num: 9
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: rocketJoeFactory, Num: 10
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
Name: getUserInfo, Num: 6
Globalname: getUserInfo
global...

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: wavaxReserve, Num: 6
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
Name: _currentPhase, Num: 1
Globalname: _currentPhase
End popogation
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_71

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
asgn
init
end
_______________

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for _currentPhase

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _currentPhase, Num: 1
Globalname: _currentPhase
End popogation
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
Source address: u
[i]Type for REF_23

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(bool) = _currentPhase_1 == REF_23
[i]Type for TMP_72

Name: TMP_72 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
Source address: u
[i]Type for REF_24

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = _currentPhase_1 == REF_24
[i]Type for TMP_73

Name: TMP_73 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74(bool) = TMP_72 || TMP_73
[i]Type for TMP_74

Name: TMP_74 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Source address: u
Name: _amount, Num: 1
Globalname: _amount
End popogation
TMP_76(bool) = _amount_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _amount Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_76 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_76

Name: TMP_76 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: getUserInfo, Num: 8
Globalname: getUserInfo
global...

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: user, Num: 1 (-> ['getUserInfo'])
Globalname: user
End popogation
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
INDEX
Source address: u
[i]Type for REF_25

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_25 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
OUT KEY: withdrawAVAX_user_balance
OUT KEY: withdrawAVAX_user_balance
FTT: None
No field found
[i]Type for REF_26

Name: user.balance Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_78(bool) = REF_26 >= _amount_1
init
end
init
end
lnorm: u rnorm: u
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_78 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user.balance Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_78

Name: TMP_78 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
Name: getUserInfo, Num: 9
Globalname: getUserInfo
global...

Name: getUserInfo Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
End popogation
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_27

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef

Name: user Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
init
end
init
end
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: feeAmount, Num: 1
Globalname: feeAmount
End popogation
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
Propogating parameters and globals to SSA variables...
End popogation
Name: auctionStart, Num: 3
Globalname: auctionStart
global...

Name: auctionStart Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: PHASE_ONE_DURATION, Num: 3
Globalname: PHASE_ONE_DURATION
global...

Name: PHASE_ONE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: PHASE_ONE_NO_FEE_DURATION, Num: 2
Globalname: PHASE_ONE_NO_FEE_DURATION
global...

Name: PHASE_ONE_NO_FEE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: maxWithdrawPenalty, Num: 2
Globalname: maxWithdrawPenalty
global...

Name: maxWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: fixedWithdrawPenalty, Num: 2
Globalname: fixedWithdrawPenalty
global...

Name: fixedWithdrawPenalty Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
auctionStart_3(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
Phi
[i]Type for auctionStart

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_3(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_NO_FEE_DURATION_2(uint256) := ϕ(['PHASE_ONE_NO_FEE_DURATION_1', 'PHASE_ONE_NO_FEE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxWithdrawPenalty_2(uint256) := ϕ(['maxWithdrawPenalty_1', 'maxWithdrawPenalty_0'])
Phi
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fixedWithdrawPenalty_2(uint256) := ϕ(['fixedWithdrawPenalty_1', 'fixedWithdrawPenalty_0'])
Phi
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: timeElapsed, Num: 1
Globalname: timeElapsed
End popogation
TMP_189(uint256) = block.timestamp (c)- auctionStart_3
init
end
init
end
init
end
_______________

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_189 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_189

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_189(uint256)
asgn
init
end
_______________

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: timeElapsed Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_190(bool) = timeElapsed_1 < PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_190

Name: TMP_190 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_192(bool) = timeElapsed_1 < PHASE_ONE_DURATION_3
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_192

Name: TMP_192 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_193(uint256) = timeElapsed_1 (c)- PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_193 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_193

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(uint256) = TMP_193 (c)* maxWithdrawPenalty_2
testing mul...
init
end
init
end

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_194 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_194

Name: TMP_194 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_195(uint256) = PHASE_ONE_DURATION_3 (c)- PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_195 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_196 = CONVERT TMP_195 to uint256
Converting TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_196 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_196

Name: TMP_196 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_197(uint256) = TMP_194 (c)/ TMP_196
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_197

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_197
RETURN
init
end

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN fixedWithdrawPenalty_2
RETURN
init
end

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
TMP_191(uint256) = maxWithdrawPenalty_2 (c)* 0
testing mul...
init
end
init
end

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_191 Function: getPenalty
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_191

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
RETURN TMP_191
RETURN
init
end

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_ONE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
auctionStart_3(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
Phi
[i]Type for auctionStart

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_3(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_NO_FEE_DURATION_2(uint256) := ϕ(['PHASE_ONE_NO_FEE_DURATION_1', 'PHASE_ONE_NO_FEE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxWithdrawPenalty_2(uint256) := ϕ(['maxWithdrawPenalty_1', 'maxWithdrawPenalty_0'])
Phi
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fixedWithdrawPenalty_2(uint256) := ϕ(['fixedWithdrawPenalty_1', 'fixedWithdrawPenalty_0'])
Phi
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: timeElapsed, Num: 1
Globalname: timeElapsed
End popogation
TMP_189(uint256) = block.timestamp (c)- auctionStart_3
init
end
init
end
init
end
_______________

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_189 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_189

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_189(uint256)
asgn
init
end
_______________

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: timeElapsed Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_190(bool) = timeElapsed_1 < PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_190

Name: TMP_190 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_192(bool) = timeElapsed_1 < PHASE_ONE_DURATION_3
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_192

Name: TMP_192 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_193(uint256) = timeElapsed_1 (c)- PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_193 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_193

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(uint256) = TMP_193 (c)* maxWithdrawPenalty_2
testing mul...
init
end
init
end

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_194 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_194

Name: TMP_194 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_195(uint256) = PHASE_ONE_DURATION_3 (c)- PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_195 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_196 = CONVERT TMP_195 to uint256
Converting TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_196 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_196

Name: TMP_196 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_197(uint256) = TMP_194 (c)/ TMP_196
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_197

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_197
RETURN
init
end

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN fixedWithdrawPenalty_2
RETURN
init
end

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
TMP_191(uint256) = maxWithdrawPenalty_2 (c)* 0
testing mul...
init
end
init
end

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_191 Function: getPenalty
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_191

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
RETURN TMP_191
RETURN
init
end

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
([-1], [-1], 0, 0, 'u', -1)
[i]Type for TMP_80

Name: TMP_80 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_81(uint256) = _amount_1 (c)* TMP_80
testing mul...
init
end
init
end

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_80 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
init
end
_______________

Name: TMP_80 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: TMP_81 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_81

Name: TMP_81 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
init
end
init
end
lnorm: 0 rnorm: 18
init
end
init
end
init
end
lnorm: 0 rnorm: 18
init
end
[i]Type for TMP_82

Name: TMP_82 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
feeAmount_1(uint256) := TMP_82(uint256)
asgn
init
end
_______________

Name: TMP_82 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: feeAmount Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for feeAmount

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amountMinusFee, Num: 1
Globalname: amountMinusFee
End popogation
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
init
end
init
end
init
end
_______________

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: TMP_83 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_83

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
amountMinusFee_1(uint256) := TMP_83(uint256)
asgn
init
end
_______________

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: amountMinusFee Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for amountMinusFee

Name: amountMinusFee Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: wavaxReserve, Num: 9
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: wavaxReserve, Num: 10
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
init
end
init
end
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: WAVAX, Num: 12
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1
End popogation
Name: WAVAX, Num: 13
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: rocketJoeFactory, Num: 14
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
High Call: withdraw
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_12', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
init
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 0]

Name: _value Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _to_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _to_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_86(bool) = feeAmount_1 > 0
init
end
init
end
lnorm: -18 rnorm: 0
[i]Type for TMP_86

Name: TMP_86 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: rocketJoeFactory, Num: 15
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6
End popogation
Name: rocketJoeFactory, Num: 16
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
High Call: penaltyCollector
Running querryfc
Written func info: RocketJoeFactory, penaltyCollector
[i]Type for TMP_87

Name: TMP_87 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)
init
end
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _to Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], -18, None, [], -1, 'u', 0]

Name: _value Function: None
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _to_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _to_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
TMP_72(bool) = _currentPhase_1 == REF_23
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
TMP_73(bool) = _currentPhase_1 == REF_24
TMP_74(bool) = TMP_72 || TMP_73
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
TMP_76(bool) = _amount_1 > 0
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
TMP_78(bool) = REF_26 >= _amount_1
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
TMP_81(uint256) = _amount_1 (c)* TMP_80
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
feeAmount_1(uint256) := TMP_82(uint256)
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
amountMinusFee_1(uint256) := TMP_83(uint256)
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_12', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
TMP_86(bool) = feeAmount_1 > 0
CONDITION TMP_86
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
Name: _currentPhase, Num: 1
Globalname: _currentPhase
End popogation
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_71

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
asgn
init
end
_______________

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for _currentPhase

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _currentPhase, Num: 1
Globalname: _currentPhase
End popogation
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_23

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(bool) = _currentPhase_1 == REF_23
[i]Type for TMP_72

Name: TMP_72 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_24

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = _currentPhase_1 == REF_24
[i]Type for TMP_73

Name: TMP_73 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74(bool) = TMP_72 || TMP_73
[i]Type for TMP_74

Name: TMP_74 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = _amount_1 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1 (-> ['getUserInfo'])
Globalname: user
End popogation
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
INDEX
Source address: u
[i]Type for REF_25

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_25 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_26

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_78(bool) = REF_26 >= _amount_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
End popogation
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user

Name: user Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_27

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef

Name: user Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
init
end
init
end
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: feeAmount, Num: 1
Globalname: feeAmount
End popogation
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
[i]Type for TMP_80

Name: TMP_80 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_81(uint256) = _amount_1 (c)* TMP_80
testing mul...
init
end
init
end

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_80 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_81 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_81

Name: TMP_81 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
init
end
init
end
lnorm: u rnorm: 18
init
end
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_82

Name: TMP_82 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
feeAmount_1(uint256) := TMP_82(uint256)
asgn
init
end
_______________

Name: TMP_82 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: feeAmount Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for feeAmount

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amountMinusFee, Num: 1
Globalname: amountMinusFee
End popogation
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
init
end
init
end
init
end
_______________

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: TMP_83 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_83

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
amountMinusFee_1(uint256) := TMP_83(uint256)
asgn
init
end
_______________

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: amountMinusFee Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for amountMinusFee

Name: amountMinusFee Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
init
end
init
end
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
High Call: withdraw
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_12', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
init
init
end
Propogating parameters and globals to SSA variables...
End popogation
TMP_86(bool) = feeAmount_1 > 0
init
end
init
end
lnorm: -18 rnorm: 0
[i]Type for TMP_86

Name: TMP_86 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
High Call: penaltyCollector
Running querryfc
Written func info: RocketJoeFactory, penaltyCollector
[i]Type for TMP_87

Name: TMP_87 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _to Function: None
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], -18, None, [], -1, 'u', 0]

Name: _value Function: None
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _to, Num: 1
Globalname: _to

Name: _to_1 Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _to, Num: 1
Globalname: _to
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _to, Num: 1
Globalname: _to

Name: _to_1 Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _to, Num: 1
Globalname: _to
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
TMP_72(bool) = _currentPhase_1 == REF_23
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
TMP_73(bool) = _currentPhase_1 == REF_24
TMP_74(bool) = TMP_72 || TMP_73
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
TMP_76(bool) = _amount_1 > 0
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
TMP_78(bool) = REF_26 >= _amount_1
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
TMP_81(uint256) = _amount_1 (c)* TMP_80
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
feeAmount_1(uint256) := TMP_82(uint256)
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
amountMinusFee_1(uint256) := TMP_83(uint256)
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_12', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
TMP_86(bool) = feeAmount_1 > 0
CONDITION TMP_86
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
Name: _currentPhase, Num: 1
Globalname: _currentPhase
End popogation
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_71

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
asgn
init
end
_______________

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for _currentPhase

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _currentPhase, Num: 1
Globalname: _currentPhase
End popogation
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_23

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(bool) = _currentPhase_1 == REF_23
[i]Type for TMP_72

Name: TMP_72 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_24

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = _currentPhase_1 == REF_24
[i]Type for TMP_73

Name: TMP_73 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74(bool) = TMP_72 || TMP_73
[i]Type for TMP_74

Name: TMP_74 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = _amount_1 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
INDEX
Source address: u
[i]Type for REF_25

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_25 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_26

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_78(bool) = REF_26 >= _amount_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_27

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
init
end
init
end
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
[i]Type for TMP_80

Name: TMP_80 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_81(uint256) = _amount_1 (c)* TMP_80
testing mul...
init
end
init
end

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_80 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_81

Name: TMP_81 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
init
end
init
end
lnorm: u rnorm: 18
init
end
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_82

Name: TMP_82 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
feeAmount_1(uint256) := TMP_82(uint256)
asgn
init
end
_______________

Name: TMP_82 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for feeAmount

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
init
end
init
end
init
end
_______________

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_83

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
amountMinusFee_1(uint256) := TMP_83(uint256)
asgn
init
end
_______________

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: amountMinusFee Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for amountMinusFee

Name: amountMinusFee Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
init
end
init
end
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
High Call: withdraw
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_12', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
init
init
end
Propogating parameters and globals to SSA variables...
End popogation
TMP_86(bool) = feeAmount_1 > 0
init
end
init
end
lnorm: -18 rnorm: 0
[i]Type for TMP_86

Name: TMP_86 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
High Call: penaltyCollector
Running querryfc
Written func info: RocketJoeFactory, penaltyCollector
[i]Type for TMP_87

Name: TMP_87 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _to Function: None
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], -18, None, [], -1, 'u', 0]

Name: _value Function: None
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _to, Num: 1
Globalname: _to

Name: _to_1 Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _to, Num: 1
Globalname: _to
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _to, Num: 1
Globalname: _to

Name: _to_1 Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _to, Num: 1
Globalname: _to
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX


WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
TMP_72(bool) = _currentPhase_1 == REF_23
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
TMP_73(bool) = _currentPhase_1 == REF_24
TMP_74(bool) = TMP_72 || TMP_73
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
TMP_76(bool) = _amount_1 > 0
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
TMP_78(bool) = REF_26 >= _amount_1
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
TMP_81(uint256) = _amount_1 (c)* TMP_80
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
feeAmount_1(uint256) := TMP_82(uint256)
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
amountMinusFee_1(uint256) := TMP_83(uint256)
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_12', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
TMP_86(bool) = feeAmount_1 > 0
CONDITION TMP_86
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
WAVAX_9(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_10(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_6(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_6(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
Name: _currentPhase, Num: 1
Globalname: _currentPhase
End popogation
TMP_71(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_71

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
_currentPhase_1(LaunchEvent.Phase) := TMP_71(LaunchEvent.Phase)
asgn
init
end
_______________

Name: TMP_71 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for _currentPhase

Name: _currentPhase Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: _currentPhase, Num: 1
Globalname: _currentPhase
End popogation
REF_23(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_23

Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_72(bool) = _currentPhase_1 == REF_23
[i]Type for TMP_72

Name: TMP_72 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_24(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_24

Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_73(bool) = _currentPhase_1 == REF_24
[i]Type for TMP_73

Name: TMP_73 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_74(bool) = TMP_72 || TMP_73
[i]Type for TMP_74

Name: TMP_74 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_75(None) = SOLIDITY_CALL require(bool,string)(TMP_74,LaunchEvent: unable to withdraw)
[i]Type for TMP_75

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_76(bool) = _amount_1 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_76

Name: TMP_76 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_77(None) = SOLIDITY_CALL require(bool,string)(TMP_76,LaunchEvent: invalid withdraw amount)
[i]Type for TMP_77

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_25(LaunchEvent.UserInfo) -> getUserInfo_8[msg.sender]
INDEX
Source address: u
[i]Type for REF_25

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_25(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_25 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_26(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_26

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_78(bool) = REF_26 >= _amount_1
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_78

Name: TMP_78 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_79(None) = SOLIDITY_CALL require(bool,string)(TMP_78,LaunchEvent: withdrawn amount exceeds balance)
[i]Type for TMP_79

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_27(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_27

Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
[i]Type for user

Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
REF_27(-> user_2 (-> ['getUserInfo'])) = REF_27 (c)- _amount_1
init
end
init
end
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_27

Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_27 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_9(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_80(uint256) = INTERNAL_CALL, LaunchEvent.getPenalty()()
[i]Type for TMP_80

Name: TMP_80 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_81(uint256) = _amount_1 (c)* TMP_80
testing mul...
init
end
init
end

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_80 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
lnorm: u rnorm: u
[i]Type for TMP_81

Name: TMP_81 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_82(uint256) = TMP_81 (c)/ 1000000000000000000
init
end
init
end
lnorm: u rnorm: 18
init
end
init
end
init
end
lnorm: u rnorm: 18
init
end
[i]Type for TMP_82

Name: TMP_82 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
feeAmount_1(uint256) := TMP_82(uint256)
asgn
init
end
_______________

Name: TMP_82 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for feeAmount

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_83(uint256) = _amount_1 (c)- feeAmount_1
init
end
init
end
init
end
_______________

Name: feeAmount Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_83

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
amountMinusFee_1(uint256) := TMP_83(uint256)
asgn
init
end
_______________

Name: TMP_83 Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: amountMinusFee Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for amountMinusFee

Name: amountMinusFee Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
wavaxReserve_10(uint256) = wavaxReserve_9 (c)- _amount_1
init
end
init
end
init
end
_______________

Name: _amount Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for wavaxReserve

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:WAVAX_12(IWAVAX), function:withdraw, arguments:['_amount_1']  
High Call: withdraw
WAVAX_13(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_12', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: withdrawAVAX
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_14(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_13', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,amountMinusFee_1)
init
init
end
Propogating parameters and globals to SSA variables...
End popogation
TMP_86(bool) = feeAmount_1 > 0
init
end
init
end
lnorm: -18 rnorm: 0
[i]Type for TMP_86

Name: TMP_86 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_87(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_15(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
High Call: penaltyCollector
Running querryfc
Written func info: RocketJoeFactory, penaltyCollector
[i]Type for TMP_87

Name: TMP_87 Function: withdrawAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_16(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: withdrawAVAX
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(TMP_87,feeAmount_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _to Function: None
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], -18, None, [], -1, 'u', 0]

Name: _value Function: None
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _to, Num: 1
Globalname: _to

Name: _to_1 Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _to, Num: 1
Globalname: _to
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _to, Num: 1
Globalname: _to

Name: _to_1 Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: -18
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _to, Num: 1
Globalname: _to
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



createPair


floorPrice_2(uint256) := ϕ(['floorPrice_0', 'floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
WAVAX_14(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_3(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
router_2(IJoeRouter02) := ϕ(['router_0', 'router_1', 'router_11'])
factory_2(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_0'])
tokenReserve_2(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_2(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
tokenIncentivesForUsers_2(uint256) := ϕ(['tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
wavaxReserve_11(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
REF_38(LaunchEvent.Phase) -> Phase.PhaseThree
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_38)
TMP_90 = CONVERT WAVAX_16 to address
wavaxAddress_1(address) := TMP_90(address)
TMP_91 = CONVERT token_5 to address
tokenAddress_1(address) := TMP_91(address)
TMP_92(address) = HIGH_LEVEL_CALL, dest:factory_4(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
floorPrice_5(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_1', 'floorPrice_4'])
WAVAX_17(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_16', 'WAVAX_8'])
token_6(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_5', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
router_5(IJoeRouter02) := ϕ(['router_1', 'router_4', 'router_11'])
factory_5(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_4'])
tokenReserve_5(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_4', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_5(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_4', 'tokenIncentivesBalance_8'])
tokenIncentivesForUsers_5(uint256) := ϕ(['tokenIncentivesForUsers_4', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
wavaxReserve_14(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_13', 'wavaxReserve_10'])
TMP_93 = CONVERT 0 to address
TMP_94(bool) = TMP_92 == TMP_93
TMP_95 = CONVERT factory_5 to IJoeFactory
TMP_96(address) = HIGH_LEVEL_CALL, dest:TMP_95(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
floorPrice_6(uint256) := ϕ(['floorPrice_5', 'floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
WAVAX_18(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_17', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_7(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_6', 'token_22', 'token_21', 'token_25'])
router_6(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_5'])
factory_6(IJoeFactory) := ϕ(['factory_5', 'factory_12', 'factory_1'])
tokenReserve_6(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_5', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_6(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_5', 'tokenIncentivesBalance_8'])
tokenIncentivesForUsers_6(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_5', 'tokenIncentivesForUsers_7'])
wavaxReserve_15(uint256) := ϕ(['wavaxReserve_14', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_97 = CONVERT TMP_96 to IJoePair
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(IJoePair), function:totalSupply, arguments:[]  
floorPrice_7(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_6', 'floorPrice_1'])
WAVAX_19(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_18', 'WAVAX_29', 'WAVAX_8'])
token_8(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_7', 'token_22', 'token_21', 'token_25'])
router_7(IJoeRouter02) := ϕ(['router_1', 'router_6', 'router_11'])
factory_7(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_6'])
tokenReserve_7(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_6', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_7(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_6', 'tokenIncentivesBalance_8'])
tokenIncentivesForUsers_7(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_6', 'tokenIncentivesForUsers_7'])
wavaxReserve_16(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_15'])
TMP_99(bool) = TMP_98 == 0
TMP_100(bool) = TMP_94 || TMP_99
TMP_101(None) = SOLIDITY_CALL require(bool,string)(TMP_100,LaunchEvent: liquid pair already exists)
TMP_102(bool) = wavaxReserve_16 > 0
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,LaunchEvent: no wavax balance)
tokenAllocated_1(uint256) := tokenReserve_7(uint256)
TMP_104(uint256) = 10 (c)** 18
TMP_105(uint256) = wavaxReserve_16 (c)* TMP_104
TMP_106(uint256) = TMP_105 (c)/ tokenAllocated_1
TMP_107(bool) = floorPrice_7 > TMP_106
CONDITION TMP_107
tokenAllocated_3(uint256) := ϕ(['tokenAllocated_1', 'tokenAllocated_2'])
TMP_115 = CONVERT router_8 to address
TMP_116(bool) = HIGH_LEVEL_CALL, dest:WAVAX_20(IWAVAX), function:approve, arguments:['TMP_115', 'wavaxReserve_17']  
WAVAX_21(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_20', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_10(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_9', 'token_22', 'token_21', 'token_25'])
router_9(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_8'])
factory_9(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_8'])
tokenReserve_9(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_8', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
wavaxReserve_18(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_17', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_108(uint8) = HIGH_LEVEL_CALL, dest:token_8(IERC20Metadata), function:decimals, arguments:[]  
floorPrice_8(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
WAVAX_20(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_19', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_9(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_8', 'token_22', 'token_21', 'token_25'])
router_8(IJoeRouter02) := ϕ(['router_1', 'router_7', 'router_11'])
factory_8(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_7'])
tokenReserve_8(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_7', 'tokenReserve_17'])
tokenIncentivesBalance_8(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_8'])
tokenIncentivesForUsers_8(uint256) := ϕ(['tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11'])
wavaxReserve_17(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_16', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_109(uint256) = 10 (c)** TMP_108
TMP_110(uint256) = wavaxReserve_17 (c)* TMP_109
TMP_111(uint256) = TMP_110 (c)/ floorPrice_8
tokenAllocated_2(uint256) := TMP_111(uint256)
TMP_117 = CONVERT router_9 to address
TMP_118(bool) = HIGH_LEVEL_CALL, dest:token_10(IERC20Metadata), function:approve, arguments:['TMP_117', 'tokenAllocated_3']  
token_11(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25', 'token_10'])
router_10(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_9'])
factory_10(IJoeFactory) := ϕ(['factory_12', 'factory_9', 'factory_1'])
tokenReserve_10(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_9', 'tokenReserve_17'])
wavaxReserve_19(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_18', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_112(uint256) = tokenIncentivesForUsers_8 (c)* tokenAllocated_2
TMP_113(uint256) = TMP_112 (c)/ tokenReserve_8
tokenIncentivesForUsers_9(uint256) := TMP_113(uint256)
TMP_119 = CONVERT this to address
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:router_10(IJoeRouter02), function:addLiquidity, arguments:['wavaxAddress_1', 'tokenAddress_1', 'wavaxReserve_19', 'tokenAllocated_3', 'wavaxReserve_19', 'tokenAllocated_3', 'TMP_119', 'block.timestamp']  
router_11(IJoeRouter02) := ϕ(['router_1', 'router_10', 'router_11'])
factory_11(IJoeFactory) := ϕ(['factory_12', 'factory_10', 'factory_1'])
tokenReserve_11(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_10', 'tokenReserve_17'])
wavaxReserve_20(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_19', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
lpSupply_1(uint256)= UNPACK TUPLE_0 index: 2 
TMP_114(uint256) = tokenIncentivesBalance_8 (c)- tokenIncentivesForUsers_9
tokenIncentiveIssuerRefund_1(uint256) := TMP_114(uint256)
TMP_120(address) = HIGH_LEVEL_CALL, dest:factory_11(IJoeFactory), function:getPair, arguments:['tokenAddress_1', 'wavaxAddress_1']  
factory_12(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_11'])
tokenReserve_12(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_11', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
wavaxReserve_21(uint256) := ϕ(['wavaxReserve_20', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_121 = CONVERT TMP_120 to IJoePair
pair_1(IJoePair) := TMP_121(IJoePair)
wavaxAllocated_1(uint256) := wavaxReserve_21(uint256)
wavaxReserve_22(uint256) := 0(uint256)
tokenReserve_13(uint256) = tokenReserve_12 (c)- tokenAllocated_3
TMP_122 = CONVERT pair_1 to address
Emit LiquidityPoolCreated(TMP_122,tokenAddress_1,wavaxAddress_1,tokenAllocated_3,wavaxAllocated_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: floorPrice, Num: 2
Globalname: floorPrice
global...

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: WAVAX, Num: 14
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 3
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: router, Num: 2
Globalname: router
global...

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid
Name: factory, Num: 2
Globalname: factory
global...

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 2
Globalname: tokenReserve
global...

Name: tokenReserve Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesBalance, Num: 2
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesForUsers, Num: 2
Globalname: tokenIncentivesForUsers
global...

Name: tokenIncentivesForUsers Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: wavaxReserve, Num: 11
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
floorPrice_2(uint256) := ϕ(['floorPrice_0', 'floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
Phi
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_14(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_3(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_2(IJoeRouter02) := ϕ(['router_0', 'router_1', 'router_11'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_2(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_0'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_2(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesBalance_2(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_2(uint256) := ϕ(['tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_11(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
End popogation
REF_38(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
Source address: u
[i]Type for REF_38

Name: Phase.PhaseThree Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_38)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: WAVAX, Num: 16
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1
Name: wavaxAddress, Num: 1
Globalname: wavaxAddress
End popogation
TMP_90 = CONVERT WAVAX_16 to address
Converting WAVAX_16

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: WAVAX Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef

Name: TMP_90 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 1
[i]Type for TMP_90

Name: TMP_90 Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxAddress_1(address) := TMP_90(address)
asgn
init
end
_______________

Name: TMP_90 Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef

Name: wavaxAddress Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 1
Finance type key: (-1, -1)
[i]Type for wavaxAddress

Name: wavaxAddress Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: token, Num: 5
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998
Name: tokenAddress, Num: 1
Globalname: tokenAddress
End popogation
TMP_91 = CONVERT token_5 to address
Converting token_5

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: token Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef

Name: TMP_91 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: -998
[i]Type for TMP_91

Name: TMP_91 Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
tokenAddress_1(address) := TMP_91(address)
asgn
init
end
_______________

Name: TMP_91 Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef

Name: tokenAddress Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: -998
Finance type key: (-1, -1)
[i]Type for tokenAddress

Name: tokenAddress Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: factory, Num: 5
Globalname: factory
global...

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: factory, Num: 4
Globalname: factory
global...

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: floorPrice, Num: 5
Globalname: floorPrice
global...

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: WAVAX, Num: 17
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 6
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: router, Num: 5
Globalname: router
global...

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 5
Globalname: tokenReserve
global...

Name: tokenReserve Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesBalance, Num: 5
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesForUsers, Num: 5
Globalname: tokenIncentivesForUsers
global...

Name: tokenIncentivesForUsers Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: wavaxReserve, Num: 14
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: floorPrice, Num: 6
Globalname: floorPrice
global...

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: WAVAX, Num: 18
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 7
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: router, Num: 6
Globalname: router
global...

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid
Name: factory, Num: 6
Globalname: factory
global...

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 6
Globalname: tokenReserve
global...

Name: tokenReserve Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesBalance, Num: 6
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesForUsers, Num: 6
Globalname: tokenIncentivesForUsers
global...

Name: tokenIncentivesForUsers Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: wavaxReserve, Num: 15
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: floorPrice, Num: 7
Globalname: floorPrice
global...

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: WAVAX, Num: 19
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 8
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: router, Num: 7
Globalname: router
global...

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid
Name: factory, Num: 7
Globalname: factory
global...

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 7
Globalname: tokenReserve
global...

Name: tokenReserve Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesBalance, Num: 7
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesForUsers, Num: 7
Globalname: tokenIncentivesForUsers
global...

Name: tokenIncentivesForUsers Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: wavaxReserve, Num: 16
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_92(address) = HIGH_LEVEL_CALL, dest:factory_4(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
High Call: getPair
Running querryfc
Written func info: JoeFactory, getPair
[i]Type for TMP_92

Name: TMP_92 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
floorPrice_5(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_1', 'floorPrice_4'])
Phi
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_17(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_16', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_6(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_5', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_5(IJoeRouter02) := ϕ(['router_1', 'router_4', 'router_11'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_5(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_4'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_5(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_4', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesBalance_5(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_4', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_5(uint256) := ϕ(['tokenIncentivesForUsers_4', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_14(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_13', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_93 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_93 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_93

Name: TMP_93 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(bool) = TMP_92 == TMP_93
[i]Type for TMP_94

Name: TMP_94 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_95 = CONVERT factory_5 to IJoeFactory
Converting factory_5

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef

Name: TMP_95 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_95

Name: TMP_95 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_96(address) = HIGH_LEVEL_CALL, dest:TMP_95(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
High Call: getPair
Running querryfc
Written func info: JoeFactory, getPair
[i]Type for TMP_96

Name: TMP_96 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
floorPrice_6(uint256) := ϕ(['floorPrice_5', 'floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
Phi
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_18(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_17', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_7(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_6', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_6(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_5'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_6(IJoeFactory) := ϕ(['factory_5', 'factory_12', 'factory_1'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_6(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_5', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesBalance_6(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_5', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_6(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_5', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_15(uint256) := ϕ(['wavaxReserve_14', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97 = CONVERT TMP_96 to IJoePair
Converting TMP_96

Name: TMP_96 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_96 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_97 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
JoePair
[i]Type for TMP_97

Name: TMP_97 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(IJoePair), function:totalSupply, arguments:[]  
High Call: totalSupply
Running querryfc
Written func info: JoePair, totalSupply
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
([1], [-1], 1, "'u'", 'u', -1)
[i]Type for TMP_98

Name: TMP_98 Function: createPair
Num: 1
Den: -1
Address: u
Norm: 1
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
floorPrice_7(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_6', 'floorPrice_1'])
Phi
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_19(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_18', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_8(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_7', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_7(IJoeRouter02) := ϕ(['router_1', 'router_6', 'router_11'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_7(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_6'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_7(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_6', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesBalance_7(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_6', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_7(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_6', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_16(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_15'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = TMP_98 == 0
[i]Type for TMP_99

Name: TMP_99 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_100(bool) = TMP_94 || TMP_99
[i]Type for TMP_100

Name: TMP_100 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_101(None) = SOLIDITY_CALL require(bool,string)(TMP_100,LaunchEvent: liquid pair already exists)
[i]Type for TMP_101

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_102(bool) = wavaxReserve_16 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_102

Name: TMP_102 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,LaunchEvent: no wavax balance)
[i]Type for TMP_103

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenAllocated, Num: 1
Globalname: tokenAllocated
End popogation
tokenAllocated_1(uint256) := tokenReserve_7(uint256)
asgn
init
end
_______________

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenAllocated Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_104(uint256) = 10 (c)** 18
init
end
init
end
[i]Type for TMP_104

Name: TMP_104 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_105(uint256) = wavaxReserve_16 (c)* TMP_104
testing mul...
init
end
init
end

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_104 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: TMP_104 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef

Name: TMP_105 Function: createPair
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_105

Name: TMP_105 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_106(uint256) = TMP_105 (c)/ tokenAllocated_1
init
end
init
end
lnorm: 18 rnorm: 0
init
end
Source address: u
init
end
init
end
lnorm: 18 rnorm: 0
init
end
Source address: u
-1
-998
-998
[i]Type for TMP_106

Name: TMP_106 Function: createPair
Num: -1
Den: -998, -998
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance
XXXX
TMP_107(bool) = floorPrice_7 > TMP_106
init
end
init
end
lnorm: u rnorm: 18
[i]Type for TMP_107

Name: TMP_107 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: tokenAllocated, Num: 3
Globalname: tokenAllocated

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
tokenAllocated_3(uint256) := ϕ(['tokenAllocated_1', 'tokenAllocated_2'])
Phi
init
end
_______________

Name: tokenAllocated Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenAllocated Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: WAVAX, Num: 20
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1
Name: wavaxReserve, Num: 17
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: router, Num: 8
Globalname: router
global...

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: WAVAX, Num: 21
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 10
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: router, Num: 9
Globalname: router
global...

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid
Name: factory, Num: 9
Globalname: factory
global...

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 9
Globalname: tokenReserve
global...

Name: tokenReserve Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: wavaxReserve, Num: 18
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_115 = CONVERT router_8 to address
Converting router_8

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: router Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef

Name: TMP_115 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_115

Name: TMP_115 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_116(bool) = HIGH_LEVEL_CALL, dest:WAVAX_20(IWAVAX), function:approve, arguments:['TMP_115', 'wavaxReserve_17']  
High Call: approve
Running querryfc
[i]Type for TMP_116

Name: TMP_116 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_21(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_20', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_10(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_9', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_9(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_8'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_9(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_8'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_9(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_8', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_18(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_17', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: floorPrice, Num: 8
Globalname: floorPrice
global...

Name: floorPrice Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: tokenAllocated, Num: 2
Globalname: tokenAllocated
End popogation

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 9
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: router Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid
Name: factory, Num: 8
Globalname: factory
global...

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 8
Globalname: tokenReserve
global...

Name: tokenReserve Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesBalance, Num: 8
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesForUsers, Num: 8
Globalname: tokenIncentivesForUsers
global...

Name: tokenIncentivesForUsers Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_108(uint8) = HIGH_LEVEL_CALL, dest:token_8(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Written func info: ERC20Metadata, decimals
Handling balance function!
-998
[i]Type for TMP_108

Name: TMP_108 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6
Fields: 
Finance Type: undef
XXXX
floorPrice_8(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
Phi
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_20(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_19', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_9(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_8', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_8(IJoeRouter02) := ϕ(['router_1', 'router_7', 'router_11'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_8(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_7'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_8(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_7', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesBalance_8(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_8(uint256) := ϕ(['tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_17(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_16', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_109(uint256) = 10 (c)** TMP_108
init
end
init
end
[i]Type for TMP_109

Name: TMP_109 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(uint256) = wavaxReserve_17 (c)* TMP_109
testing mul...
init
end
init
end

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_109 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_110 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_110

Name: TMP_110 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint256) = TMP_110 (c)/ floorPrice_8
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_111

Name: TMP_111 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenAllocated_2(uint256) := TMP_111(uint256)
asgn
init
end
_______________

Name: TMP_111 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenAllocated Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: token, Num: 11
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: router, Num: 10
Globalname: router
global...

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid
Name: factory, Num: 10
Globalname: factory
global...

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 10
Globalname: tokenReserve
global...

Name: tokenReserve Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: wavaxReserve, Num: 19
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_117 = CONVERT router_9 to address
Converting router_9

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef

Name: TMP_117 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_117

Name: TMP_117 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118(bool) = HIGH_LEVEL_CALL, dest:token_10(IERC20Metadata), function:approve, arguments:['TMP_117', 'tokenAllocated_3']  
High Call: approve
Running querryfc
[i]Type for TMP_118

Name: TMP_118 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token_11(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25', 'token_10'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_10(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_9'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_10(IJoeFactory) := ϕ(['factory_12', 'factory_9', 'factory_1'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_10(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_9', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_19(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_18', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenIncentivesForUsers, Num: 9
Globalname: tokenIncentivesForUsers
global...

Name: tokenIncentivesForUsers Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_112(uint256) = tokenIncentivesForUsers_8 (c)* tokenAllocated_2
testing mul...
init
end
init
end

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: u
init
end
_______________

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_112 Function: createPair
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_112

Name: TMP_112 Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
TMP_113(uint256) = TMP_112 (c)/ tokenReserve_8
init
end
init
end
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
Source address: u
init
end
_______________

Name: PIC_86 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: TMP_113 Function: createPair
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
init
end
init
end
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
Source address: u
init
end
_______________

Name: PIC_87 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: TMP_113 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
[i]Type for TMP_113

Name: TMP_113 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_9(uint256) := TMP_113(uint256)
asgn
init
end
_______________

Name: TMP_113 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: lpSupply, Num: 1
Globalname: lpSupply
global...

Name: PIC_19 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: router, Num: 11
Globalname: router
global...

Name: router Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid
Name: factory, Num: 11
Globalname: factory
global...

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 11
Globalname: tokenReserve
global...

Name: tokenReserve Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: wavaxReserve, Num: 20
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_119 = CONVERT this to address
Converting this
8
[i]Type for TMP_119

Name: TMP_119 Function: createPair
Num: -1
Den: -1
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:router_10(IJoeRouter02), function:addLiquidity, arguments:['wavaxAddress_1', 'tokenAddress_1', 'wavaxReserve_19', 'tokenAllocated_3', 'wavaxReserve_19', 'tokenAllocated_3', 'TMP_119', 'block.timestamp']  
High Call: addLiquidity
Running querryfc
Written func info: JoeRouter02, addLiquidity
[i]Type for TUPLE_0

Name: TUPLE_0 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
router_11(IJoeRouter02) := ϕ(['router_1', 'router_10', 'router_11'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_11(IJoeFactory) := ϕ(['factory_12', 'factory_10', 'factory_1'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_11(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_10', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_20(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_19', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_1(uint256)= UNPACK TUPLE_0 index: 2 
Finding type for lpSupply(uint256 ... )
[i]Type for lpSupply

Name: lpSupply Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: tokenIncentiveIssuerRefund, Num: 1
Globalname: tokenIncentiveIssuerRefund
global...

Name: PIC_23 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_114(uint256) = tokenIncentivesBalance_8 (c)- tokenIncentivesForUsers_9
init
end
init
end
-998
-998
-1
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
init
end
_______________

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_114 Function: createPair
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_114

Name: TMP_114 Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
tokenIncentiveIssuerRefund_1(uint256) := TMP_114(uint256)
asgn
init
end
_______________

Name: TMP_114 Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: tokenIncentiveIssuerRefund Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: pair, Num: 1
Globalname: pair
global...

Name: PIC_4 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: factory, Num: 12
Globalname: factory
global...

Name: factory Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 12
Globalname: tokenReserve
global...

Name: tokenReserve Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: wavaxReserve, Num: 21
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_120(address) = HIGH_LEVEL_CALL, dest:factory_11(IJoeFactory), function:getPair, arguments:['tokenAddress_1', 'wavaxAddress_1']  
High Call: getPair
Running querryfc
Written func info: JoeFactory, getPair
[i]Type for TMP_120

Name: TMP_120 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
factory_12(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_11'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_12(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_11', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_21(uint256) := ϕ(['wavaxReserve_20', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_121 = CONVERT TMP_120 to IJoePair
Converting TMP_120

Name: TMP_120 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_120 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_121 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
JoePair
[i]Type for TMP_121

Name: TMP_121 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
pair_1(IJoePair) := TMP_121(IJoePair)
asgn
init
end
_______________

Name: TMP_121 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: wavaxAllocated, Num: 1
Globalname: wavaxAllocated
global...

Name: PIC_10 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
wavaxAllocated_1(uint256) := wavaxReserve_21(uint256)
asgn
init
end
_______________

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: wavaxReserve, Num: 22
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
wavaxReserve_22(uint256) := 0(uint256)
asgn
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: tokenReserve, Num: 13
Globalname: tokenReserve
global...

Name: tokenReserve Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
End popogation
tokenReserve_13(uint256) = tokenReserve_12 (c)- tokenAllocated_3
init
end
init
end
-998
-998
-1
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
init
end
_______________

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-998
-1
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_122 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_122 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_122

Name: TMP_122 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX


floorPrice_2(uint256) := ϕ(['floorPrice_0', 'floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
WAVAX_14(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_3(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
router_2(IJoeRouter02) := ϕ(['router_0', 'router_1', 'router_11'])
factory_2(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_0'])
tokenReserve_2(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_2(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
tokenIncentivesForUsers_2(uint256) := ϕ(['tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
wavaxReserve_11(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
REF_38(LaunchEvent.Phase) -> Phase.PhaseThree
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_38)
TMP_90 = CONVERT WAVAX_16 to address
wavaxAddress_1(address) := TMP_90(address)
TMP_91 = CONVERT token_5 to address
tokenAddress_1(address) := TMP_91(address)
TMP_92(address) = HIGH_LEVEL_CALL, dest:factory_4(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
floorPrice_5(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_1', 'floorPrice_4'])
WAVAX_17(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_16', 'WAVAX_8'])
token_6(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_5', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
router_5(IJoeRouter02) := ϕ(['router_1', 'router_4', 'router_11'])
factory_5(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_4'])
tokenReserve_5(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_4', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_5(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_4', 'tokenIncentivesBalance_8'])
tokenIncentivesForUsers_5(uint256) := ϕ(['tokenIncentivesForUsers_4', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
wavaxReserve_14(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_13', 'wavaxReserve_10'])
TMP_93 = CONVERT 0 to address
TMP_94(bool) = TMP_92 == TMP_93
TMP_95 = CONVERT factory_5 to IJoeFactory
TMP_96(address) = HIGH_LEVEL_CALL, dest:TMP_95(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
floorPrice_6(uint256) := ϕ(['floorPrice_5', 'floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
WAVAX_18(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_17', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_7(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_6', 'token_22', 'token_21', 'token_25'])
router_6(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_5'])
factory_6(IJoeFactory) := ϕ(['factory_5', 'factory_12', 'factory_1'])
tokenReserve_6(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_5', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_6(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_5', 'tokenIncentivesBalance_8'])
tokenIncentivesForUsers_6(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_5', 'tokenIncentivesForUsers_7'])
wavaxReserve_15(uint256) := ϕ(['wavaxReserve_14', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_97 = CONVERT TMP_96 to IJoePair
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(IJoePair), function:totalSupply, arguments:[]  
floorPrice_7(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_6', 'floorPrice_1'])
WAVAX_19(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_18', 'WAVAX_29', 'WAVAX_8'])
token_8(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_7', 'token_22', 'token_21', 'token_25'])
router_7(IJoeRouter02) := ϕ(['router_1', 'router_6', 'router_11'])
factory_7(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_6'])
tokenReserve_7(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_6', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_7(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_6', 'tokenIncentivesBalance_8'])
tokenIncentivesForUsers_7(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_6', 'tokenIncentivesForUsers_7'])
wavaxReserve_16(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_15'])
TMP_99(bool) = TMP_98 == 0
TMP_100(bool) = TMP_94 || TMP_99
TMP_101(None) = SOLIDITY_CALL require(bool,string)(TMP_100,LaunchEvent: liquid pair already exists)
TMP_102(bool) = wavaxReserve_16 > 0
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,LaunchEvent: no wavax balance)
tokenAllocated_1(uint256) := tokenReserve_7(uint256)
TMP_104(uint256) = 10 (c)** 18
TMP_105(uint256) = wavaxReserve_16 (c)* TMP_104
TMP_106(uint256) = TMP_105 (c)/ tokenAllocated_1
TMP_107(bool) = floorPrice_7 > TMP_106
CONDITION TMP_107
tokenAllocated_3(uint256) := ϕ(['tokenAllocated_1', 'tokenAllocated_2'])
TMP_115 = CONVERT router_8 to address
TMP_116(bool) = HIGH_LEVEL_CALL, dest:WAVAX_20(IWAVAX), function:approve, arguments:['TMP_115', 'wavaxReserve_17']  
WAVAX_21(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_20', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_10(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_9', 'token_22', 'token_21', 'token_25'])
router_9(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_8'])
factory_9(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_8'])
tokenReserve_9(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_8', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
wavaxReserve_18(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_17', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_108(uint8) = HIGH_LEVEL_CALL, dest:token_8(IERC20Metadata), function:decimals, arguments:[]  
floorPrice_8(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
WAVAX_20(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_19', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_9(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_8', 'token_22', 'token_21', 'token_25'])
router_8(IJoeRouter02) := ϕ(['router_1', 'router_7', 'router_11'])
factory_8(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_7'])
tokenReserve_8(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_7', 'tokenReserve_17'])
tokenIncentivesBalance_8(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_8'])
tokenIncentivesForUsers_8(uint256) := ϕ(['tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11'])
wavaxReserve_17(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_16', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_109(uint256) = 10 (c)** TMP_108
TMP_110(uint256) = wavaxReserve_17 (c)* TMP_109
TMP_111(uint256) = TMP_110 (c)/ floorPrice_8
tokenAllocated_2(uint256) := TMP_111(uint256)
TMP_117 = CONVERT router_9 to address
TMP_118(bool) = HIGH_LEVEL_CALL, dest:token_10(IERC20Metadata), function:approve, arguments:['TMP_117', 'tokenAllocated_3']  
token_11(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25', 'token_10'])
router_10(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_9'])
factory_10(IJoeFactory) := ϕ(['factory_12', 'factory_9', 'factory_1'])
tokenReserve_10(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_9', 'tokenReserve_17'])
wavaxReserve_19(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_18', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_112(uint256) = tokenIncentivesForUsers_8 (c)* tokenAllocated_2
TMP_113(uint256) = TMP_112 (c)/ tokenReserve_8
tokenIncentivesForUsers_9(uint256) := TMP_113(uint256)
TMP_119 = CONVERT this to address
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:router_10(IJoeRouter02), function:addLiquidity, arguments:['wavaxAddress_1', 'tokenAddress_1', 'wavaxReserve_19', 'tokenAllocated_3', 'wavaxReserve_19', 'tokenAllocated_3', 'TMP_119', 'block.timestamp']  
router_11(IJoeRouter02) := ϕ(['router_1', 'router_10', 'router_11'])
factory_11(IJoeFactory) := ϕ(['factory_12', 'factory_10', 'factory_1'])
tokenReserve_11(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_10', 'tokenReserve_17'])
wavaxReserve_20(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_19', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
lpSupply_1(uint256)= UNPACK TUPLE_0 index: 2 
TMP_114(uint256) = tokenIncentivesBalance_8 (c)- tokenIncentivesForUsers_9
tokenIncentiveIssuerRefund_1(uint256) := TMP_114(uint256)
TMP_120(address) = HIGH_LEVEL_CALL, dest:factory_11(IJoeFactory), function:getPair, arguments:['tokenAddress_1', 'wavaxAddress_1']  
factory_12(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_11'])
tokenReserve_12(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_11', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
wavaxReserve_21(uint256) := ϕ(['wavaxReserve_20', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_121 = CONVERT TMP_120 to IJoePair
pair_1(IJoePair) := TMP_121(IJoePair)
wavaxAllocated_1(uint256) := wavaxReserve_21(uint256)
wavaxReserve_22(uint256) := 0(uint256)
tokenReserve_13(uint256) = tokenReserve_12 (c)- tokenAllocated_3
TMP_122 = CONVERT pair_1 to address
Emit LiquidityPoolCreated(TMP_122,tokenAddress_1,wavaxAddress_1,tokenAllocated_3,wavaxAllocated_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
floorPrice_2(uint256) := ϕ(['floorPrice_0', 'floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
Phi
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_14(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_3(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_2(IJoeRouter02) := ϕ(['router_0', 'router_1', 'router_11'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_2(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_0'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_2(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesBalance_2(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_2(uint256) := ϕ(['tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_11(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
End popogation
REF_38(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_38

Name: Phase.PhaseThree Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
MODIFIER_CALL, LaunchEvent.atPhase(LaunchEvent.Phase)(REF_38)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['REF_9', 'REF_38', 'REF_22'])
Phi
[i]Type for _phase

Name: _phase Function: atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._atPhase(LaunchEvent.Phase)(_phase_1)
init
end
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _phase Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _phase_1 Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_phase_1(LaunchEvent.Phase) := ϕ(['_phase_1'])
Phi
[i]Type for _phase

Name: _phase Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_64(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_64

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_205(bool) = _phase_1 == REF_64
[i]Type for TMP_205

Name: TMP_205 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_66(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_66

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_209(bool) = _phase_1 == REF_66
[i]Type for TMP_209

Name: TMP_209 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_206(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_206

Name: TMP_206 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_65(LaunchEvent.Phase) -> Phase.NotStarted
MEMBER
init
init
end
init
end
_______________

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_65

Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: NotStarted
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: NotStarted Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.NotStarted Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: NotStarted Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_207(bool) = TMP_206 == REF_65
[i]Type for TMP_207

Name: TMP_207 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_208(None) = SOLIDITY_CALL require(bool,string)(TMP_207,LaunchEvent: not in not started)
[i]Type for TMP_208

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_68(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_68

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_213(bool) = _phase_1 == REF_68
[i]Type for TMP_213

Name: TMP_213 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_210(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_210

Name: TMP_210 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_67(LaunchEvent.Phase) -> Phase.PhaseOne
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_67

Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseOne
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseOne Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseOne Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseOne Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_211(bool) = TMP_210 == REF_67
[i]Type for TMP_211

Name: TMP_211 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_212(None) = SOLIDITY_CALL require(bool,string)(TMP_211,LaunchEvent: not in phase one)
[i]Type for TMP_212

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_70(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_70

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_217(bool) = _phase_1 == REF_70
[i]Type for TMP_217

Name: TMP_217 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_214(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_214

Name: TMP_214 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_69(LaunchEvent.Phase) -> Phase.PhaseTwo
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_69

Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseTwo
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseTwo Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseTwo Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseTwo Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_215(bool) = TMP_214 == REF_69
[i]Type for TMP_215

Name: TMP_215 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_216(None) = SOLIDITY_CALL require(bool,string)(TMP_215,LaunchEvent: not in phase two)
[i]Type for TMP_216

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_221(None) = SOLIDITY_CALL revert(string)(LaunchEvent: unknown state)
[i]Type for TMP_221

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_218(LaunchEvent.Phase) = INTERNAL_CALL, LaunchEvent.currentPhase()()
[i]Type for TMP_218

Name: TMP_218 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_71(LaunchEvent.Phase) -> Phase.PhaseThree
MEMBER
init
init
end
init
end
_______________

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_71

Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: Phase, Field: PhaseThree
#################
Member: 
Name: Phase Function: global
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: NotStarted, PhaseOne, PhaseTwo, PhaseThree
Finance Type: undef
Fieldf: 
Name: PhaseThree Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: Phase.PhaseThree Function: _atPhase
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: PhaseThree Function: global
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_219(bool) = TMP_218 == REF_71
[i]Type for TMP_219

Name: TMP_219 Function: _atPhase
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_220(None) = SOLIDITY_CALL require(bool,string)(TMP_219,LaunchEvent: not in phase three)
[i]Type for TMP_220

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: wavaxAddress, Num: 1
Globalname: wavaxAddress
End popogation
TMP_90 = CONVERT WAVAX_16 to address
Converting WAVAX_16

Name: WAVAX Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: WAVAX Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef

Name: TMP_90 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 1
[i]Type for TMP_90

Name: TMP_90 Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxAddress_1(address) := TMP_90(address)
asgn
init
end
_______________

Name: TMP_90 Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef

Name: wavaxAddress Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 1
Finance type key: (-1, -1)
[i]Type for wavaxAddress

Name: wavaxAddress Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenAddress, Num: 1
Globalname: tokenAddress
End popogation
TMP_91 = CONVERT token_5 to address
Converting token_5

Name: token Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: token Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef

Name: TMP_91 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: -998
[i]Type for TMP_91

Name: TMP_91 Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
tokenAddress_1(address) := TMP_91(address)
asgn
init
end
_______________

Name: TMP_91 Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef

Name: tokenAddress Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: -998
Finance type key: (-1, -1)
[i]Type for tokenAddress

Name: tokenAddress Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_92(address) = HIGH_LEVEL_CALL, dest:factory_4(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
High Call: getPair
Running querryfc
Written func info: JoeFactory, getPair
[i]Type for TMP_92

Name: TMP_92 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
floorPrice_5(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_1', 'floorPrice_4'])
Phi
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_17(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_16', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_6(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_5', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_5(IJoeRouter02) := ϕ(['router_1', 'router_4', 'router_11'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_5(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_4'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_5(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_4', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesBalance_5(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_4', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_5(uint256) := ϕ(['tokenIncentivesForUsers_4', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_14(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_13', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_93 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_93 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_93

Name: TMP_93 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_94(bool) = TMP_92 == TMP_93
[i]Type for TMP_94

Name: TMP_94 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_95 = CONVERT factory_5 to IJoeFactory
Converting factory_5

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef

Name: TMP_95 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_95

Name: TMP_95 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_96(address) = HIGH_LEVEL_CALL, dest:TMP_95(IJoeFactory), function:getPair, arguments:['wavaxAddress_1', 'tokenAddress_1']  
High Call: getPair
Running querryfc
Written func info: JoeFactory, getPair
[i]Type for TMP_96

Name: TMP_96 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
floorPrice_6(uint256) := ϕ(['floorPrice_5', 'floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
Phi
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_18(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_17', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_7(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_6', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_6(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_5'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_6(IJoeFactory) := ϕ(['factory_5', 'factory_12', 'factory_1'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_6(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_5', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesBalance_6(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_5', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_6(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_5', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_15(uint256) := ϕ(['wavaxReserve_14', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_97 = CONVERT TMP_96 to IJoePair
Converting TMP_96

Name: TMP_96 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_96 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_97 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
JoePair
[i]Type for TMP_97

Name: TMP_97 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:TMP_97(IJoePair), function:totalSupply, arguments:[]  
High Call: totalSupply
Running querryfc
Written func info: JoePair, totalSupply
Retvar: ('t', ['1'], ['-1'], 1, "'u'", 'u')
([1], [-1], 1, "'u'", 'u', -1)
[i]Type for TMP_98

Name: TMP_98 Function: createPair
Num: 1
Den: -1
Address: u
Norm: 1
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
floorPrice_7(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_6', 'floorPrice_1'])
Phi
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_19(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_18', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_8(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_7', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_7(IJoeRouter02) := ϕ(['router_1', 'router_6', 'router_11'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_7(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_6'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_7(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_6', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesBalance_7(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_6', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_7(uint256) := ϕ(['tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_6', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_16(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_15'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_99(bool) = TMP_98 == 0
[i]Type for TMP_99

Name: TMP_99 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_100(bool) = TMP_94 || TMP_99
[i]Type for TMP_100

Name: TMP_100 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_101(None) = SOLIDITY_CALL require(bool,string)(TMP_100,LaunchEvent: liquid pair already exists)
[i]Type for TMP_101

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_102(bool) = wavaxReserve_16 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_102

Name: TMP_102 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_103(None) = SOLIDITY_CALL require(bool,string)(TMP_102,LaunchEvent: no wavax balance)
[i]Type for TMP_103

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenAllocated, Num: 1
Globalname: tokenAllocated
End popogation
tokenAllocated_1(uint256) := tokenReserve_7(uint256)
asgn
init
end
_______________

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenAllocated Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
Finance type key: (0, -1)
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_104(uint256) = 10 (c)** 18
init
end
init
end
[i]Type for TMP_104

Name: TMP_104 Function: createPair
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_105(uint256) = wavaxReserve_16 (c)* TMP_104
testing mul...
init
end
init
end

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_104 Function: createPair
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
lnorm: u rnorm: 18
init
end
_______________

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_105 Function: createPair
Num: 
Den: 
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_105

Name: TMP_105 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: undef
XXXX
TMP_106(uint256) = TMP_105 (c)/ tokenAllocated_1
init
end
init
end
lnorm: 18 rnorm: 0
init
end
Source address: u
init
end
init
end
lnorm: 18 rnorm: 0
init
end
Source address: u
-1
-998
-998
[i]Type for TMP_106

Name: TMP_106 Function: createPair
Num: -1
Den: -998, -998
Address: u
Norm: 18
LF: None
Value: 1000000000000000000
Fields: 
Finance Type: raw balance
XXXX
TMP_107(bool) = floorPrice_7 > TMP_106
init
end
init
end
lnorm: u rnorm: 18
[i]Type for TMP_107

Name: TMP_107 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: tokenAllocated, Num: 3
Globalname: tokenAllocated

Name: tokenAllocated Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
tokenAllocated_3(uint256) := ϕ(['tokenAllocated_1', 'tokenAllocated_2'])
Phi
init
end
_______________

Name: tokenAllocated Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenAllocated Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_115 = CONVERT router_8 to address
Converting router_8

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef

Name: TMP_115 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_115

Name: TMP_115 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_116(bool) = HIGH_LEVEL_CALL, dest:WAVAX_20(IWAVAX), function:approve, arguments:['TMP_115', 'wavaxReserve_17']  
High Call: approve
Running querryfc
[i]Type for TMP_116

Name: TMP_116 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_21(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_20', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_10(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_9', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_9(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_8'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_9(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_8'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_9(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_8', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_18(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_17', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenAllocated, Num: 2
Globalname: tokenAllocated
End popogation

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_108(uint8) = HIGH_LEVEL_CALL, dest:token_8(IERC20Metadata), function:decimals, arguments:[]  
High Call: decimals
Running querryfc
Written func info: ERC20Metadata, decimals
Handling balance function!
-998
[i]Type for TMP_108

Name: TMP_108 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 6
Fields: 
Finance Type: undef
XXXX
floorPrice_8(uint256) := ϕ(['floorPrice_8', 'floorPrice_7', 'floorPrice_1'])
Phi
[i]Type for floorPrice

Name: floorPrice Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_20(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_19', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: createPair
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_9(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_8', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_8(IJoeRouter02) := ϕ(['router_1', 'router_7', 'router_11'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_8(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_7'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_8(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_7', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesBalance_8(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_8(uint256) := ϕ(['tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7', 'tokenIncentivesForUsers_11'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_17(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_16', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_109(uint256) = 10 (c)** TMP_108
init
end
init
end
[i]Type for TMP_109

Name: TMP_109 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_110(uint256) = wavaxReserve_17 (c)* TMP_109
testing mul...
init
end
init
end

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_109 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_110 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_110

Name: TMP_110 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_111(uint256) = TMP_110 (c)/ floorPrice_8
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_111

Name: TMP_111 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenAllocated_2(uint256) := TMP_111(uint256)
asgn
init
end
_______________

Name: TMP_111 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenAllocated Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for tokenAllocated

Name: tokenAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_117 = CONVERT router_9 to address
Converting router_9

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef

Name: TMP_117 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_117

Name: TMP_117 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_118(bool) = HIGH_LEVEL_CALL, dest:token_10(IERC20Metadata), function:approve, arguments:['TMP_117', 'tokenAllocated_3']  
High Call: approve
Running querryfc
[i]Type for TMP_118

Name: TMP_118 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token_11(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25', 'token_10'])
Phi
[i]Type for token

Name: token Function: createPair
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
router_10(IJoeRouter02) := ϕ(['router_1', 'router_11', 'router_9'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_10(IJoeFactory) := ϕ(['factory_12', 'factory_9', 'factory_1'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_10(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_9', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_19(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_18', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_112(uint256) = tokenIncentivesForUsers_8 (c)* tokenAllocated_2
testing mul...
init
end
init
end

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: 0 rnorm: u
init
end
_______________

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_112 Function: createPair
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_112

Name: TMP_112 Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
TMP_113(uint256) = TMP_112 (c)/ tokenReserve_8
init
end
init
end
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
Source address: u
init
end
_______________

Name: PIC_95 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: TMP_113 Function: createPair
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
init
end
init
end
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
Source address: u
init
end
_______________

Name: PIC_96 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: undef

Name: TMP_113 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
[i]Type for TMP_113

Name: TMP_113 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_9(uint256) := TMP_113(uint256)
asgn
init
end
_______________

Name: TMP_113 Function: createPair
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Finance type key: (0, -1)
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
Phid

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_119 = CONVERT this to address
Converting this
8
[i]Type for TMP_119

Name: TMP_119 Function: createPair
Num: 
Den: 
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_0(uint256,uint256,uint256) = HIGH_LEVEL_CALL, dest:router_10(IJoeRouter02), function:addLiquidity, arguments:['wavaxAddress_1', 'tokenAddress_1', 'wavaxReserve_19', 'tokenAllocated_3', 'wavaxReserve_19', 'tokenAllocated_3', 'TMP_119', 'block.timestamp']  
High Call: addLiquidity
Running querryfc
Written func info: JoeRouter02, addLiquidity
[i]Type for TUPLE_0

Name: TUPLE_0 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
router_11(IJoeRouter02) := ϕ(['router_1', 'router_10', 'router_11'])
Phi
[i]Type for router

Name: router Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeRouter02
Value: u
Fields: 
Finance Type: undef
XXXX
factory_11(IJoeFactory) := ϕ(['factory_12', 'factory_10', 'factory_1'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_11(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_10', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_20(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_19', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_1(uint256)= UNPACK TUPLE_0 index: 2 
Finding type for lpSupply(uint256 ... )
[i]Type for lpSupply

Name: lpSupply Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_114(uint256) = tokenIncentivesBalance_8 (c)- tokenIncentivesForUsers_9
init
end
init
end
-998
-998
-1
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
init
end
_______________

Name: tokenIncentivesBalance Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_114 Function: createPair
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_114

Name: TMP_114 Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
tokenIncentiveIssuerRefund_1(uint256) := TMP_114(uint256)
asgn
init
end
_______________

Name: TMP_114 Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: tokenIncentiveIssuerRefund Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance
-998
-998
-1
Finance type key: (0, -1)
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
TMP_120(address) = HIGH_LEVEL_CALL, dest:factory_11(IJoeFactory), function:getPair, arguments:['tokenAddress_1', 'wavaxAddress_1']  
High Call: getPair
Running querryfc
Written func info: JoeFactory, getPair
[i]Type for TMP_120

Name: TMP_120 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
factory_12(IJoeFactory) := ϕ(['factory_12', 'factory_1', 'factory_11'])
Phi
[i]Type for factory

Name: factory Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoeFactory
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_12(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_11', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_21(uint256) := ϕ(['wavaxReserve_20', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_121 = CONVERT TMP_120 to IJoePair
Converting TMP_120

Name: TMP_120 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_120 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_121 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
JoePair
[i]Type for TMP_121

Name: TMP_121 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
pair_1(IJoePair) := TMP_121(IJoePair)
asgn
init
end
_______________

Name: TMP_121 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for pair

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
wavaxAllocated_1(uint256) := wavaxReserve_21(uint256)
asgn
init
end
_______________

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
wavaxReserve_22(uint256) := 0(uint256)
asgn
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for wavaxReserve

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
tokenReserve_13(uint256) = tokenReserve_12 (c)- tokenAllocated_3
init
end
init
end
-998
-998
-1
lnorm: 0 rnorm: 0
Finance type key: (0, 0)
init
end
_______________

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance
-998
-998
-1
[i]Type for tokenReserve

Name: tokenReserve Function: createPair
Num: -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_122 = CONVERT pair_1 to address
Converting pair_1

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_122 Function: createPair
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_122

Name: TMP_122 Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



withdrawLiquidity


issuer_5(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
token_12(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
getUserInfo_10(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
pair_2(IJoePair) := ϕ(['pair_9', 'pair_0', 'pair_7', 'pair_1'])
lpSupply_2(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
tokenReserve_14(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
MODIFIER_CALL, LaunchEvent.timelockElapsed()()
TMP_126 = CONVERT pair_4 to address
TMP_127 = CONVERT 0 to address
TMP_128(bool) = TMP_126 != TMP_127
TMP_129(None) = SOLIDITY_CALL require(bool,string)(TMP_128,LaunchEvent: pair not created)
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_39(LaunchEvent.UserInfo)
REF_40(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
TMP_130 = ! REF_40 
TMP_131(None) = SOLIDITY_CALL require(bool,string)(TMP_130,LaunchEvent: liquidity already withdrawn)
TMP_132(uint256) = INTERNAL_CALL, LaunchEvent.pairBalance(address)(msg.sender)
balance_1(uint256) := TMP_132(uint256)
REF_41(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_41 (->user_2 (-> ['getUserInfo'])) := True(bool)
getUserInfo_13(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
TMP_133(bool) = msg.sender == issuer_8
CONDITION TMP_133
TMP_139 = CONVERT pair_5 to address
Emit UserLiquidityWithdrawn(msg.sender,TMP_139,balance_1)
TMP_134(uint256) = lpSupply_5 (c)/ 2
balance_2(uint256) := TMP_134(uint256)
balance_3(uint256) := ϕ(['balance_2', 'balance_1'])
TMP_135 = CONVERT pair_5 to address
Emit IssuerLiquidityWithdrawn(msg.sender,TMP_135,balance_2)
TMP_141(bool) = HIGH_LEVEL_CALL, dest:pair_5(IJoePair), function:transfer, arguments:['msg.sender', 'balance_3']  
pair_7(IJoePair) := ϕ(['pair_9', 'pair_6', 'pair_7', 'pair_1'])
TMP_137(bool) = tokenReserve_17 > 0
CONDITION TMP_137
amount_1(uint256) := tokenReserve_17(uint256)
tokenReserve_18(uint256) := 0(uint256)
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token_15(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_1']  
token_16(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
pair_6(IJoePair) := ϕ(['pair_9', 'pair_5', 'pair_7', 'pair_1'])


Propogating parameters and globals to SSA variables...
End popogation
Name: issuer, Num: 5
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 12
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: getUserInfo, Num: 10
Globalname: getUserInfo
global...

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: pair, Num: 2
Globalname: pair
global...

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Phid
Name: lpSupply, Num: 2
Globalname: lpSupply
global...

Name: lpSupply Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 14
Globalname: tokenReserve
global...

Name: tokenReserve Function: createPair
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Phid
issuer_5(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: withdrawLiquidity
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
token_12(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: withdrawLiquidity
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_10(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pair_2(IJoePair) := ϕ(['pair_9', 'pair_0', 'pair_7', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_2(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
Phi
[i]Type for lpSupply

Name: lpSupply Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_14(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.timelockElapsed()()
Propogating parameters and globals to SSA variables...
End popogation
Name: issuer, Num: 14
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid
Name: auctionStart, Num: 4
Globalname: auctionStart
global...

Name: auctionStart Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: PHASE_ONE_DURATION, Num: 4
Globalname: PHASE_ONE_DURATION
global...

Name: PHASE_ONE_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: PHASE_TWO_DURATION, Num: 3
Globalname: PHASE_TWO_DURATION
global...

Name: PHASE_TWO_DURATION Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: userTimelock, Num: 2
Globalname: userTimelock
global...

Name: userTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: issuerTimelock, Num: 2
Globalname: issuerTimelock
global...

Name: issuerTimelock Function: initialize
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
issuer_14(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: timelockElapsed
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
auctionStart_4(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
Phi
[i]Type for auctionStart

Name: auctionStart Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_4(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_TWO_DURATION_3(uint256) := ϕ(['PHASE_TWO_DURATION_0', 'PHASE_TWO_DURATION_1'])
Phi
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userTimelock_2(uint256) := ϕ(['userTimelock_0', 'userTimelock_1'])
Phi
[i]Type for userTimelock

Name: userTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
issuerTimelock_2(uint256) := ϕ(['issuerTimelock_1', 'issuerTimelock_0'])
Phi
[i]Type for issuerTimelock

Name: issuerTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: phase3Start, Num: 1
Globalname: phase3Start
End popogation
TMP_230(uint256) = auctionStart_4 (c)+ PHASE_ONE_DURATION_4
init
end
init
end
init
end
_______________

Name: PHASE_ONE_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_230 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_230

Name: TMP_230 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)+ PHASE_TWO_DURATION_3
init
end
init
end
init
end
_______________

Name: PHASE_TWO_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_231 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_231

Name: TMP_231 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
phase3Start_1(uint256) := TMP_231(uint256)
asgn
init
end
_______________

Name: TMP_231 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: phase3Start Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for phase3Start

Name: phase3Start Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_232(bool) = msg.sender == issuer_14
[i]Type for TMP_232

Name: TMP_232 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_233(uint256) = phase3Start_1 (c)+ issuerTimelock_2
init
end
init
end
init
end
_______________

Name: issuerTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_233 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_233

Name: TMP_233 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_234(bool) = block.timestamp > TMP_233
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_234

Name: TMP_234 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_235(None) = SOLIDITY_CALL require(bool,string)(TMP_234,LaunchEvent: can't withdraw before issuer's timelock)
[i]Type for TMP_235

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_236(uint256) = phase3Start_1 (c)+ userTimelock_2
init
end
init
end
init
end
_______________

Name: userTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_236 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_236

Name: TMP_236 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_237(bool) = block.timestamp > TMP_236
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_237

Name: TMP_237 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(None) = SOLIDITY_CALL require(bool,string)(TMP_237,LaunchEvent: can't withdraw before user's timelock)
[i]Type for TMP_238

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation

Name: issuer Function: timelockElapsed
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid

Name: auctionStart Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_ONE_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_TWO_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: userTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: issuerTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
issuer_14(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: timelockElapsed
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
auctionStart_4(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
Phi
[i]Type for auctionStart

Name: auctionStart Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_4(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_TWO_DURATION_3(uint256) := ϕ(['PHASE_TWO_DURATION_0', 'PHASE_TWO_DURATION_1'])
Phi
[i]Type for PHASE_TWO_DURATION

Name: PHASE_TWO_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
userTimelock_2(uint256) := ϕ(['userTimelock_0', 'userTimelock_1'])
Phi
[i]Type for userTimelock

Name: userTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
issuerTimelock_2(uint256) := ϕ(['issuerTimelock_1', 'issuerTimelock_0'])
Phi
[i]Type for issuerTimelock

Name: issuerTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: phase3Start, Num: 1
Globalname: phase3Start
End popogation
TMP_230(uint256) = auctionStart_4 (c)+ PHASE_ONE_DURATION_4
init
end
init
end
init
end
_______________

Name: PHASE_ONE_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_230 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_230

Name: TMP_230 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_231(uint256) = TMP_230 (c)+ PHASE_TWO_DURATION_3
init
end
init
end
init
end
_______________

Name: PHASE_TWO_DURATION Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_231 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_231

Name: TMP_231 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
phase3Start_1(uint256) := TMP_231(uint256)
asgn
init
end
_______________

Name: TMP_231 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: phase3Start Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for phase3Start

Name: phase3Start Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_232(bool) = msg.sender == issuer_14
[i]Type for TMP_232

Name: TMP_232 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_233(uint256) = phase3Start_1 (c)+ issuerTimelock_2
init
end
init
end
init
end
_______________

Name: issuerTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_233 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_233

Name: TMP_233 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_234(bool) = block.timestamp > TMP_233
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_234

Name: TMP_234 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_235(None) = SOLIDITY_CALL require(bool,string)(TMP_234,LaunchEvent: can't withdraw before issuer's timelock)
[i]Type for TMP_235

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_236(uint256) = phase3Start_1 (c)+ userTimelock_2
init
end
init
end
init
end
_______________

Name: userTimelock Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_236 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_236

Name: TMP_236 Function: timelockElapsed
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_237(bool) = block.timestamp > TMP_236
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_237

Name: TMP_237 Function: timelockElapsed
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_238(None) = SOLIDITY_CALL require(bool,string)(TMP_237,LaunchEvent: can't withdraw before user's timelock)
[i]Type for TMP_238

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: pair, Num: 4
Globalname: pair
global...

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_126 = CONVERT pair_4 to address
Converting pair_4

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_126 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_126

Name: TMP_126 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_127 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_127

Name: TMP_127 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_128(bool) = TMP_126 != TMP_127
[i]Type for TMP_128

Name: TMP_128 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_129(None) = SOLIDITY_CALL require(bool,string)(TMP_128,LaunchEvent: pair not created)
[i]Type for TMP_129

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: getUserInfo, Num: 12
Globalname: getUserInfo
global...

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: user, Num: 1 (-> ['getUserInfo'])
Globalname: user
End popogation
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
INDEX
Source address: u
[i]Type for REF_39

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_39(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_39 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_40(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
MEMBER
init
end
init
end
OUT KEY: withdrawLiquidity_user_hasWithdrawnPair
OUT KEY: withdrawLiquidity_user_hasWithdrawnPair
FTT: None
No field found
[i]Type for REF_40

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnPair
#################
Member: 
Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_130 = ! REF_40 
[i]Type for TMP_130

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(None) = SOLIDITY_CALL require(bool,string)(TMP_130,LaunchEvent: liquidity already withdrawn)
[i]Type for TMP_131

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
TMP_132(uint256) = INTERNAL_CALL, LaunchEvent.pairBalance(address)(msg.sender)
init
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _user Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _user_1 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
Phid
Name: getUserInfo, Num: 20
Globalname: getUserInfo
global...

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: wavaxAllocated, Num: 4
Globalname: wavaxAllocated
global...

Name: wavaxAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: lpSupply, Num: 6
Globalname: lpSupply
global...

Name: lpSupply Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_user_1(address) := ϕ(['msg.sender'])
Phi
[i]Type for _user

Name: _user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_6(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
Phi
[i]Type for lpSupply

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1
Globalname: user
End popogation
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
INDEX
Source address: u
[i]Type for REF_61

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_200(bool) = wavaxAllocated_4 == 0
[i]Type for TMP_200

Name: TMP_200 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_62(bool) -> user_1.hasWithdrawnPair
MEMBER
init
end
init
end
OUT KEY: pairBalance_user_hasWithdrawnPair
OUT KEY: pairBalance_user_hasWithdrawnPair
FTT: None
No field found
[i]Type for REF_62

Name: user.hasWithdrawnPair Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: hasWithdrawnPair
#################
Member: 
Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnPair Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_201(bool) = TMP_200 || REF_62
[i]Type for TMP_201

Name: TMP_201 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_63(uint256) -> user_1.balance
MEMBER
init
end
init
end
OUT KEY: pairBalance_user_balance
OUT KEY: pairBalance_user_balance
FTT: None
No field found
[i]Type for REF_63

Name: user.balance Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: balance
#################
Member: 
Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_202(uint256) = REF_63 (c)* lpSupply_6
testing mul...
init
end
init
end

Name: user.balance Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_202 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_202

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_203

Name: TMP_203 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)/ 2
init
end
init
end
lnorm: u rnorm: 0
init
end
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_204

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
RETURN TMP_204
RETURN
init
end

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
RETURN 0
RETURN
init
end

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u

Name: _user_1 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_user_1(address) := ϕ(['msg.sender'])
Phi
[i]Type for _user

Name: _user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_6(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
Phi
[i]Type for lpSupply

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1
Globalname: user
End popogation
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
INDEX
Source address: u
[i]Type for REF_61

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_200(bool) = wavaxAllocated_4 == 0
[i]Type for TMP_200

Name: TMP_200 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_62(bool) -> user_1.hasWithdrawnPair
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_62

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: hasWithdrawnPair
#################
Member: 
Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_201(bool) = TMP_200 || REF_62
[i]Type for TMP_201

Name: TMP_201 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_63(uint256) -> user_1.balance
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_63

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: balance
#################
Member: 
Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
Fieldf: 
Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = REF_63 (c)* lpSupply_6
testing mul...
init
end
init
end

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_202 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_202

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_203

Name: TMP_203 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)/ 2
init
end
init
end
lnorm: u rnorm: 0
init
end
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_204

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
RETURN TMP_204
RETURN
init
end

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
RETURN 0
RETURN
init
end

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation

Name: _user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_user_1(address) := ϕ(['msg.sender'])
Phi
[i]Type for _user

Name: _user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_6(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
Phi
[i]Type for lpSupply

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
INDEX
Source address: u
[i]Type for REF_61

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_200(bool) = wavaxAllocated_4 == 0
[i]Type for TMP_200

Name: TMP_200 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_62(bool) -> user_1.hasWithdrawnPair
MEMBER
init
end
init
end
init
end
_______________

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_62

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: hasWithdrawnPair
#################
Member: 
Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_201(bool) = TMP_200 || REF_62
[i]Type for TMP_201

Name: TMP_201 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_63(uint256) -> user_1.balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_63

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: balance
#################
Member: 
Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
Fieldf: 
Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = REF_63 (c)* lpSupply_6
testing mul...
init
end
init
end

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_202

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_203

Name: TMP_203 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)/ 2
init
end
init
end
lnorm: u rnorm: 0
init
end
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_204

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
RETURN TMP_204
RETURN
init
end

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
RETURN 0
RETURN
init
end

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
([-1], [-1], 0, 'u', 'u', -1)
[i]Type for TMP_132

Name: TMP_132 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_132(uint256)
asgn
init
end
_______________

Name: TMP_132 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
Name: getUserInfo, Num: 13
Globalname: getUserInfo
global...

Name: getUserInfo Function: withdrawAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_41(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_41

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnPair
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef

Name: user Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
XXXX
REF_41 (->user_2 (-> ['getUserInfo'])) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_41

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnPair
#################
Member: 
Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
getUserInfo_13(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: issuer, Num: 8
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4
End popogation
TMP_133(bool) = msg.sender == issuer_8
[i]Type for TMP_133

Name: TMP_133 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: pair, Num: 5
Globalname: pair
global...

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_139 = CONVERT pair_5 to address
Converting pair_5

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_139 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_139

Name: TMP_139 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: lpSupply, Num: 5
Globalname: lpSupply
global...

Name: lpSupply Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: balance, Num: 2
Globalname: balance
End popogation
TMP_134(uint256) = lpSupply_5 (c)/ 2
init
end
init
end
lnorm: u rnorm: 0
init
end
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_134

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
balance_2(uint256) := TMP_134(uint256)
asgn
init
end
_______________

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: balance, Num: 3
Globalname: balance

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
balance_3(uint256) := ϕ(['balance_2', 'balance_1'])
Phi
init
end
_______________

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_135 = CONVERT pair_5 to address
Converting pair_5

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_135 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_135

Name: TMP_135 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: pair, Num: 7
Globalname: pair
global...

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Phid
TMP_141(bool) = HIGH_LEVEL_CALL, dest:pair_5(IJoePair), function:transfer, arguments:['msg.sender', 'balance_3']  
High Call: transfer
Running querryfc
[i]Type for TMP_141

Name: TMP_141 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pair_7(IJoePair) := ϕ(['pair_9', 'pair_6', 'pair_7', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenReserve, Num: 17
Globalname: tokenReserve
global...

Name: tokenReserve Function: createPair
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Source address: u
End popogation
TMP_137(bool) = tokenReserve_17 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_137

Name: TMP_137 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation
amount_1(uint256) := tokenReserve_17(uint256)
asgn
init
end
_______________

Name: tokenReserve Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: amount Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for amount

Name: amount Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: tokenReserve, Num: 18
Globalname: tokenReserve
global...

Name: tokenReserve Function: createPair
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Source address: u
End popogation
tokenReserve_18(uint256) := 0(uint256)
asgn
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenReserve Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Finance type key: (-1, -1)
[i]Type for tokenReserve

Name: tokenReserve Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: token, Num: 15
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998
End popogation
Name: token, Num: 16
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: pair, Num: 6
Globalname: pair
global...

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Phid
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token_15(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_138

Name: TMP_138 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token_16(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: withdrawLiquidity
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
pair_6(IJoePair) := ϕ(['pair_9', 'pair_5', 'pair_7', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX


issuer_5(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
token_12(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
getUserInfo_10(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
pair_2(IJoePair) := ϕ(['pair_9', 'pair_0', 'pair_7', 'pair_1'])
lpSupply_2(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
tokenReserve_14(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
MODIFIER_CALL, LaunchEvent.timelockElapsed()()
TMP_126 = CONVERT pair_4 to address
TMP_127 = CONVERT 0 to address
TMP_128(bool) = TMP_126 != TMP_127
TMP_129(None) = SOLIDITY_CALL require(bool,string)(TMP_128,LaunchEvent: pair not created)
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_39(LaunchEvent.UserInfo)
REF_40(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
TMP_130 = ! REF_40 
TMP_131(None) = SOLIDITY_CALL require(bool,string)(TMP_130,LaunchEvent: liquidity already withdrawn)
TMP_132(uint256) = INTERNAL_CALL, LaunchEvent.pairBalance(address)(msg.sender)
balance_1(uint256) := TMP_132(uint256)
REF_41(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_41 (->user_2 (-> ['getUserInfo'])) := True(bool)
getUserInfo_13(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
TMP_133(bool) = msg.sender == issuer_8
CONDITION TMP_133
TMP_139 = CONVERT pair_5 to address
Emit UserLiquidityWithdrawn(msg.sender,TMP_139,balance_1)
TMP_134(uint256) = lpSupply_5 (c)/ 2
balance_2(uint256) := TMP_134(uint256)
balance_3(uint256) := ϕ(['balance_2', 'balance_1'])
TMP_135 = CONVERT pair_5 to address
Emit IssuerLiquidityWithdrawn(msg.sender,TMP_135,balance_2)
TMP_141(bool) = HIGH_LEVEL_CALL, dest:pair_5(IJoePair), function:transfer, arguments:['msg.sender', 'balance_3']  
pair_7(IJoePair) := ϕ(['pair_9', 'pair_6', 'pair_7', 'pair_1'])
TMP_137(bool) = tokenReserve_17 > 0
CONDITION TMP_137
amount_1(uint256) := tokenReserve_17(uint256)
tokenReserve_18(uint256) := 0(uint256)
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token_15(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_1']  
token_16(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
pair_6(IJoePair) := ϕ(['pair_9', 'pair_5', 'pair_7', 'pair_1'])


Propogating parameters and globals to SSA variables...
End popogation

Name: issuer Function: withdrawLiquidity
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: withdrawLiquidity
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Phid

Name: lpSupply Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Phid
issuer_5(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: withdrawLiquidity
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
token_12(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: withdrawLiquidity
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_10(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pair_2(IJoePair) := ϕ(['pair_9', 'pair_0', 'pair_7', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_2(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
Phi
[i]Type for lpSupply

Name: lpSupply Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_14(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.timelockElapsed()()
Propogating parameters and globals to SSA variables...
End popogation
TMP_126 = CONVERT pair_4 to address
Converting pair_4

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_126 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_126

Name: TMP_126 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_127 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_127 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_127

Name: TMP_127 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_128(bool) = TMP_126 != TMP_127
[i]Type for TMP_128

Name: TMP_128 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_129(None) = SOLIDITY_CALL require(bool,string)(TMP_128,LaunchEvent: pair not created)
[i]Type for TMP_129

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1 (-> ['getUserInfo'])
Globalname: user
End popogation
REF_39(LaunchEvent.UserInfo) -> getUserInfo_12[msg.sender]
INDEX
Source address: u
[i]Type for REF_39

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_39(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_39 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_40(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_40

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnPair
#################
Member: 
Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
TMP_130 = ! REF_40 
[i]Type for TMP_130

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_131(None) = SOLIDITY_CALL require(bool,string)(TMP_130,LaunchEvent: liquidity already withdrawn)
[i]Type for TMP_131

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
TMP_132(uint256) = INTERNAL_CALL, LaunchEvent.pairBalance(address)(msg.sender)
init
[i]Type for TMP_132

Name: TMP_132 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := TMP_132(uint256)
asgn
init
end
_______________

Name: TMP_132 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
End popogation
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user

Name: user Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_41(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnPair
MEMBER
init
end
init
end
init
end
_______________

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_41

Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnPair
#################
Member: 
Name: user Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef

Name: user Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
XXXX
REF_41 (->user_2 (-> ['getUserInfo'])) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_41

Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnPair
#################
Member: 
Name: user Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_41 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnPair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
getUserInfo_13(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
TMP_133(bool) = msg.sender == issuer_8
[i]Type for TMP_133

Name: TMP_133 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
TMP_139 = CONVERT pair_5 to address
Converting pair_5

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_139 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_139

Name: TMP_139 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 2
Globalname: balance
End popogation
TMP_134(uint256) = lpSupply_5 (c)/ 2
init
end
init
end
lnorm: u rnorm: 0
init
end
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_134

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
balance_2(uint256) := TMP_134(uint256)
asgn
init
end
_______________

Name: TMP_134 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: balance, Num: 3
Globalname: balance

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
Phid
balance_3(uint256) := ϕ(['balance_2', 'balance_1'])
Phi
init
end
_______________

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef

Name: balance Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 2
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for balance

Name: balance Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_135 = CONVERT pair_5 to address
Converting pair_5

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_135 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_135

Name: TMP_135 Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Phid
TMP_141(bool) = HIGH_LEVEL_CALL, dest:pair_5(IJoePair), function:transfer, arguments:['msg.sender', 'balance_3']  
High Call: transfer
Running querryfc
[i]Type for TMP_141

Name: TMP_141 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pair_7(IJoePair) := ϕ(['pair_9', 'pair_6', 'pair_7', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_137(bool) = tokenReserve_17 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_137

Name: TMP_137 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation
amount_1(uint256) := tokenReserve_17(uint256)
asgn
init
end
_______________

Name: tokenReserve Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: amount Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Source address: u
Finance type key: (0, -1)
[i]Type for amount

Name: amount Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
tokenReserve_18(uint256) := 0(uint256)
asgn
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenReserve Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for tokenReserve

Name: tokenReserve Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: withdrawLiquidity
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Phid
TMP_138(bool) = HIGH_LEVEL_CALL, dest:token_15(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_138

Name: TMP_138 Function: withdrawLiquidity
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token_16(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: withdrawLiquidity
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
pair_6(IJoePair) := ϕ(['pair_9', 'pair_5', 'pair_7', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



withdrawIncentives


issuer_9(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
token_17(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
pair_8(IJoePair) := ϕ(['pair_9', 'pair_0', 'pair_7', 'pair_1'])
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3', 'tokenIncentiveIssuerRefund_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
TMP_144 = CONVERT pair_9 to address
TMP_145 = CONVERT 0 to address
TMP_146(bool) = TMP_144 != TMP_145
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
TMP_148 = ! REF_45 
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
TMP_150(bool) = msg.sender == issuer_10
CONDITION TMP_150
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
amount_1(uint256) := TMP_152(uint256)
amount_2(uint256) := tokenIncentiveIssuerRefund_3(uint256)
amount_3(uint256) := ϕ(['amount_2', 'amount_1'])
TMP_153(bool) = amount_3 > 0
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,LaunchEvent: caller has no incentive to claim)
tokenIncentivesBalance_11(uint256) = tokenIncentivesBalance_10 (c)- amount_3
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token_18(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_3']  
token_19(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_18', 'token_26', 'token_22', 'token_21', 'token_25'])


Propogating parameters and globals to SSA variables...
End popogation
Name: issuer, Num: 9
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 17
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: getUserInfo, Num: 14
Globalname: getUserInfo
global...

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: pair, Num: 8
Globalname: pair
global...

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Phid
Name: wavaxAllocated, Num: 2
Globalname: wavaxAllocated
global...

Name: wavaxAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenIncentivesBalance, Num: 9
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentivesForUsers, Num: 10
Globalname: tokenIncentivesForUsers
global...

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: tokenIncentiveIssuerRefund, Num: 2
Globalname: tokenIncentiveIssuerRefund
global...

Name: tokenIncentiveIssuerRefund Function: createPair
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Phid
issuer_9(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: withdrawIncentives
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
token_17(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pair_8(IJoePair) := ϕ(['pair_9', 'pair_0', 'pair_7', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3', 'tokenIncentiveIssuerRefund_0'])
Phi
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
Name: pair, Num: 9
Globalname: pair
global...

Name: pair Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
TMP_144 = CONVERT pair_9 to address
Converting pair_9

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_144 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_144

Name: TMP_144 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_145 = CONVERT 0 to address
Converting 0

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_145 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_145

Name: TMP_145 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_146(bool) = TMP_144 != TMP_145
[i]Type for TMP_146

Name: TMP_146 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: getUserInfo, Num: 15
Globalname: getUserInfo
global...

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: user, Num: 1 (-> ['getUserInfo'])
Globalname: user
End popogation
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
INDEX
Source address: u
[i]Type for REF_44

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_44 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
MEMBER
init
end
init
end
OUT KEY: withdrawIncentives_user_hasWithdrawnIncentives
OUT KEY: withdrawIncentives_user_hasWithdrawnIncentives
FTT: None
No field found
[i]Type for REF_45

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnIncentives
#################
Member: 
Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_148 = ! REF_45 
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
Name: getUserInfo, Num: 16
Globalname: getUserInfo
global...

Name: getUserInfo Function: withdrawLiquidity
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_46

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnIncentives
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef

Name: user Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
XXXX
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_46

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnIncentives
#################
Member: 
Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
Fieldf: 
Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: issuer, Num: 10
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4
End popogation
TMP_150(bool) = msg.sender == issuer_10
[i]Type for TMP_150

Name: TMP_150 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: wavaxAllocated, Num: 3
Globalname: wavaxAllocated
global...

Name: wavaxAllocated Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: tokenIncentivesForUsers, Num: 11
Globalname: tokenIncentivesForUsers
global...

Name: tokenIncentivesForUsers Function: createPair
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
Name: amount, Num: 1
Globalname: amount
End popogation
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
OUT KEY: withdrawIncentives_user_balance
OUT KEY: withdrawIncentives_user_balance
FTT: None
No field found
[i]Type for REF_47

Name: user.balance Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_2 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
testing mul...
init
end
init
end

Name: user.balance Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIncentivesForUsers Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
lnorm: u rnorm: 0
init
end
_______________

Name: tokenIncentivesForUsers Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_151 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_151

Name: TMP_151 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
init
end
init
end
lnorm: 0 rnorm: u
init
end
_______________

Name: TMP_151 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_152 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: raw balance
Source address: u
init
end
init
end
lnorm: 0 rnorm: u
init
end
_______________

Name: TMP_151 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_152 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-998
-998
-998
-998
-998
-1
[i]Type for TMP_152

Name: TMP_152 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
amount_1(uint256) := TMP_152(uint256)
asgn
init
end
_______________

Name: TMP_152 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: amount Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenIncentiveIssuerRefund, Num: 3
Globalname: tokenIncentiveIssuerRefund
global...

Name: tokenIncentiveIssuerRefund Function: createPair
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Source address: u
Name: amount, Num: 2
Globalname: amount
End popogation
amount_2(uint256) := tokenIncentiveIssuerRefund_3(uint256)
asgn
init
end
_______________

Name: tokenIncentiveIssuerRefund Function: None
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: amount Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (0, -1)
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: amount, Num: 3
Globalname: amount

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
amount_3(uint256) := ϕ(['amount_2', 'amount_1'])
Phi
init
end
_______________

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: amount Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_153(bool) = amount_3 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_153

Name: TMP_153 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,LaunchEvent: caller has no incentive to claim)
[i]Type for TMP_154

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenIncentivesBalance, Num: 10
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
Name: tokenIncentivesBalance, Num: 11
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: initialize
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
End popogation
tokenIncentivesBalance_11(uint256) = tokenIncentivesBalance_10 (c)- amount_3
init
end
init
end
Error with tokenIncentivesBalance in function withdrawIncentives
Error with: tokenIncentivesBalance in function withdrawIncentives
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: token, Num: 18
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998
End popogation
Name: token, Num: 19
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token_18(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_3']  
High Call: transfer
Running querryfc
[i]Type for TMP_155

Name: TMP_155 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token_19(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_18', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX


issuer_9(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
token_17(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
pair_8(IJoePair) := ϕ(['pair_9', 'pair_0', 'pair_7', 'pair_1'])
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3', 'tokenIncentiveIssuerRefund_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
TMP_144 = CONVERT pair_9 to address
TMP_145 = CONVERT 0 to address
TMP_146(bool) = TMP_144 != TMP_145
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
TMP_148 = ! REF_45 
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
TMP_150(bool) = msg.sender == issuer_10
CONDITION TMP_150
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
amount_1(uint256) := TMP_152(uint256)
amount_2(uint256) := tokenIncentiveIssuerRefund_3(uint256)
amount_3(uint256) := ϕ(['amount_2', 'amount_1'])
TMP_153(bool) = amount_3 > 0
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,LaunchEvent: caller has no incentive to claim)
tokenIncentivesBalance_11(uint256) = tokenIncentivesBalance_10 (c)- amount_3
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token_18(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_3']  
token_19(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_18', 'token_26', 'token_22', 'token_21', 'token_25'])


Propogating parameters and globals to SSA variables...
End popogation

Name: issuer Function: withdrawIncentives
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: pair Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxAllocated Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesForUsers Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentiveIssuerRefund Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Phid
issuer_9(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: withdrawIncentives
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
token_17(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pair_8(IJoePair) := ϕ(['pair_9', 'pair_0', 'pair_7', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3', 'tokenIncentiveIssuerRefund_0'])
Phi
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
End popogation
TMP_144 = CONVERT pair_9 to address
Converting pair_9

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_144 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_144

Name: TMP_144 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_145 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_145 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_145

Name: TMP_145 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_146(bool) = TMP_144 != TMP_145
[i]Type for TMP_146

Name: TMP_146 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1 (-> ['getUserInfo'])
Globalname: user
End popogation
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
INDEX
Source address: u
[i]Type for REF_44

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_44 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_45

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnIncentives
#################
Member: 
Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
Fieldf: 
Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
TMP_148 = ! REF_45 
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
End popogation
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user

Name: user Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives, balance
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
MEMBER
init
end
init
end
init
end
_______________

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_46

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnIncentives
#################
Member: 
Name: user Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives, balance
Finance Type: undef
Fieldf: 
Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef

Name: user Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives, balance
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, hasWithdrawnIncentives
Finance Type: undef
XXXX
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_46

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnIncentives
#################
Member: 
Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, hasWithdrawnIncentives
Finance Type: undef
Fieldf: 
Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_150(bool) = msg.sender == issuer_10
[i]Type for TMP_150

Name: TMP_150 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 1
Globalname: amount
End popogation
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_47

Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_2 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, hasWithdrawnIncentives
Finance Type: undef
Fieldf: 
Name: balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
testing mul...
init
end
init
end

Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIncentivesForUsers Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
lnorm: u rnorm: 0
init
end
_______________

Name: tokenIncentivesForUsers Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_151 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for TMP_151

Name: TMP_151 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
init
end
init
end
lnorm: 0 rnorm: u
init
end
_______________

Name: TMP_151 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_152 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
init
end
init
end
lnorm: 0 rnorm: u
init
end
_______________

Name: TMP_151 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_152 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-998
-998
-998
-998
-998
-1
[i]Type for TMP_152

Name: TMP_152 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
amount_1(uint256) := TMP_152(uint256)
asgn
init
end
_______________

Name: TMP_152 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: amount Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
Finance type key: (0, -1)
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
Name: amount, Num: 2
Globalname: amount
End popogation
amount_2(uint256) := tokenIncentiveIssuerRefund_3(uint256)
asgn
init
end
_______________

Name: tokenIncentiveIssuerRefund Function: None
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: amount Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Source address: u
Finance type key: (0, -1)
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: amount, Num: 3
Globalname: amount

Name: amount Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Phid
amount_3(uint256) := ϕ(['amount_2', 'amount_1'])
Phi
init
end
_______________

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: amount Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Source address: u
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_153(bool) = amount_3 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_153

Name: TMP_153 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,LaunchEvent: caller has no incentive to claim)
[i]Type for TMP_154

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
tokenIncentivesBalance_11(uint256) = tokenIncentivesBalance_10 (c)- amount_3
init
end
init
end
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token_18(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_3']  
High Call: transfer
Running querryfc
[i]Type for TMP_155

Name: TMP_155 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token_19(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_18', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX


issuer_9(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
token_17(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
pair_8(IJoePair) := ϕ(['pair_9', 'pair_0', 'pair_7', 'pair_1'])
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3', 'tokenIncentiveIssuerRefund_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
TMP_144 = CONVERT pair_9 to address
TMP_145 = CONVERT 0 to address
TMP_146(bool) = TMP_144 != TMP_145
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
TMP_148 = ! REF_45 
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
TMP_150(bool) = msg.sender == issuer_10
CONDITION TMP_150
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
amount_1(uint256) := TMP_152(uint256)
amount_2(uint256) := tokenIncentiveIssuerRefund_3(uint256)
amount_3(uint256) := ϕ(['amount_2', 'amount_1'])
TMP_153(bool) = amount_3 > 0
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,LaunchEvent: caller has no incentive to claim)
tokenIncentivesBalance_11(uint256) = tokenIncentivesBalance_10 (c)- amount_3
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token_18(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_3']  
token_19(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_18', 'token_26', 'token_22', 'token_21', 'token_25'])


Propogating parameters and globals to SSA variables...
End popogation

Name: issuer Function: withdrawIncentives
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: pair Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxAllocated Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentivesForUsers Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: tokenIncentiveIssuerRefund Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Phid
issuer_9(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: withdrawIncentives
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
token_17(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_14(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
pair_8(IJoePair) := ϕ(['pair_9', 'pair_0', 'pair_7', 'pair_1'])
Phi
[i]Type for pair

Name: pair Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxAllocated_2(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_9(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentivesForUsers_10(uint256) := ϕ(['tokenIncentivesForUsers_0', 'tokenIncentivesForUsers_11', 'tokenIncentivesForUsers_1', 'tokenIncentivesForUsers_9', 'tokenIncentivesForUsers_7'])
Phi
[i]Type for tokenIncentivesForUsers

Name: tokenIncentivesForUsers Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
tokenIncentiveIssuerRefund_2(uint256) := ϕ(['tokenIncentiveIssuerRefund_1', 'tokenIncentiveIssuerRefund_3', 'tokenIncentiveIssuerRefund_0'])
Phi
[i]Type for tokenIncentiveIssuerRefund

Name: tokenIncentiveIssuerRefund Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(False)
init
end
Propogating parameters and globals to SSA variables...
End popogation
TMP_144 = CONVERT pair_9 to address
Converting pair_9

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: pair Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef

Name: TMP_144 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_144

Name: TMP_144 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: JoePair
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_145 = CONVERT 0 to address
Converting 0

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_145 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_145

Name: TMP_145 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_146(bool) = TMP_144 != TMP_145
[i]Type for TMP_146

Name: TMP_146 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_147(None) = SOLIDITY_CALL require(bool,string)(TMP_146,LaunchEvent: pair not created)
[i]Type for TMP_147

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_44(LaunchEvent.UserInfo) -> getUserInfo_15[msg.sender]
INDEX
Source address: u
[i]Type for REF_44

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_44(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_44 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_45(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
MEMBER
init
end
init
end
init
end
_______________

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_45

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnIncentives
#################
Member: 
Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnIncentives
Finance Type: undef
Fieldf: 
Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
TMP_148 = ! REF_45 
[i]Type for TMP_148

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_149(None) = SOLIDITY_CALL require(bool,string)(TMP_148,LaunchEvent: incentives already withdrawn)
[i]Type for TMP_149

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, hasWithdrawnIncentives
Finance Type: undef
Phid

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_46(bool) -> user_1 (-> ['getUserInfo']).hasWithdrawnIncentives
MEMBER
init
end
init
end
init
end
_______________

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_46

Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnIncentives
#################
Member: 
Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, hasWithdrawnIncentives
Finance Type: undef
Fieldf: 
Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
[i]Type for user

Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, hasWithdrawnIncentives
Finance Type: undef
XXXX
REF_46 (->user_2 (-> ['getUserInfo'])) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_46

Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: hasWithdrawnIncentives
#################
Member: 
Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, hasWithdrawnIncentives
Finance Type: undef
Fieldf: 
Name: hasWithdrawnIncentives Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_46 Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnIncentives Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
getUserInfo_16(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
TMP_150(bool) = msg.sender == issuer_10
[i]Type for TMP_150

Name: TMP_150 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_47(uint256) -> user_2 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_47

Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_2 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance, hasWithdrawnIncentives
Finance Type: undef
Fieldf: 
Name: balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_151(uint256) = REF_47 (c)* tokenIncentivesForUsers_11
testing mul...
init
end
init
end

Name: user.balance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIncentivesForUsers Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
lnorm: u rnorm: 0
init
end
_______________

Name: tokenIncentivesForUsers Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_151 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-998
-998
-998
-998
-998
-1
[i]Type for TMP_151

Name: TMP_151 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
TMP_152(uint256) = TMP_151 (c)/ wavaxAllocated_3
init
end
init
end
lnorm: 0 rnorm: u
init
end
_______________

Name: TMP_151 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_152 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-998
-998
-998
-998
-998
-1
init
end
init
end
lnorm: 0 rnorm: u
init
end
_______________

Name: TMP_151 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: TMP_152 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-998
-998
-998
-998
-998
-1
[i]Type for TMP_152

Name: TMP_152 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
amount_1(uint256) := TMP_152(uint256)
asgn
init
end
_______________

Name: TMP_152 Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
-998
-998
-998
-998
-998
-998
-1
Finance type key: (0, -1)
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: 0
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
amount_2(uint256) := tokenIncentiveIssuerRefund_3(uint256)
asgn
init
end
_______________

Name: tokenIncentiveIssuerRefund Function: None
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
-998
-998
-998
-998
-1
Finance type key: (0, -1)
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
Phid
amount_3(uint256) := ϕ(['amount_2', 'amount_1'])
Phi
[i]Type for amount

Name: amount Function: withdrawIncentives
Num: -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_153(bool) = amount_3 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_153

Name: TMP_153 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
TMP_154(None) = SOLIDITY_CALL require(bool,string)(TMP_153,LaunchEvent: caller has no incentive to claim)
[i]Type for TMP_154

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
tokenIncentivesBalance_11(uint256) = tokenIncentivesBalance_10 (c)- amount_3
init
end
init
end
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
TMP_155(bool) = HIGH_LEVEL_CALL, dest:token_18(IERC20Metadata), function:transfer, arguments:['msg.sender', 'amount_3']  
High Call: transfer
Running querryfc
[i]Type for TMP_155

Name: TMP_155 Function: withdrawIncentives
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
token_19(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_18', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: withdrawIncentives
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



emergencyWithdraw


issuer_11(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
WAVAX_22(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_20(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
getUserInfo_17(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
tokenReserve_19(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_12(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
wavaxReserve_23(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(True)
TMP_157(bool) = msg.sender != issuer_12
CONDITION TMP_157
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_49(LaunchEvent.UserInfo)
TMP_163(uint256) = tokenReserve_20 (c)+ tokenIncentivesBalance_13
balance_scope_0_1(uint256) := TMP_163(uint256)
REF_50(uint256) -> user_1 (-> ['getUserInfo']).balance
TMP_158(bool) = REF_50 > 0
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,LaunchEvent: expected user to have non-zero balance to perform emergency withdraw)
REF_51(uint256) -> user_1 (-> ['getUserInfo']).balance
balance_1(uint256) := REF_51(uint256)
tokenReserve_21(uint256) := 0(uint256)
REF_52(uint256) -> user_1 (-> ['getUserInfo']).balance
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_52 (->user_2 (-> ['getUserInfo'])) := 0(uint256)
getUserInfo_19(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
tokenIncentivesBalance_14(uint256) := 0(uint256)
wavaxReserve_25(uint256) = wavaxReserve_24 (c)- balance_1
HIGH_LEVEL_CALL, dest:WAVAX_23(IWAVAX), function:withdraw, arguments:['balance_1']  
WAVAX_24(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
TMP_164(bool) = HIGH_LEVEL_CALL, dest:token_21(IERC20Metadata), function:transfer, arguments:['issuer_12', 'balance_scope_0_1']  
issuer_13(address) := ϕ(['issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
token_22(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,balance_1)
Emit TokenEmergencyWithdraw(msg.sender,balance_scope_0_1)
Emit AvaxEmergencyWithdraw(msg.sender,balance_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: issuer, Num: 11
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid
Name: WAVAX, Num: 22
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 20
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: getUserInfo, Num: 17
Globalname: getUserInfo
global...

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 19
Globalname: tokenReserve
global...

Name: tokenReserve Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
Name: tokenIncentivesBalance, Num: 12
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u

Name: None Function: None
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid
Name: wavaxReserve, Num: 23
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
issuer_11(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: emergencyWithdraw
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_22(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: emergencyWithdraw
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_20(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: emergencyWithdraw
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_17(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_19(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_12(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_23(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(True)
init
end
Propogating parameters and globals to SSA variables...
Name: issuer, Num: 12
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4
End popogation
TMP_157(bool) = msg.sender != issuer_12
[i]Type for TMP_157

Name: TMP_157 Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: getUserInfo, Num: 18
Globalname: getUserInfo
global...

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: user, Num: 1 (-> ['getUserInfo'])
Globalname: user
End popogation
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
INDEX
Source address: u
[i]Type for REF_49

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_49(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_49 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenReserve, Num: 20
Globalname: tokenReserve
global...

Name: tokenReserve Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u
Name: tokenIncentivesBalance, Num: 13
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
Name: balance_scope_0, Num: 1
Globalname: balance_scope_0
End popogation
TMP_163(uint256) = tokenReserve_20 (c)+ tokenIncentivesBalance_13
init
end
init
end
Error with TMP_163 in function emergencyWithdraw
Error with: TMP_163 in function emergencyWithdraw
[i]Type for TMP_163

Name: TMP_163 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_scope_0_1(uint256) := TMP_163(uint256)
asgn
init
end
_______________

Name: TMP_163 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance_scope_0 Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for balance_scope_0

Name: balance_scope_0 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_50(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
OUT KEY: emergencyWithdraw_user_balance
OUT KEY: emergencyWithdraw_user_balance
FTT: None
No field found
[i]Type for REF_50

Name: user.balance Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
TMP_158(bool) = REF_50 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user.balance Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_158 Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_158

Name: TMP_158 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,LaunchEvent: expected user to have non-zero balance to perform emergency withdraw)
[i]Type for TMP_159

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
REF_51(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_51

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := REF_51(uint256)
asgn
init
end
_______________

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenReserve, Num: 21
Globalname: tokenReserve
global...

Name: tokenReserve Function: withdrawLiquidity
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u
End popogation
tokenReserve_21(uint256) := 0(uint256)
asgn
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for tokenReserve

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: getUserInfo, Num: 19
Globalname: getUserInfo
global...

Name: getUserInfo Function: withdrawIncentives
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
End popogation
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_52(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
Source address: u
[i]Type for REF_52

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: False
Source address: u
Finance type key: (-1, -1)
Add new member...
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef

Name: user Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
REF_52 (->user_2 (-> ['getUserInfo'])) := 0(uint256)
asgn
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_52

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
getUserInfo_19(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: tokenIncentivesBalance, Num: 14
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: withdrawIncentives
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Source address: u
End popogation
tokenIncentivesBalance_14(uint256) := 0(uint256)
asgn
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Finance type key: (-1, -1)
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: wavaxReserve, Num: 24
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u
Name: wavaxReserve, Num: 25
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: createPair
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u
End popogation
wavaxReserve_25(uint256) = wavaxReserve_24 (c)- balance_1
init
end
init
end
init
end
_______________

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for wavaxReserve

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: WAVAX, Num: 23
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1
End popogation
Name: WAVAX, Num: 24
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:WAVAX_23(IWAVAX), function:withdraw, arguments:['balance_1']  
High Call: withdraw
WAVAX_24(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: emergencyWithdraw
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: token, Num: 21
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998
End popogation
Name: issuer, Num: 13
Globalname: issuer
global...

Name: PIC_18 Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Source address: 4

Name: None Function: None
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 22
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
TMP_164(bool) = HIGH_LEVEL_CALL, dest:token_21(IERC20Metadata), function:transfer, arguments:['issuer_12', 'balance_scope_0_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_164

Name: TMP_164 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
issuer_13(address) := ϕ(['issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: emergencyWithdraw
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
token_22(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: emergencyWithdraw
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,balance_1)
init
init
end
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation


issuer_11(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
WAVAX_22(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_20(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
getUserInfo_17(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
tokenReserve_19(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_12(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
wavaxReserve_23(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
MODIFIER_CALL, LaunchEvent.isStopped(bool)(True)
TMP_157(bool) = msg.sender != issuer_12
CONDITION TMP_157
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_49(LaunchEvent.UserInfo)
TMP_163(uint256) = tokenReserve_20 (c)+ tokenIncentivesBalance_13
balance_scope_0_1(uint256) := TMP_163(uint256)
REF_50(uint256) -> user_1 (-> ['getUserInfo']).balance
TMP_158(bool) = REF_50 > 0
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,LaunchEvent: expected user to have non-zero balance to perform emergency withdraw)
REF_51(uint256) -> user_1 (-> ['getUserInfo']).balance
balance_1(uint256) := REF_51(uint256)
tokenReserve_21(uint256) := 0(uint256)
REF_52(uint256) -> user_1 (-> ['getUserInfo']).balance
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
REF_52 (->user_2 (-> ['getUserInfo'])) := 0(uint256)
getUserInfo_19(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
tokenIncentivesBalance_14(uint256) := 0(uint256)
wavaxReserve_25(uint256) = wavaxReserve_24 (c)- balance_1
HIGH_LEVEL_CALL, dest:WAVAX_23(IWAVAX), function:withdraw, arguments:['balance_1']  
WAVAX_24(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
TMP_164(bool) = HIGH_LEVEL_CALL, dest:token_21(IERC20Metadata), function:transfer, arguments:['issuer_12', 'balance_scope_0_1']  
issuer_13(address) := ϕ(['issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
token_22(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,balance_1)
Emit TokenEmergencyWithdraw(msg.sender,balance_scope_0_1)
Emit AvaxEmergencyWithdraw(msg.sender,balance_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: issuer Function: emergencyWithdraw
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid

Name: WAVAX Function: emergencyWithdraw
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: emergencyWithdraw
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
Phid

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
issuer_11(address) := ϕ(['issuer_0', 'issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: emergencyWithdraw
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_22(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: emergencyWithdraw
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_20(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: emergencyWithdraw
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_17(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_19(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_12(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 1
Fields: 
Finance Type: raw balance
XXXX
wavaxReserve_23(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
MODIFIER_CALL, LaunchEvent.isStopped(bool)(True)
init
end
Propogating parameters and globals to SSA variables...
End popogation
TMP_157(bool) = msg.sender != issuer_12
[i]Type for TMP_157

Name: TMP_157 Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1 (-> ['getUserInfo'])
Globalname: user
End popogation
REF_49(LaunchEvent.UserInfo) -> getUserInfo_18[msg.sender]
INDEX
Source address: u
[i]Type for REF_49

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := REF_49(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: REF_49 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance_scope_0, Num: 1
Globalname: balance_scope_0
End popogation
TMP_163(uint256) = tokenReserve_20 (c)+ tokenIncentivesBalance_13
init
end
init
end
[i]Type for TMP_163

Name: TMP_163 Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_scope_0_1(uint256) := TMP_163(uint256)
asgn
init
end
_______________

Name: TMP_163 Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance_scope_0 Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for balance_scope_0

Name: balance_scope_0 Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
REF_50(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_50

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_158(bool) = REF_50 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_158

Name: TMP_158 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_159(None) = SOLIDITY_CALL require(bool,string)(TMP_158,LaunchEvent: expected user to have non-zero balance to perform emergency withdraw)
[i]Type for TMP_159

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance, Num: 1
Globalname: balance
End popogation
REF_51(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_51

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
balance_1(uint256) := REF_51(uint256)
asgn
init
end
_______________

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for balance

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
tokenReserve_21(uint256) := 0(uint256)
asgn
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for tokenReserve

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user
End popogation
Name: user, Num: 2 (-> ['getUserInfo'])
Globalname: user

Name: user Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Phid

Name: getUserInfo Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
REF_52(uint256) -> user_1 (-> ['getUserInfo']).balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_52

Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
user_2 (-> ['getUserInfo'])(LaunchEvent.UserInfo) := ϕ(["user_1 (-> ['getUserInfo'])"])
Phi
init
end
_______________

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef

Name: user Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
COPY HERE
Source address: u
[i]Type for user

Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
XXXX
REF_52 (->user_2 (-> ['getUserInfo'])) := 0(uint256)
asgn
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for REF_52

Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Root: user_1 (-> ['getUserInfo']), Field: balance
#################
Member: 
Name: user Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: balance
Finance Type: undef
Fieldf: 
Name: balance Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: REF_52 Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
getUserInfo_19(mapping(address => LaunchEvent.UserInfo)) := ϕ(["user_2 (-> ['getUserInfo'])"])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
tokenIncentivesBalance_14(uint256) := 0(uint256)
asgn
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
wavaxReserve_25(uint256) = wavaxReserve_24 (c)- balance_1
init
end
init
end
init
end
_______________

Name: balance Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for wavaxReserve

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: emergencyWithdraw
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
HIGH_LEVEL_CALL, dest:WAVAX_23(IWAVAX), function:withdraw, arguments:['balance_1']  
High Call: withdraw
WAVAX_24(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: emergencyWithdraw
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: balance_scope_0, Num: 1
Globalname: balance_scope_0
End popogation

Name: issuer Function: emergencyWithdraw
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: emergencyWithdraw
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
TMP_164(bool) = HIGH_LEVEL_CALL, dest:token_21(IERC20Metadata), function:transfer, arguments:['issuer_12', 'balance_scope_0_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_164

Name: TMP_164 Function: emergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
issuer_13(address) := ϕ(['issuer_1', 'issuer_10', 'issuer_13', 'issuer_12', 'issuer_8', 'issuer_4'])
Phi
[i]Type for issuer

Name: issuer Function: emergencyWithdraw
Num: -1
Den: -1
Address: 4
Norm: u
LF: issuer
Value: u
Fields: 
Finance Type: undef
XXXX
token_22(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: emergencyWithdraw
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(msg.sender,balance_1)
init
init
end
Propogating parameters and globals to SSA variables...
Name: balance_scope_0, Num: 1
Globalname: balance_scope_0
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



allowEmergencyWithdraw


rocketJoeFactory_18(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
TMP_167 = CONVERT rocketJoeFactory_18 to address
TMP_168 = CONVERT TMP_167 to Ownable
TMP_169(address) = HIGH_LEVEL_CALL, dest:TMP_168(Ownable), function:owner, arguments:[]  
rocketJoeFactory_19(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_18', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
TMP_170(bool) = msg.sender == TMP_169
TMP_171(None) = SOLIDITY_CALL require(bool,string)(TMP_170,LaunchEvent: caller is not RocketJoeFactory owner)
stopped_1(bool) := True(bool)
Emit Stopped()


Propogating parameters and globals to SSA variables...
End popogation
Name: rocketJoeFactory, Num: 18
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
rocketJoeFactory_18(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Name: rocketJoeFactory, Num: 19
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_167 = CONVERT rocketJoeFactory_18 to address
Converting rocketJoeFactory_18

Name: rocketJoeFactory Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: rocketJoeFactory Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef

Name: TMP_167 Function: allowEmergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 6
[i]Type for TMP_167

Name: TMP_167 Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_168 = CONVERT TMP_167 to Ownable
Converting TMP_167

Name: TMP_167 Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_167 Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef

Name: TMP_168 Function: allowEmergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 6
UNKNOWN
[i]Type for TMP_168

Name: TMP_168 Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_169(address) = HIGH_LEVEL_CALL, dest:TMP_168(Ownable), function:owner, arguments:[]  
High Call: owner
Running querryfc
Written func info: Ownable, owner
[i]Type for TMP_169

Name: TMP_169 Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_19(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_18', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_170(bool) = msg.sender == TMP_169
[i]Type for TMP_170

Name: TMP_170 Function: allowEmergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_171(None) = SOLIDITY_CALL require(bool,string)(TMP_170,LaunchEvent: caller is not RocketJoeFactory owner)
[i]Type for TMP_171

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: stopped, Num: 1
Globalname: stopped
global...

Name: PIC_15 Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
End popogation
stopped_1(bool) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: stopped Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for stopped

Name: stopped Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation


rocketJoeFactory_18(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
TMP_167 = CONVERT rocketJoeFactory_18 to address
TMP_168 = CONVERT TMP_167 to Ownable
TMP_169(address) = HIGH_LEVEL_CALL, dest:TMP_168(Ownable), function:owner, arguments:[]  
rocketJoeFactory_19(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_18', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
TMP_170(bool) = msg.sender == TMP_169
TMP_171(None) = SOLIDITY_CALL require(bool,string)(TMP_170,LaunchEvent: caller is not RocketJoeFactory owner)
stopped_1(bool) := True(bool)
Emit Stopped()


Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
rocketJoeFactory_18(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation

Name: rocketJoeFactory Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
TMP_167 = CONVERT rocketJoeFactory_18 to address
Converting rocketJoeFactory_18

Name: rocketJoeFactory Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: rocketJoeFactory Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef

Name: TMP_167 Function: allowEmergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 6
[i]Type for TMP_167

Name: TMP_167 Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_168 = CONVERT TMP_167 to Ownable
Converting TMP_167

Name: TMP_167 Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_167 Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef

Name: TMP_168 Function: allowEmergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: 6
UNKNOWN
[i]Type for TMP_168

Name: TMP_168 Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: UNKNOWN
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_169(address) = HIGH_LEVEL_CALL, dest:TMP_168(Ownable), function:owner, arguments:[]  
High Call: owner
Running querryfc
Written func info: Ownable, owner
[i]Type for TMP_169

Name: TMP_169 Function: allowEmergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_19(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_18', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_170(bool) = msg.sender == TMP_169
[i]Type for TMP_170

Name: TMP_170 Function: allowEmergencyWithdraw
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_171(None) = SOLIDITY_CALL require(bool,string)(TMP_170,LaunchEvent: caller is not RocketJoeFactory owner)
[i]Type for TMP_171

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
stopped_1(bool) := True(bool)
asgn
init
end
_______________

Name: True Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: stopped Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for stopped

Name: stopped Function: allowEmergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: True
Fields: 
Finance Type: undef
XXXX
Source address: u
Propogating parameters and globals to SSA variables...
End popogation
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



skim


WAVAX_25(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_23(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
rocketJoeFactory_20(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
tokenReserve_22(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_15(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
wavaxReserve_26(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
TMP_173(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_20(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
WAVAX_26(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_25', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_24(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_23', 'token_22', 'token_21', 'token_25'])
rocketJoeFactory_21(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_20', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
tokenReserve_23(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_22', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_16(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_15', 'tokenIncentivesBalance_8'])
wavaxReserve_27(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_26', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
penaltyCollector_1(address) := TMP_173(address)
TMP_174 = CONVERT this to address
TMP_175(uint256) = HIGH_LEVEL_CALL, dest:token_24(IERC20Metadata), function:balanceOf, arguments:['TMP_174']  
WAVAX_27(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_26', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_25(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_24', 'token_22', 'token_21', 'token_25'])
tokenReserve_24(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_23', 'tokenReserve_17'])
tokenIncentivesBalance_17(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_16', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_8'])
wavaxReserve_28(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_27'])
TMP_176(uint256) = TMP_175 (c)- tokenReserve_24
TMP_177(uint256) = TMP_176 (c)- tokenIncentivesBalance_17
excessToken_1(uint256) := TMP_177(uint256)
TMP_178(bool) = excessToken_1 > 0
CONDITION TMP_178
TMP_179(bool) = HIGH_LEVEL_CALL, dest:token_25(IERC20Metadata), function:transfer, arguments:['penaltyCollector_1', 'excessToken_1']  
WAVAX_28(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_27', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_26(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
wavaxReserve_29(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_28', 'wavaxReserve_10'])
TMP_180 = CONVERT this to address
TMP_181(uint256) = HIGH_LEVEL_CALL, dest:WAVAX_28(IWAVAX), function:balanceOf, arguments:['TMP_180']  
WAVAX_29(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_28', 'WAVAX_29', 'WAVAX_8'])
wavaxReserve_30(uint256) := ϕ(['wavaxReserve_29', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_182(uint256) = TMP_181 (c)- wavaxReserve_30
excessWavax_1(uint256) := TMP_182(uint256)
TMP_183(bool) = excessWavax_1 > 0
CONDITION TMP_183
TMP_184(bool) = HIGH_LEVEL_CALL, dest:WAVAX_29(IWAVAX), function:transfer, arguments:['penaltyCollector_1', 'excessWavax_1']  
WAVAX_30(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
TMP_185 = CONVERT this to address
TMP_186(uint256) = SOLIDITY_CALL balance(address)(TMP_185)
excessAvax_1(uint256) := TMP_186(uint256)
TMP_187(bool) = excessAvax_1 > 0
CONDITION TMP_187
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(penaltyCollector_1,excessAvax_1)


Propogating parameters and globals to SSA variables...
End popogation
Name: WAVAX, Num: 25
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 23
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: rocketJoeFactory, Num: 20
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 22
Globalname: tokenReserve
global...

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
Name: tokenIncentivesBalance, Num: 15
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
Name: wavaxReserve, Num: 26
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
WAVAX_25(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_23(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_20(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: skim
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_22(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: skim
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_15(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
wavaxReserve_26(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: penaltyCollector, Num: 1
Globalname: penaltyCollector
End popogation
Name: WAVAX, Num: 26
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 24
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: rocketJoeFactory, Num: 21
Globalname: rocketJoeFactory
global...

Name: rocketJoeFactory Function: initialize
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Source address: 6

Name: None Function: None
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid
Name: tokenReserve, Num: 23
Globalname: tokenReserve
global...

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
Name: tokenIncentivesBalance, Num: 16
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
Name: wavaxReserve, Num: 27
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
TMP_173(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_20(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
High Call: penaltyCollector
Running querryfc
Written func info: RocketJoeFactory, penaltyCollector
[i]Type for TMP_173

Name: TMP_173 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_26(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_25', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_24(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_23', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_21(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_20', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: skim
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_23(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_22', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: skim
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_16(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_15', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
wavaxReserve_27(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_26', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
penaltyCollector_1(address) := TMP_173(address)
asgn
init
end
_______________

Name: TMP_173 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: penaltyCollector Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for penaltyCollector

Name: penaltyCollector Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: tokenReserve, Num: 24
Globalname: tokenReserve
global...

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u
Name: tokenIncentivesBalance, Num: 17
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u
Name: excessToken, Num: 1
Globalname: excessToken
End popogation
Name: WAVAX, Num: 27
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 25
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
Name: wavaxReserve, Num: 28
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
TMP_174 = CONVERT this to address
Converting this
8
[i]Type for TMP_174

Name: TMP_174 Function: skim
Num: -1
Den: -1
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_175(uint256) = HIGH_LEVEL_CALL, dest:token_24(IERC20Metadata), function:balanceOf, arguments:['TMP_174']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Metadata, balanceOf
Handling balance function!
-998
[i]Type for TMP_175

Name: TMP_175 Function: skim
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
WAVAX_27(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_26', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_25(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_24', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_24(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_23', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: skim
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_17(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_16', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
wavaxReserve_28(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_27'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_176(uint256) = TMP_175 (c)- tokenReserve_24
init
end
init
end
Error with TMP_176 in function skim
Error with: TMP_176 in function skim
[i]Type for TMP_176

Name: TMP_176 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_177(uint256) = TMP_176 (c)- tokenIncentivesBalance_17
init
end
init
end
init
end
_______________

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: TMP_177 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_177

Name: TMP_177 Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
excessToken_1(uint256) := TMP_177(uint256)
asgn
init
end
_______________

Name: TMP_177 Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: excessToken Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
Finance type key: (-1, -1)
[i]Type for excessToken

Name: excessToken Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_178(bool) = excessToken_1 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_178

Name: TMP_178 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: WAVAX, Num: 28
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
Name: token, Num: 26
Globalname: token
global...

Name: token Function: initialize
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Source address: -998

Name: None Function: None
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid
Name: wavaxReserve, Num: 29
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
TMP_179(bool) = HIGH_LEVEL_CALL, dest:token_25(IERC20Metadata), function:transfer, arguments:['penaltyCollector_1', 'excessToken_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_179

Name: TMP_179 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_28(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_27', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_26(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_29(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_28', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: wavaxReserve, Num: 30
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u
Name: excessWavax, Num: 1
Globalname: excessWavax
End popogation
Name: WAVAX, Num: 29
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
TMP_180 = CONVERT this to address
Converting this
8
[i]Type for TMP_180

Name: TMP_180 Function: skim
Num: -1
Den: -1
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_181(uint256) = HIGH_LEVEL_CALL, dest:WAVAX_28(IWAVAX), function:balanceOf, arguments:['TMP_180']  
High Call: balanceOf
Running querryfc
Written func info: WAVAX, balanceOf
Handling balance function!
1
[i]Type for TMP_181

Name: TMP_181 Function: skim
Num: 1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
WAVAX_29(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_28', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_30(uint256) := ϕ(['wavaxReserve_29', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_182(uint256) = TMP_181 (c)- wavaxReserve_30
init
end
init
end
init
end
_______________

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: TMP_182 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
[i]Type for TMP_182

Name: TMP_182 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
excessWavax_1(uint256) := TMP_182(uint256)
asgn
init
end
_______________

Name: TMP_182 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: excessWavax Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (0, -1)
[i]Type for excessWavax

Name: excessWavax Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_183(bool) = excessWavax_1 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_183

Name: TMP_183 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Name: WAVAX, Num: 30
Globalname: WAVAX
global...

Name: WAVAX Function: initialize
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Source address: 1

Name: None Function: None
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
TMP_184(bool) = HIGH_LEVEL_CALL, dest:WAVAX_29(IWAVAX), function:transfer, arguments:['penaltyCollector_1', 'excessWavax_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_184

Name: TMP_184 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_30(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: excessAvax, Num: 1
Globalname: excessAvax
End popogation
TMP_185 = CONVERT this to address
Converting this
8
[i]Type for TMP_185

Name: TMP_185 Function: skim
Num: -1
Den: -1
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_186(uint256) = SOLIDITY_CALL balance(address)(TMP_185)
[i]Type for TMP_186

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
excessAvax_1(uint256) := TMP_186(uint256)
asgn
init
end
_______________

Name: TMP_186 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: excessAvax Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for excessAvax

Name: excessAvax Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: excessAvax, Num: 1
Globalname: excessAvax
End popogation
TMP_187(bool) = excessAvax_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: excessAvax Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_187 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_187

Name: TMP_187 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(penaltyCollector_1,excessAvax_1)
init
end
init
end


WAVAX_25(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_23(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
rocketJoeFactory_20(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
tokenReserve_22(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_15(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
wavaxReserve_26(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
TMP_173(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_20(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
WAVAX_26(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_25', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_24(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_23', 'token_22', 'token_21', 'token_25'])
rocketJoeFactory_21(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_20', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
tokenReserve_23(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_22', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_16(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_15', 'tokenIncentivesBalance_8'])
wavaxReserve_27(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_26', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
penaltyCollector_1(address) := TMP_173(address)
TMP_174 = CONVERT this to address
TMP_175(uint256) = HIGH_LEVEL_CALL, dest:token_24(IERC20Metadata), function:balanceOf, arguments:['TMP_174']  
WAVAX_27(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_26', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_25(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_24', 'token_22', 'token_21', 'token_25'])
tokenReserve_24(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_23', 'tokenReserve_17'])
tokenIncentivesBalance_17(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_16', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_8'])
wavaxReserve_28(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_27'])
TMP_176(uint256) = TMP_175 (c)- tokenReserve_24
TMP_177(uint256) = TMP_176 (c)- tokenIncentivesBalance_17
excessToken_1(uint256) := TMP_177(uint256)
TMP_178(bool) = excessToken_1 > 0
CONDITION TMP_178
TMP_179(bool) = HIGH_LEVEL_CALL, dest:token_25(IERC20Metadata), function:transfer, arguments:['penaltyCollector_1', 'excessToken_1']  
WAVAX_28(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_27', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
token_26(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
wavaxReserve_29(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_28', 'wavaxReserve_10'])
TMP_180 = CONVERT this to address
TMP_181(uint256) = HIGH_LEVEL_CALL, dest:WAVAX_28(IWAVAX), function:balanceOf, arguments:['TMP_180']  
WAVAX_29(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_28', 'WAVAX_29', 'WAVAX_8'])
wavaxReserve_30(uint256) := ϕ(['wavaxReserve_29', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
TMP_182(uint256) = TMP_181 (c)- wavaxReserve_30
excessWavax_1(uint256) := TMP_182(uint256)
TMP_183(bool) = excessWavax_1 > 0
CONDITION TMP_183
TMP_184(bool) = HIGH_LEVEL_CALL, dest:WAVAX_29(IWAVAX), function:transfer, arguments:['penaltyCollector_1', 'excessWavax_1']  
WAVAX_30(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
TMP_185 = CONVERT this to address
TMP_186(uint256) = SOLIDITY_CALL balance(address)(TMP_185)
excessAvax_1(uint256) := TMP_186(uint256)
TMP_187(bool) = excessAvax_1 > 0
CONDITION TMP_187
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(penaltyCollector_1,excessAvax_1)


Propogating parameters and globals to SSA variables...
End popogation

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: rocketJoeFactory Function: skim
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: skim
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
WAVAX_25(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_0', 'WAVAX_23', 'WAVAX_30', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_23(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_0', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_20(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_0', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: skim
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_22(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: skim
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_15(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
wavaxReserve_26(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: penaltyCollector, Num: 1
Globalname: penaltyCollector
End popogation

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: rocketJoeFactory Function: skim
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: skim
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
TMP_173(address) = HIGH_LEVEL_CALL, dest:rocketJoeFactory_20(IRocketJoeFactory), function:penaltyCollector, arguments:[]  
High Call: penaltyCollector
Running querryfc
Written func info: RocketJoeFactory, penaltyCollector
[i]Type for TMP_173

Name: TMP_173 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_26(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_25', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_24(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_23', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
rocketJoeFactory_21(IRocketJoeFactory) := ϕ(['rocketJoeFactory_17', 'rocketJoeFactory_21', 'rocketJoeFactory_19', 'rocketJoeFactory_20', 'rocketJoeFactory_9', 'rocketJoeFactory_15'])
Phi
[i]Type for rocketJoeFactory

Name: rocketJoeFactory Function: skim
Num: -1
Den: -1
Address: 6
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_23(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_22', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: skim
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_16(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_15', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
wavaxReserve_27(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_26', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
penaltyCollector_1(address) := TMP_173(address)
asgn
init
end
_______________

Name: TMP_173 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: penaltyCollector Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for penaltyCollector

Name: penaltyCollector Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: excessToken, Num: 1
Globalname: excessToken
End popogation

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: tokenReserve Function: skim
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
TMP_174 = CONVERT this to address
Converting this
8
[i]Type for TMP_174

Name: TMP_174 Function: skim
Num: 
Den: 
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_175(uint256) = HIGH_LEVEL_CALL, dest:token_24(IERC20Metadata), function:balanceOf, arguments:['TMP_174']  
High Call: balanceOf
Running querryfc
Written func info: ERC20Metadata, balanceOf
Handling balance function!
-998
[i]Type for TMP_175

Name: TMP_175 Function: skim
Num: -998
Den: -1
Address: u
Norm: 6
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
WAVAX_27(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_26', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_25(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_24', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
tokenReserve_24(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_23', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: skim
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_17(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_1', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_16', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_8'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
wavaxReserve_28(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_27'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_176(uint256) = TMP_175 (c)- tokenReserve_24
init
end
init
end
[i]Type for TMP_176

Name: TMP_176 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_177(uint256) = TMP_176 (c)- tokenIncentivesBalance_17
init
end
init
end
init
end
_______________

Name: tokenIncentivesBalance Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: TMP_177 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_177

Name: TMP_177 Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
excessToken_1(uint256) := TMP_177(uint256)
asgn
init
end
_______________

Name: TMP_177 Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: excessToken Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u
Finance type key: (-1, -1)
[i]Type for excessToken

Name: excessToken Function: skim
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_178(bool) = excessToken_1 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_178

Name: TMP_178 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: penaltyCollector, Num: 1
Globalname: penaltyCollector
End popogation

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
TMP_179(bool) = HIGH_LEVEL_CALL, dest:token_25(IERC20Metadata), function:transfer, arguments:['penaltyCollector_1', 'excessToken_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_179

Name: TMP_179 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_28(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_27', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
token_26(IERC20Metadata) := ϕ(['token_11', 'token_19', 'token_15', 'token_2', 'token_26', 'token_22', 'token_21', 'token_25'])
Phi
[i]Type for token

Name: token Function: skim
Num: -1
Den: -1
Address: -998
Norm: u
LF: ERC20Metadata
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_29(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_28', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: excessWavax, Num: 1
Globalname: excessWavax
End popogation

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
TMP_180 = CONVERT this to address
Converting this
8
[i]Type for TMP_180

Name: TMP_180 Function: skim
Num: 
Den: 
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_181(uint256) = HIGH_LEVEL_CALL, dest:WAVAX_28(IWAVAX), function:balanceOf, arguments:['TMP_180']  
High Call: balanceOf
Running querryfc
Written func info: WAVAX, balanceOf
Handling balance function!
1
[i]Type for TMP_181

Name: TMP_181 Function: skim
Num: 1
Den: -1
Address: u
Norm: 18
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
WAVAX_29(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_28', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxReserve_30(uint256) := ϕ(['wavaxReserve_29', 'wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
TMP_182(uint256) = TMP_181 (c)- wavaxReserve_30
init
end
init
end
init
end
_______________

Name: wavaxReserve Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef

Name: TMP_182 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
[i]Type for TMP_182

Name: TMP_182 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
excessWavax_1(uint256) := TMP_182(uint256)
asgn
init
end
_______________

Name: TMP_182 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance

Name: excessWavax Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
COPY HERE
Source address: u
Finance type key: (0, -1)
[i]Type for excessWavax

Name: excessWavax Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_183(bool) = excessWavax_1 > 0
init
end
init
end
lnorm: u rnorm: 0
[i]Type for TMP_183

Name: TMP_183 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: raw balance
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: penaltyCollector, Num: 1
Globalname: penaltyCollector
End popogation

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
Phid
TMP_184(bool) = HIGH_LEVEL_CALL, dest:WAVAX_29(IWAVAX), function:transfer, arguments:['penaltyCollector_1', 'excessWavax_1']  
High Call: transfer
Running querryfc
[i]Type for TMP_184

Name: TMP_184 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
WAVAX_30(IWAVAX) := ϕ(['WAVAX_2', 'WAVAX_24', 'WAVAX_30', 'WAVAX_23', 'WAVAX_21', 'WAVAX_13', 'WAVAX_29', 'WAVAX_8'])
Phi
[i]Type for WAVAX

Name: WAVAX Function: skim
Num: -1
Den: -1
Address: 1
Norm: u
LF: WAVAX
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: excessAvax, Num: 1
Globalname: excessAvax
End popogation
TMP_185 = CONVERT this to address
Converting this
8
[i]Type for TMP_185

Name: TMP_185 Function: skim
Num: 
Den: 
Address: 8
Norm: u
LF: LaunchEvent
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_186(uint256) = SOLIDITY_CALL balance(address)(TMP_185)
[i]Type for TMP_186

Name: TMP_186 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
excessAvax_1(uint256) := TMP_186(uint256)
asgn
init
end
_______________

Name: TMP_186 Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: excessAvax Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Finance type key: (-1, -1)
[i]Type for excessAvax

Name: excessAvax Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: excessAvax, Num: 1
Globalname: excessAvax
End popogation
TMP_187(bool) = excessAvax_1 > 0
init
end
init
end
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: excessAvax Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_187 Function: skim
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_187

Name: TMP_187 Function: skim
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Name: penaltyCollector, Num: 1
Globalname: penaltyCollector
End popogation
INTERNAL_CALL, LaunchEvent._safeTransferAVAX(address,uint256)(penaltyCollector_1,excessAvax_1)
init
end
init
end
[[], [], 'u', None, [], -1, 'u', 'u']

Name: _to Function: None
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
[[-1], [-1], 'u', None, [], -1, 'u', 'u']

Name: _value Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _to, Num: 1
Globalname: _to

Name: _to_1 Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _to, Num: 1
Globalname: _to
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _to, Num: 1
Globalname: _to

Name: _to_1 Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
Phid
Source address: u

Name: _value_1 Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_to_1(address) := ϕ(['msg.sender', 'TMP_87', 'penaltyCollector_1'])
Phi
[i]Type for _to

Name: _to Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: _to
Value: u
Fields: 
Finance Type: undef
XXXX
_value_1(uint256) := ϕ(['balance_1', 'excessAvax_1', 'amountMinusFee_1', 'feeAmount_1'])
Phi
[i]Type for _value

Name: _value Function: _safeTransferAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
Source address: u
Name: _to, Num: 1
Globalname: _to
Name: success, Num: 1
Globalname: success
End popogation
TMP_223 = new bytes(0)
[i]Type for TMP_223

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:_to_1, function:call, arguments:['TMP_223'] value:_value_1 
[i]Type for TUPLE_1

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
success_1(bool)= UNPACK TUPLE_1 index: 0 
Finding type for success(bool ... )
[i]Type for success

Name: success Function: _safeTransferAVAX
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: success, Num: 1
Globalname: success
End popogation
TMP_224(None) = SOLIDITY_CALL require(bool,string)(success_1,LaunchEvent: avax transfer failed)
[i]Type for TMP_224

Name: None Function: None
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



getPenalty


auctionStart_3(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
PHASE_ONE_DURATION_3(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
PHASE_ONE_NO_FEE_DURATION_2(uint256) := ϕ(['PHASE_ONE_NO_FEE_DURATION_1', 'PHASE_ONE_NO_FEE_DURATION_0'])
maxWithdrawPenalty_2(uint256) := ϕ(['maxWithdrawPenalty_1', 'maxWithdrawPenalty_0'])
fixedWithdrawPenalty_2(uint256) := ϕ(['fixedWithdrawPenalty_1', 'fixedWithdrawPenalty_0'])
TMP_189(uint256) = block.timestamp (c)- auctionStart_3
timeElapsed_1(uint256) := TMP_189(uint256)
TMP_190(bool) = timeElapsed_1 < PHASE_ONE_NO_FEE_DURATION_2
CONDITION TMP_190
TMP_192(bool) = timeElapsed_1 < PHASE_ONE_DURATION_3
CONDITION TMP_192
TMP_191(uint256) = maxWithdrawPenalty_2 (c)* 0
RETURN TMP_191
TMP_193(uint256) = timeElapsed_1 (c)- PHASE_ONE_NO_FEE_DURATION_2
TMP_194(uint256) = TMP_193 (c)* maxWithdrawPenalty_2
TMP_195(uint256) = PHASE_ONE_DURATION_3 (c)- PHASE_ONE_NO_FEE_DURATION_2
TMP_196 = CONVERT TMP_195 to uint256
TMP_197(uint256) = TMP_194 (c)/ TMP_196
RETURN TMP_197
RETURN fixedWithdrawPenalty_2


Propogating parameters and globals to SSA variables...
End popogation

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_ONE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
auctionStart_3(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
Phi
[i]Type for auctionStart

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_3(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_NO_FEE_DURATION_2(uint256) := ϕ(['PHASE_ONE_NO_FEE_DURATION_1', 'PHASE_ONE_NO_FEE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxWithdrawPenalty_2(uint256) := ϕ(['maxWithdrawPenalty_1', 'maxWithdrawPenalty_0'])
Phi
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fixedWithdrawPenalty_2(uint256) := ϕ(['fixedWithdrawPenalty_1', 'fixedWithdrawPenalty_0'])
Phi
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: timeElapsed, Num: 1
Globalname: timeElapsed
End popogation
TMP_189(uint256) = block.timestamp (c)- auctionStart_3
init
end
init
end
init
end
_______________

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_189 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_189

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_189(uint256)
asgn
init
end
_______________

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: timeElapsed Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_190(bool) = timeElapsed_1 < PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_190

Name: TMP_190 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_192(bool) = timeElapsed_1 < PHASE_ONE_DURATION_3
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_192

Name: TMP_192 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_191(uint256) = maxWithdrawPenalty_2 (c)* 0
testing mul...
init
end
init
end

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_191 Function: getPenalty
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_191

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
RETURN TMP_191
RETURN
init
end

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
TMP_193(uint256) = timeElapsed_1 (c)- PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_193 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_193

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(uint256) = TMP_193 (c)* maxWithdrawPenalty_2
testing mul...
init
end
init
end

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_194 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_194

Name: TMP_194 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_195(uint256) = PHASE_ONE_DURATION_3 (c)- PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_195 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_196 = CONVERT TMP_195 to uint256
Converting TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_196 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_196

Name: TMP_196 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_197(uint256) = TMP_194 (c)/ TMP_196
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_197

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_197
RETURN
init
end

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN fixedWithdrawPenalty_2
RETURN
init
end

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


auctionStart_3(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
PHASE_ONE_DURATION_3(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
PHASE_ONE_NO_FEE_DURATION_2(uint256) := ϕ(['PHASE_ONE_NO_FEE_DURATION_1', 'PHASE_ONE_NO_FEE_DURATION_0'])
maxWithdrawPenalty_2(uint256) := ϕ(['maxWithdrawPenalty_1', 'maxWithdrawPenalty_0'])
fixedWithdrawPenalty_2(uint256) := ϕ(['fixedWithdrawPenalty_1', 'fixedWithdrawPenalty_0'])
TMP_189(uint256) = block.timestamp (c)- auctionStart_3
timeElapsed_1(uint256) := TMP_189(uint256)
TMP_190(bool) = timeElapsed_1 < PHASE_ONE_NO_FEE_DURATION_2
CONDITION TMP_190
TMP_192(bool) = timeElapsed_1 < PHASE_ONE_DURATION_3
CONDITION TMP_192
TMP_191(uint256) = maxWithdrawPenalty_2 (c)* 0
RETURN TMP_191
TMP_193(uint256) = timeElapsed_1 (c)- PHASE_ONE_NO_FEE_DURATION_2
TMP_194(uint256) = TMP_193 (c)* maxWithdrawPenalty_2
TMP_195(uint256) = PHASE_ONE_DURATION_3 (c)- PHASE_ONE_NO_FEE_DURATION_2
TMP_196 = CONVERT TMP_195 to uint256
TMP_197(uint256) = TMP_194 (c)/ TMP_196
RETURN TMP_197
RETURN fixedWithdrawPenalty_2


Propogating parameters and globals to SSA variables...
End popogation

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_ONE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
auctionStart_3(uint256) := ϕ(['auctionStart_1', 'auctionStart_0'])
Phi
[i]Type for auctionStart

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_DURATION_3(uint256) := ϕ(['PHASE_ONE_DURATION_1', 'PHASE_ONE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_DURATION

Name: PHASE_ONE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
PHASE_ONE_NO_FEE_DURATION_2(uint256) := ϕ(['PHASE_ONE_NO_FEE_DURATION_1', 'PHASE_ONE_NO_FEE_DURATION_0'])
Phi
[i]Type for PHASE_ONE_NO_FEE_DURATION

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
maxWithdrawPenalty_2(uint256) := ϕ(['maxWithdrawPenalty_1', 'maxWithdrawPenalty_0'])
Phi
[i]Type for maxWithdrawPenalty

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
fixedWithdrawPenalty_2(uint256) := ϕ(['fixedWithdrawPenalty_1', 'fixedWithdrawPenalty_0'])
Phi
[i]Type for fixedWithdrawPenalty

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: timeElapsed, Num: 1
Globalname: timeElapsed
End popogation
TMP_189(uint256) = block.timestamp (c)- auctionStart_3
init
end
init
end
init
end
_______________

Name: auctionStart Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_189 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_189

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
timeElapsed_1(uint256) := TMP_189(uint256)
asgn
init
end
_______________

Name: TMP_189 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: timeElapsed Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for timeElapsed

Name: timeElapsed Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_190(bool) = timeElapsed_1 < PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_190

Name: TMP_190 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_192(bool) = timeElapsed_1 < PHASE_ONE_DURATION_3
init
end
init
end
lnorm: u rnorm: u
[i]Type for TMP_192

Name: TMP_192 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_191(uint256) = maxWithdrawPenalty_2 (c)* 0
testing mul...
init
end
init
end

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: 0
init
end
_______________

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_191 Function: getPenalty
Num: 
Den: 
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_191

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
RETURN TMP_191
RETURN
init
end

Name: TMP_191 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 0
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
TMP_193(uint256) = timeElapsed_1 (c)- PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_193 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_193

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_194(uint256) = TMP_193 (c)* maxWithdrawPenalty_2
testing mul...
init
end
init
end

Name: TMP_193 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: maxWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_194 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_194

Name: TMP_194 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_195(uint256) = PHASE_ONE_DURATION_3 (c)- PHASE_ONE_NO_FEE_DURATION_2
init
end
init
end
init
end
_______________

Name: PHASE_ONE_NO_FEE_DURATION Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_195 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_196 = CONVERT TMP_195 to uint256
Converting TMP_195

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
init
end
_______________

Name: TMP_195 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_196 Function: getPenalty
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_196

Name: TMP_196 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_197(uint256) = TMP_194 (c)/ TMP_196
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_197

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_197
RETURN
init
end

Name: TMP_197 Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
RETURN fixedWithdrawPenalty_2
RETURN
init
end

Name: fixedWithdrawPenalty Function: getPenalty
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



getReserves


tokenReserve_25(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_18(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
wavaxReserve_31(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
TMP_198(uint256) = tokenReserve_25 (c)+ tokenIncentivesBalance_18
RETURN wavaxReserve_31,TMP_198


Propogating parameters and globals to SSA variables...
End popogation
Name: tokenReserve, Num: 25
Globalname: tokenReserve
global...

Name: tokenReserve Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
Name: tokenIncentivesBalance, Num: 18
Globalname: tokenIncentivesBalance
global...

Name: tokenIncentivesBalance Function: emergencyWithdraw
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
Name: wavaxReserve, Num: 31
Globalname: wavaxReserve
global...

Name: wavaxReserve Function: emergencyWithdraw
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Source address: u

Name: None Function: None
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
tokenReserve_25(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: getReserves
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_18(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: getReserves
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
wavaxReserve_31(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_198(uint256) = tokenReserve_25 (c)+ tokenIncentivesBalance_18
init
end
init
end
Error with TMP_198 in function getReserves
Error with: TMP_198 in function getReserves
[i]Type for TMP_198

Name: TMP_198 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN wavaxReserve_31,TMP_198
RETURN
init
end

Name: wavaxReserve Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
init
end

Name: TMP_198 Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


tokenReserve_25(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
tokenIncentivesBalance_18(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
wavaxReserve_31(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
TMP_198(uint256) = tokenReserve_25 (c)+ tokenIncentivesBalance_18
RETURN wavaxReserve_31,TMP_198


Propogating parameters and globals to SSA variables...
End popogation

Name: tokenReserve Function: getReserves
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid

Name: tokenIncentivesBalance Function: getReserves
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid

Name: wavaxReserve Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
Phid
tokenReserve_25(uint256) := ϕ(['tokenReserve_1', 'tokenReserve_0', 'tokenReserve_13', 'tokenReserve_20', 'tokenReserve_21', 'tokenReserve_24', 'tokenReserve_17'])
Phi
[i]Type for tokenReserve

Name: tokenReserve Function: getReserves
Num: -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
tokenIncentivesBalance_18(uint256) := ϕ(['tokenIncentivesBalance_11', 'tokenIncentivesBalance_17', 'tokenIncentivesBalance_7', 'tokenIncentivesBalance_14', 'tokenIncentivesBalance_8', 'tokenIncentivesBalance_0', 'tokenIncentivesBalance_13', 'tokenIncentivesBalance_1'])
Phi
[i]Type for tokenIncentivesBalance

Name: tokenIncentivesBalance Function: getReserves
Num: -998, -998, -998, -998, -998, -998
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
wavaxReserve_31(uint256) := ϕ(['wavaxReserve_24', 'wavaxReserve_22', 'wavaxReserve_5', 'wavaxReserve_30', 'wavaxReserve_25', 'wavaxReserve_10', 'wavaxReserve_0'])
Phi
[i]Type for wavaxReserve

Name: wavaxReserve Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_198(uint256) = tokenReserve_25 (c)+ tokenIncentivesBalance_18
init
end
init
end
[i]Type for TMP_198

Name: TMP_198 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN wavaxReserve_31,TMP_198
RETURN
init
end

Name: wavaxReserve Function: getReserves
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: 0
Fields: 
Finance Type: undef
init
end

Name: TMP_198 Function: getReserves
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



getRJoeAmount
Finding type for _avaxAmount(uint256 ... )
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: None
    fields: []
    fintype: -1


_avaxAmount_1(uint256) := ϕ(['TMP_63'])
rJoePerAvax_2(uint256) := ϕ(['rJoePerAvax_0', 'rJoePerAvax_1'])
TMP_199(uint256) = _avaxAmount_1 (c)* rJoePerAvax_2
RETURN TMP_199


Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _avaxAmount, Num: 1
Globalname: _avaxAmount

Name: _avaxAmount_1 Function: getRJoeAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Phid
_avaxAmount_1(uint256) := ϕ(['TMP_63'])
Phi
init
end
_______________

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _avaxAmount Function: getRJoeAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for _avaxAmount

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rJoePerAvax_2(uint256) := ϕ(['rJoePerAvax_0', 'rJoePerAvax_1'])
Phi
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_199(uint256) = _avaxAmount_1 (c)* rJoePerAvax_2
testing mul...
init
end
init
end

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: TMP_199 Function: getRJoeAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_199

Name: TMP_199 Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_199
RETURN
init
end

Name: TMP_199 Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef


_avaxAmount_1(uint256) := ϕ(['TMP_63'])
rJoePerAvax_2(uint256) := ϕ(['rJoePerAvax_0', 'rJoePerAvax_1'])
TMP_199(uint256) = _avaxAmount_1 (c)* rJoePerAvax_2
RETURN TMP_199


Propogating parameters and globals to SSA variables...
End popogation
Source address: u
Name: _avaxAmount, Num: 1
Globalname: _avaxAmount

Name: _avaxAmount_1 Function: getRJoeAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
Phid
_avaxAmount_1(uint256) := ϕ(['TMP_63'])
Phi
init
end
_______________

Name: TMP_63 Function: depositAVAX
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: _avaxAmount Function: getRJoeAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for _avaxAmount

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
rJoePerAvax_2(uint256) := ϕ(['rJoePerAvax_0', 'rJoePerAvax_1'])
Phi
[i]Type for rJoePerAvax

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_199(uint256) = _avaxAmount_1 (c)* rJoePerAvax_2
testing mul...
init
end
init
end

Name: _avaxAmount Function: getRJoeAmount
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: rJoePerAvax Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: 'u'
Fields: 
Finance Type: undef

Name: TMP_199 Function: getRJoeAmount
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
[i]Type for TMP_199

Name: TMP_199 Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
RETURN TMP_199
RETURN
init
end

Name: TMP_199 Function: getRJoeAmount
Num: 7, 7
Den: 3, 3
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Source address: u
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



pairBalance
Finding type for _user(address ... )
prev address? u
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Param: 0
    num: [-1]
    den: [-1]
    norm: u
    link: _user
    fields: []
    fintype: -1


_user_1(address) := ϕ(['msg.sender'])
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
lpSupply_6(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
TMP_200(bool) = wavaxAllocated_4 == 0
REF_62(bool) -> user_1.hasWithdrawnPair
TMP_201(bool) = TMP_200 || REF_62
CONDITION TMP_201
REF_63(uint256) -> user_1.balance
TMP_202(uint256) = REF_63 (c)* lpSupply_6
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
TMP_204(uint256) = TMP_203 (c)/ 2
RETURN TMP_204
RETURN 0


Propogating parameters and globals to SSA variables...
End popogation
Source address: -997

Name: _user_1 Function: pairBalance
Num: 
Den: 
Address: -997
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_user_1(address) := ϕ(['msg.sender'])
Phi
[i]Type for _user

Name: _user Function: pairBalance
Num: 
Den: 
Address: -997
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_6(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
Phi
[i]Type for lpSupply

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1
Globalname: user
End popogation
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
INDEX
Source address: u
[i]Type for REF_61

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_200(bool) = wavaxAllocated_4 == 0
[i]Type for TMP_200

Name: TMP_200 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_62(bool) -> user_1.hasWithdrawnPair
MEMBER
init
end
init
end
init
end
_______________

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_62

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: hasWithdrawnPair
#################
Member: 
Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_201(bool) = TMP_200 || REF_62
[i]Type for TMP_201

Name: TMP_201 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_63(uint256) -> user_1.balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_63

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: balance
#################
Member: 
Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
Fieldf: 
Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = REF_63 (c)* lpSupply_6
testing mul...
init
end
init
end

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_202 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_202

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_203

Name: TMP_203 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)/ 2
init
end
init
end
lnorm: u rnorm: 0
init
end
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_204

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
RETURN TMP_204
RETURN
init
end

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
RETURN 0
RETURN
init
end

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef


_user_1(address) := ϕ(['msg.sender'])
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
lpSupply_6(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
TMP_200(bool) = wavaxAllocated_4 == 0
REF_62(bool) -> user_1.hasWithdrawnPair
TMP_201(bool) = TMP_200 || REF_62
CONDITION TMP_201
REF_63(uint256) -> user_1.balance
TMP_202(uint256) = REF_63 (c)* lpSupply_6
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
TMP_204(uint256) = TMP_203 (c)/ 2
RETURN TMP_204
RETURN 0


Propogating parameters and globals to SSA variables...
End popogation
Source address: -997

Name: _user_1 Function: pairBalance
Num: 
Den: 
Address: -997
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
Phid

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Phid
_user_1(address) := ϕ(['msg.sender'])
Phi
[i]Type for _user

Name: _user Function: pairBalance
Num: 
Den: 
Address: -997
Norm: u
LF: _user
Value: u
Fields: 
Finance Type: undef
XXXX
getUserInfo_20(mapping(address => LaunchEvent.UserInfo)) := ϕ(['getUserInfo_20', 'getUserInfo_0', 'getUserInfo_5', 'getUserInfo_13', 'getUserInfo_18', 'getUserInfo_19', 'getUserInfo_16', 'getUserInfo_9'])
Phi
[i]Type for getUserInfo

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
wavaxAllocated_4(uint256) := ϕ(['wavaxAllocated_3', 'wavaxAllocated_0', 'wavaxAllocated_1'])
Phi
[i]Type for wavaxAllocated

Name: wavaxAllocated Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
lpSupply_6(uint256) := ϕ(['lpSupply_1', 'lpSupply_0', 'lpSupply_5'])
Phi
[i]Type for lpSupply

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
Name: user, Num: 1
Globalname: user
End popogation
REF_61(LaunchEvent.UserInfo) -> getUserInfo_20[_user_1]
INDEX
Source address: u
[i]Type for REF_61

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: None, Field: None
XXXX
user_1(LaunchEvent.UserInfo) := REF_61(LaunchEvent.UserInfo)
asgn
init
end
_______________

Name: getUserInfo Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: user Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
COPY HERE
Source address: u
Finance type key: (-1, -1)
[i]Type for user

Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
TMP_200(bool) = wavaxAllocated_4 == 0
[i]Type for TMP_200

Name: TMP_200 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
REF_62(bool) -> user_1.hasWithdrawnPair
MEMBER
init
end
init
end
init
end
_______________

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_62

Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: hasWithdrawnPair
#################
Member: 
Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
Fieldf: 
Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: hasWithdrawnPair Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_201(bool) = TMP_200 || REF_62
[i]Type for TMP_201

Name: TMP_201 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
Propogating parameters and globals to SSA variables...
End popogation
Propogating parameters and globals to SSA variables...
End popogation
REF_63(uint256) -> user_1.balance
MEMBER
init
end
init
end
init
end
_______________

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for REF_63

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Root: user_1, Field: balance
#################
Member: 
Name: user Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: hasWithdrawnPair, balance
Finance Type: undef
Fieldf: 
Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
Copy_ir: 
Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Added: True
Source address: u
Finance type key: (-1, -1)
Added to member...

Name: balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_202(uint256) = REF_63 (c)* lpSupply_6
testing mul...
init
end
init
end

Name: user.balance Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
lnorm: u rnorm: u
init
end
_______________

Name: lpSupply Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef

Name: TMP_202 Function: pairBalance
Num: 
Den: 
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
COPY HERE
Source address: u
[i]Type for TMP_202

Name: TMP_202 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_203(uint256) = TMP_202 (c)/ wavaxAllocated_4
init
end
init
end
lnorm: u rnorm: u
init
end
init
end
init
end
lnorm: u rnorm: u
init
end
[i]Type for TMP_203

Name: TMP_203 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: u
LF: None
Value: u
Fields: 
Finance Type: undef
XXXX
TMP_204(uint256) = TMP_203 (c)/ 2
init
end
init
end
lnorm: u rnorm: 0
init
end
init
end
init
end
lnorm: u rnorm: 0
init
end
[i]Type for TMP_204

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
XXXX
RETURN TMP_204
RETURN
init
end

Name: TMP_204 Function: pairBalance
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: 2
Fields: 
Finance Type: undef
Propogating parameters and globals to SSA variables...
End popogation
RETURN 0
RETURN
init
end

Name: 0 Function: None
Num: -1
Den: -1
Address: u
Norm: 0
LF: None
Value: u
Fields: 
Finance Type: undef
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



_atPhase
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u



_safeTransferAVAX
State_var: WAVAX
Source address: 1
State_var: factory
Source address: u
State_var: floorPrice
Source address: u
State_var: pair
Source address: u
State_var: router
Source address: u
State_var: token
Source address: -998
State_var: tokenIncentivesBalance
Source address: u
State_var: tokenIncentivesForUsers
Source address: u
State_var: tokenReserve
Source address: u
State_var: wavaxAllocated
Source address: u
State_var: wavaxReserve
Source address: u
State_var: PHASE_ONE_DURATION
Source address: u
State_var: PHASE_TWO_DURATION
Source address: u
State_var: auctionStart
Source address: u
State_var: stopped
Source address: u
State_var: rocketJoeFactory
Source address: 6
State_var: getUserInfo
Source address: u
State_var: issuer
Source address: 4
State_var: lpSupply
Source address: u
State_var: maxAllocation
Source address: u
State_var: rJoe
Source address: 2
State_var: rJoePerAvax
Source address: u
State_var: tokenIncentiveIssuerRefund
Source address: u
State_var: _owner
Source address: 5
State_var: initialized
Source address: u
State_var: issuerTimelock
Source address: u
State_var: userTimelock
Source address: u
State_var: PHASE_ONE_NO_FEE_DURATION
Source address: u
State_var: fixedWithdrawPenalty
Source address: u
State_var: maxWithdrawPenalty
Source address: u
Address: 1, Label: [global:wavax]
Address: 2, Label: [global:rJoe]
Address: 3, Label: global:wavax
Address: 4, Label: global:issuer
Address: 5, Label: global:_owner
Address: -999, Label: initialize:_issuer
Address: -998, Label: initialize:_token
Address: -997, Label: pairBalance:_user
Address: 6, Label: initialize:TMP_16
Address: 6, Label: global:msg.sender
Address: 7, Label: global:global:rJoe
Address: 8, Label: initialize:TMP_40
Address: 8, Label: global:this
Head Addr: 1
    Norm: 18
    Set: {1}
    Fin: NULL
Head Addr: 2
    Norm: 18
    Set: {2}
    Fin: NULL
Head Addr: 3
    Norm: u
    Set: {3}
    Fin: NULL
Head Addr: 4
    Norm: 0
    Set: {4}
    Fin: NULL
Head Addr: 5
    Norm: 0
    Set: {5}
    Fin: NULL
Head Addr: -999
    Norm: 0
    Set: {-999}
    Fin: NULL
Head Addr: -998
    Norm: 6
    Set: {-998}
    Fin: NULL
Head Addr: -997
    Norm: 0
    Set: {-997}
    Fin: NULL
Head Addr: 6
    Norm: u
    Set: {6}
    Fin: NULL
Head Addr: 7
    Norm: u
    Set: {7}
    Fin: NULL
Head Addr: 8
    Norm: u
    Set: {8}
    Fin: NULL
Function count: 47
Executing Group 23
[*] Tested 4 warnings for Rocket Joe
Group 23 complete
Testing complete
